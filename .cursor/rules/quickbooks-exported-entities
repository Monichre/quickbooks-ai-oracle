## Quickbooks Exported Entities

### 1. Account

**Table Definition:**

```sql
CREATE TABLE accounts (
  id VARCHAR(50) PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  type VARCHAR(20) NOT NULL,  -- Asset, Liability, Equity, Income, Expense
  subtype VARCHAR(50),
  balance DECIMAL(15,2) NOT NULL DEFAULT 0,
  parent_account_id VARCHAR(50),
  FOREIGN KEY (parent_account_id) REFERENCES accounts(id)
);
```

**Type Definition:**

```typescript
interface Account {
  id: string;
  name: string;
  type: 'Asset' | 'Liability' | 'Equity' | 'Income' | 'Expense';
  subtype?: string;
  balance: number;
  parent_account_id?: string;
}
```

### 2. Customer

**Table Definition:**

```sql
CREATE TABLE customers (
  id VARCHAR(50) PRIMARY KEY,
  customer_name VARCHAR(100) NOT NULL,
  phone_numbers TEXT,
  email VARCHAR(100),
  full_name VARCHAR(100),
  billing_address TEXT,
  shipping_address TEXT
);
```

**Type Definition:**

```typescript
interface Customer {
  id: string;
  customer_name: string;
  phone_numbers: string;
  email: string;
  full_name: string;
  billing_address: string;
  shipping_address?: string;
}
```

### 3. Employee

**Table Definition:**

```sql
CREATE TABLE employees (
  id VARCHAR(50) PRIMARY KEY,
  employee_name VARCHAR(100) NOT NULL,
  phone_numbers TEXT,
  email VARCHAR(100),
  address TEXT
);
```

**Type Definition:**

```typescript
interface Employee {
  id: string;
  employee_name: string;
  phone_numbers?: string;
  email?: string;
  address?: string;
}
```

### 4. Vendor

**Table Definition:**

```sql
CREATE TABLE vendors (
  id VARCHAR(50) PRIMARY KEY,
  vendor_name VARCHAR(100) NOT NULL,
  phone_numbers TEXT,
  email VARCHAR(100),
  full_name VARCHAR(100),
  address TEXT,
  account_number VARCHAR(50)
);
```

**Type Definition:**

```typescript
interface Vendor {
  id: string;
  vendor_name: string;
  phone_numbers?: string;
  email?: string;
  full_name?: string;
  address?: string;
  account_number?: string;
}
```

### 5. General Ledger

**Table Definition:**

```sql
CREATE TABLE general_ledger (
  id VARCHAR(50) PRIMARY KEY,
  account VARCHAR(100) NOT NULL,
  date DATE NOT NULL,
  transaction_type VARCHAR(50),
  reference_number VARCHAR(50),
  name VARCHAR(100),
  memo TEXT,
  debit DECIMAL(15,2),
  credit DECIMAL(15,2),
  balance DECIMAL(15,2) NOT NULL,
  FOREIGN KEY (account) REFERENCES accounts(name)
);
```

**Type Definition:**

```typescript
interface GeneralLedgerEntry {
  id: string;
  account: string;
  date: Date;
  transaction_type: string;
  reference_number?: string;
  name?: string;
  memo?: string;
  debit?: number;
  credit?: number;
  balance: number;
}
```

### 6. Journal Entries

**Table Definition:**

```sql
CREATE TABLE journal_entries (
  id VARCHAR(50) PRIMARY KEY,
  date DATE NOT NULL,
  transaction_type VARCHAR(50),
  reference_number VARCHAR(50),
  name VARCHAR(100),
  memo TEXT
);

CREATE TABLE journal_line_items (
  id VARCHAR(50) PRIMARY KEY,
  journal_entry_id VARCHAR(50) NOT NULL,
  account VARCHAR(100) NOT NULL,
  memo TEXT,
  debit DECIMAL(15,2),
  credit DECIMAL(15,2),
  FOREIGN KEY (journal_entry_id) REFERENCES journal_entries(id),
  FOREIGN KEY (account) REFERENCES accounts(name)
);
```

**Type Definition:**

```typescript
interface JournalEntry {
  id: string;
  date: Date;
  transaction_type: string;
  reference_number?: string;
  name?: string;
  memo?: string;
  line_items: JournalLineItem[];
}

interface JournalLineItem {
  id: string;
  journal_entry_id: string;
  account: string;
  memo?: string;
  debit?: number;
  credit?: number;
}
```

### 7. Financial Reports

The Balance Sheet, Profit and Loss, and Trial Balance are generated from the underlying tables and don't require separate storage tables. They use the existing data models, particularly the accounts table.

**Type Definitions:**

```typescript
interface BalanceSheet {
  asOfDate: Date;
  assets: AccountSummary[];
  liabilities: AccountSummary[];
  equity: AccountSummary[];
  totalAssets: number;
  totalLiabilities: number;
  totalEquity: number;
}

interface ProfitAndLoss {
  startDate: Date;
  endDate: Date;
  income: AccountSummary[];
  expenses: AccountSummary[];
  totalIncome: number;
  totalExpenses: number;
  netIncome: number;
}

interface TrialBalance {
  asOfDate: Date;
  accounts: TrialBalanceEntry[];
  totalDebits: number;
  totalCredits: number;
}

interface AccountSummary {
  id: string;
  name: string;
  balance: number;
  level: number;
  subAccounts?: AccountSummary[];
}

interface TrialBalanceEntry {
  accountId: string;
  accountName: string;
  debitBalance: number;
  creditBalance: number;
}
```

## Entity Relationships

The knowledge graph now includes these entities with their relationships:

1. **Account**
   - Has hierarchical structure (parent-child relationships)
   - Contributes to Balance Sheet, Profit and Loss, and Trial Balance reports

2. **Customer**
   - Related to Journal Entries (for sales transactions)

3. **Employee**
   - Related to Journal Entries (for payroll transactions)

4. **Vendor**
   - Related to Journal Entries (for purchase transactions)

5. **GeneralLedgerEntry**
   - Affects Account balances
   - Created by Journal Entries

6. **JournalEntry**
   - Affects Accounts
   - Creates General Ledger Entries
   - Related to Customers, Vendors, and Employees

7. **Financial Reports**
   - Balance Sheet, Profit and Loss, Trial Balance
   - Generated from Accounts and General Ledger data

This model represents a complete accounting system based on the QuickBooks exports, capturing all entities and their relationships in a structured database schema.

This entity relationship diagram visualizes how the different components of the QuickBooks exports relate to each other. Here's a breakdown of what you're seeing:

## Core Entities

- **Account**: The central entity in the accounting system that represents the chart of accounts. Accounts have a hierarchical structure (parent-child relationship) and are categorized as Asset, Liability, Equity, Income, or Expense.

- **Journal Entry & Journal Line Item**: Represents financial transactions with the journal entry as the header and line items as the details. Each line item references an account and contains either a debit or credit amount.

- **General Ledger Entry**: Records the financial impact of transactions by account, maintaining running balances. These are created from journal entries.

## Contact Entities

- **Customer**: Contains customer contact information and is related to sales transactions through journal entries.
- **Vendor**: Contains vendor/supplier contact information and is linked to purchase transactions.
- **Employee**: Contains employee information and connects to payroll transactions.

## Financial Reports

- **Balance Sheet**: Shows the company's financial position (Assets = Liabilities + Equity) at a specific point in time.
- **Profit and Loss**: Shows income and expenses over a period of time.
- **Trial Balance**: Lists all accounts with their debit or credit balances to verify accounting accuracy.

## Key Relationships

1. **Account Hierarchy**: Accounts can have parent accounts (1:N relationship)
2. **Transaction Flow**: Journal Entries create General Ledger Entries
3. **Account Impact**: Journal Entries and General Ledger Entries affect Account balances
4. **Report Generation**: Accounts contribute data to the financial reports
5. **Business Entities**: Customers, Vendors, and Employees relate to Journal Entries for their respective transaction types

This diagram provides a comprehensive view of how the accounting data flows through the system, from transaction recording to financial reporting, maintaining the integrity of double-entry bookkeeping principles.

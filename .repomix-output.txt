This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-02T04:10:57.339Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
docs/
  PRD.md
  quickbooks-erd.svg
plop-templates/
  component/
    component.hbs
    index.hbs
  feature/
    category-index.hbs
    component.hbs
    index.hbs
  page/
    layout.hbs
    page.hbs
  service/
    api-route.hbs
    client.hbs
    index.hbs
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
scripts/
  dev.js
  example_prd.txt
  README.md
src/
  app/
    (public)/
      sign-in/
        [[...sign-in]]/
          page.tsx
      sign-up/
        [[...sign-up]]/
          page.tsx
    api/
      ai/
        chat/
          route.ts
      intuit/
        auth/
          route.ts
        callback/
          route.ts
        debug/
          route.ts
        logout/
          route.ts
      quickbooks/
        account/
          route.ts
        company-info/
          route.ts
        mock/
          company-info/
            route.ts
          purchase/
            route.ts
          purchase-order/
            route.ts
          vendor/
            route.ts
        purchase/
          route.ts
        purchase-order/
          route.ts
        vendor/
          route.ts
        webhooks/
          route.ts
    dashboard/
      [entity]/
        entity-table.tsx
        page.tsx
      layout.tsx
      page.tsx
    sage/
      page.tsx
    global.css
    layout.tsx
    page.tsx
    search-params.tsx
  components/
    ai-chat/
      index.tsx
    bottom-drawer/
      index.tsx
    nav/
      full-nav.tsx
    ui/
      kokonutui/
        action-search-bar.tsx
        bento-grid.tsx
        content.tsx
        hero-geometric.tsx
        index.tsx
        list-01.tsx
        list-02.tsx
        list-03.tsx
        profile-01.tsx
        profile-02.tsx
        top-nav.tsx
        vercel-v0-chat.tsx
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      breadcrumb.tsx
      button.tsx
      calendar.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      input-otp.tsx
      input.tsx
      label.tsx
      menubar.tsx
      moving-border.tsx
      navbar-menu.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
    calendars.tsx
    connect-to-quickbooks.tsx
    date-picker.tsx
    footer.tsx
    nav-favorites.tsx
    nav-main.tsx
    nav-secondary.tsx
    nav-user.tsx
    nav-workspaces.tsx
    RedirectToQuickbooks.tsx
    sidebar-left.tsx
    sidebar-right.tsx
    team-switcher.tsx
  features/
  hooks/
    use-auto-resize-textarea.ts
    use-debounce.ts
    use-mobile.ts
  lib/
    utils.ts
  providers/
    sidebar-provider.tsx
  service/
  services/
    intuit/
      account/
        account.api.ts
      company-info/
        company-info.api.ts
      customer/
        customer.api.ts
      invoice/
        invoice.api.ts
      item/
        item.api.ts
      product/
        product.api.ts
      purchase/
        purchase.api.ts
      purchase-order/
        purchase-order.api.ts
      vendor/
        vendor.api.ts
      api.ts
      auth.ts
      client.ts
      encryption.ts
      index.ts
      README.md
      types.ts
    quickbooks/
      client.ts
    sage/
      client.ts
    index.ts
  stories/
    assets/
      accessibility.svg
      discord.svg
      github.svg
      tutorials.svg
      youtube.svg
    button.css
    Button.stories.ts
    Button.tsx
    header.css
    Header.stories.ts
    Header.tsx
    page.css
    Page.stories.ts
    Page.tsx
  types/
    global.d.ts
    intuit-oauth.d.ts
  env.mjs
  middleware.ts
tasks/
templates/
.gitignore
.npmrc
biome.json
CLAUDE.md
components.json
next.config.ts
package.json
plopfile.js
postcss.config.mjs
README-generators.md
README-task-master.md
README.md
test-apis.mjs
test-mock-apis.mjs
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="docs/PRD.md">
# PRODUCT REQUIREMENTS DOCUMENT (PRD)

## QuickBooks & Sage Data Integration System

### 1. Executive Summary

This document outlines the requirements for developing a data integration system that consolidates information from QuickBooks and Sage into a unified database, with Sage serving as the authoritative data source. The system will facilitate business operations for a client operating as a middleman between multiple product vendors and service vendors, handling customer orders that translate into multiple purchase orders to different suppliers.

### 2. Product Vision

Create a robust data integration platform that seamlessly merges financial and business planning data from QuickBooks and Sage, providing a single source of truth for business operations while maintaining data integrity and supporting significant product catalog expansion.

### 3. Target Users

- Business owner/client (John) who serves as a middleman between customers and multiple vendors
- Administrative staff who manage orders and inventory
- Financial team members who handle accounting and reporting

### 4. User Stories

1. As a business owner, I want Sage data to take precedence over QuickBooks data when conflicts exist so that I can maintain consistent business operations.
2. As an administrator, I want to access a unified dataset that combines information from both systems so I can manage operations without switching between platforms.
3. As a financial team member, I want accurate data synchronization so I can generate reliable reports.
4. As a business owner, I want the system to handle significant catalog expansion (from ~200 to 20,000+ products) so I can scale operations.
5. As an administrator, I want data integrity verification during import processes to ensure accuracy.

### 5. System Architecture

5.1 Technology Stack

- **Frontend**: NextJS, React, Tailwind CSS
- **Backend**: Node.js/Express or similar API framework
- **Database**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Hosting**: Vercel or similar
- **API Integration**: Sage and QuickBooks APIs

5.2 Data Flow

1. Extract data from Sage and QuickBooks via APIs or data exports
2. Transform data according to unified schema (prioritizing Sage schema)
3. Load transformed data into Supabase
4. Implement verification processes to ensure data integrity
5. Provide API endpoints for frontend consumption

### 6. Functional Requirements

6.1 Data Integration

- Implement data connectors for both Sage and QuickBooks
- Create a unified data schema that prioritizes Sage data structure
- Establish conflict resolution rules that favor Sage data when discrepancies exist
- Support batch processing for initial data migration
- Implement incremental updates for ongoing synchronization

6.2 Data Management

- Design database structure optimized for large product catalog (20,000+ products)
- Implement data normalization to reduce redundancy
- Create data validation rules to maintain integrity
- Develop data cleaning processes to handle inconsistent entries
- Implement versioning to track data changes

6.3 User Interface

- Create dashboard for monitoring integration status
- Develop interface for managing conflict resolution rules
- Implement search and filtering capabilities for large datasets
- Design reporting interface for business insights
- Create user management system with role-based access

6.4 AI Integration

- Implement AI-assisted data cleaning and normalization
- Develop machine learning models for identifying potential data conflicts
- Create AI-managed project board in GitHub for development tracking
- Implement intelligent search capabilities for product catalog

### 7. Non-Functional Requirements

7.1 Performance

- System must handle 20,000+ product records efficiently
- Data synchronization processes should complete within acceptable timeframes
- UI response time should remain under 2 seconds for standard operations
- API endpoints should respond within 1 second

7.2 Security

- Implement role-based access control
- Secure API endpoints with proper authentication
- Encrypt sensitive data in transit and at rest
- Maintain audit logs of system access and changes

7.3 Scalability

- Architecture should support future growth beyond 20,000 products
- Database design should accommodate increased transaction volume
- System should allow for additional data source integration

7.4 Reliability

- Implement error handling and recovery mechanisms
- Create data backup and restoration procedures
- Develop monitoring systems to alert on integration failures
- Ensure system availability of 99.9%

### 8. Data Schema

8.1 Core Entities

- Products
- Customers
- Vendors/Suppliers
- Orders
- Purchase Orders
- Inventory
- Transactions
- Users

8.2 Schema Priorities

- Sage schema takes precedence when conflicts exist with QuickBooks
- Maintain referential integrity across all entities
- Support custom fields required by the business
- Implement proper indexing for performance optimization

### 9. Integration Points

9.1 Sage Integration

- Connect to Sage API or import data exports
- Map Sage data structure to unified schema
- Implement authentication and authorization for Sage access
- Handle Sage-specific data formats and constraints

9.2 QuickBooks Integration

- Connect to QuickBooks API or import data exports
- Map QuickBooks data structure to unified schema
- Implement authentication and authorization for QuickBooks access
- Handle QuickBooks-specific data formats and constraints

### 10. Data Verification and Quality

- Implement data integrity checks during import processes
- Create validation rules for data consistency
- Develop reconciliation processes to identify discrepancies
- Implement AI-assisted data cleaning for legacy data
- Create reporting for data quality metrics

### 11. Development Phases

Phase 1: Planning and Design

- Finalize technology stack
- Design database schema
- Create API specifications
- Establish development environment
- Set up GitHub project with AI-managed board

Phase 2: Core Development

- Implement database structure in Supabase
- Develop data connectors for Sage and QuickBooks
- Create basic user interface
- Implement authentication and authorization
- Develop core API endpoints

Phase 3: Data Migration and Verification

- Develop data migration scripts
- Implement conflict resolution logic
- Create data verification processes
- Perform initial data migration
- Validate data integrity

Phase 4: UI Enhancement and Testing

- Enhance user interface with advanced features
- Implement reporting capabilities
- Develop search and filtering functionality
- Conduct performance testing
- Perform security testing

Phase 5: Deployment and Training

- Deploy to production environment
- Conduct user training
- Implement monitoring systems
- Create documentation
- Establish support procedures

### 12. Success Metrics

- Successful migration of existing data (100% accuracy)
- System capable of handling 20,000+ products with acceptable performance
- Data synchronization maintaining integrity across systems
- User adoption and satisfaction
- Reduction in manual data entry and reconciliation time

### 13. Risks and Mitigations

RiskImpactLikelihoodMitigationAPI limitationsHighMediumDevelop fallback data import methodsData corruption during migrationHighMediumImplement verification and rollback capabilitiesPerformance issues with large datasetsMediumHighOptimize database design and implement cachingUser resistance to new systemMediumLowProvide training and highlight benefitsSecurity vulnerabilitiesHighLowConduct security audits and follow best practices

### 14. Future Considerations

- Mobile application for on-the-go access
- Advanced analytics and reporting
- Integration with additional business systems
- Automated order processing
- AI-powered inventory management
- Customer portal for self-service

### 15. Conclusion

This PRD outlines the requirements for developing a comprehensive data integration system that merges QuickBooks and Sage data, with Sage as the authoritative source. The system will support the client's business operations as a middleman between customers and multiple vendors, while accommodating significant growth in product catalog size and maintaining data integrity.
</file>

<file path="docs/quickbooks-erd.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 900 700">
  <!-- Styles -->
  <style>
    .entity { fill: #e1f5fe; stroke: #2196f3; stroke-width: 2; }
    .report { fill: #e8f5e9; stroke: #4caf50; stroke-width: 2; }
    .title { font-family: Arial; font-weight: bold; font-size: 14px; text-anchor: middle; }
    .attr { font-family: Arial; font-size: 12px; }
    .pk { font-weight: bold; }
    .fk { font-style: italic; }
    .relation { stroke: #616161; stroke-width: 1.5; fill: none; }
    .arrow { fill: #616161; }
    .cardinality { font-family: Arial; font-size: 12px; fill: #616161; text-anchor: middle; }
    .report-text { font-family: Arial; font-style: italic; font-size: 11px; fill: #4caf50; }
  </style>

  <!-- Entities -->

  <!-- Account Entity -->
  <rect x="350" y="50" width="180" height="160" rx="5" ry="5" class="entity" />
  <text x="440" y="75" class="title">Account</text>
  <line x1="370" y1="85" x2="510" y2="85" stroke="#2196f3" stroke-width="1" />
  <text x="370" y="105" class="attr pk">id: string [PK]</text>
  <text x="370" y="125" class="attr">name: string</text>
  <text x="370" y="145" class="attr">type: string</text>
  <text x="370" y="165" class="attr">subtype: string</text>
  <text x="370" y="185" class="attr">balance: decimal</text>
  <text x="370" y="205" class="attr fk">parent_account_id: string [FK]</text>

  <!-- Customer Entity -->
  <rect x="50" y="200" width="180" height="140" rx="5" ry="5" class="entity" />
  <text x="140" y="225" class="title">Customer</text>
  <line x1="70" y1="235" x2="210" y2="235" stroke="#2196f3" stroke-width="1" />
  <text x="70" y="255" class="attr pk">id: string [PK]</text>
  <text x="70" y="275" class="attr">customer_name: string</text>
  <text x="70" y="295" class="attr">phone_numbers: string</text>
  <text x="70" y="315" class="attr">email: string</text>
  <text x="70" y="335" class="attr">billing_address: string</text>

  <!-- Vendor Entity -->
  <rect x="50" y="400" width="180" height="140" rx="5" ry="5" class="entity" />
  <text x="140" y="425" class="title">Vendor</text>
  <line x1="70" y1="435" x2="210" y2="435" stroke="#2196f3" stroke-width="1" />
  <text x="70" y="455" class="attr pk">id: string [PK]</text>
  <text x="70" y="475" class="attr">vendor_name: string</text>
  <text x="70" y="495" class="attr">phone_numbers: string</text>
  <text x="70" y="515" class="attr">email: string</text>
  <text x="70" y="535" class="attr">account_number: string</text>

  <!-- Employee Entity -->
  <rect x="50" y="600" width="180" height="100" rx="5" ry="5" class="entity" />
  <text x="140" y="625" class="title">Employee</text>
  <line x1="70" y1="635" x2="210" y2="635" stroke="#2196f3" stroke-width="1" />
  <text x="70" y="655" class="attr pk">id: string [PK]</text>
  <text x="70" y="675" class="attr">employee_name: string</text>
  <text x="70" y="695" class="attr">phone_numbers: string</text>

  <!-- Journal Entry Entity -->
  <rect x="350" y="400" width="180" height="140" rx="5" ry="5" class="entity" />
  <text x="440" y="425" class="title">JournalEntry</text>
  <line x1="370" y1="435" x2="510" y2="435" stroke="#2196f3" stroke-width="1" />
  <text x="370" y="455" class="attr pk">id: string [PK]</text>
  <text x="370" y="475" class="attr">date: date</text>
  <text x="370" y="495" class="attr">transaction_type: string</text>
  <text x="370" y="515" class="attr">reference_number: string</text>
  <text x="370" y="535" class="attr">name: string</text>

  <!-- Journal Line Item Entity -->
  <rect x="350" y="600" width="180" height="100" rx="5" ry="5" class="entity" />
  <text x="440" y="625" class="title">JournalLineItem</text>
  <line x1="370" y1="635" x2="510" y2="635" stroke="#2196f3" stroke-width="1" />
  <text x="370" y="655" class="attr pk">id: string [PK]</text>
  <text x="370" y="675" class="attr fk">journal_entry_id: string [FK]</text>
  <text x="370" y="695" class="attr fk">account: string [FK]</text>

  <!-- General Ledger Entity -->
  <rect x="650" y="250" width="180" height="160" rx="5" ry="5" class="entity" />
  <text x="740" y="275" class="title">GeneralLedgerEntry</text>
  <line x1="670" y1="285" x2="810" y2="285" stroke="#2196f3" stroke-width="1" />
  <text x="670" y="305" class="attr pk">id: string [PK]</text>
  <text x="670" y="325" class="attr fk">account: string [FK]</text>
  <text x="670" y="345" class="attr">date: date</text>
  <text x="670" y="365" class="attr">transaction_type: string</text>
  <text x="670" y="385" class="attr">debit: decimal</text>
  <text x="670" y="405" class="attr">credit: decimal</text>

  <!-- Reports (not tables, but conceptual) -->
  <rect x="650" y="50" width="180" height="60" rx="5" ry="5" class="report" />
  <text x="740" y="75" class="title">BalanceSheet</text>
  <text x="740" y="95" class="report-text">(Financial Report)</text>
  
  <rect x="650" y="120" width="180" height="60" rx="5" ry="5" class="report" />
  <text x="740" y="145" class="title">ProfitAndLoss</text>
  <text x="740" y="165" class="report-text">(Financial Report)</text>
  
  <rect x="650" y="190" width="180" height="60" rx="5" ry="5" class="report" />
  <text x="740" y="215" class="title">TrialBalance</text>
  <text x="740" y="235" class="report-text">(Financial Report)</text>

  <!-- Relationships -->
  
  <!-- Account self-reference (hierarchy) -->
  <path d="M 510 170 Q 550 170 550 120 Q 550 70 510 70" class="relation" />
  <polygon points="515,70 510,60 505,70" class="arrow" />
  <text x="565" y="120" class="cardinality">1:N</text>
  <text x="565" y="135" class="cardinality">parent-child</text>
  
  <!-- Account to BalanceSheet -->
  <path d="M 530 80 L 650 80" class="relation" />
  <polygon points="645,80 650,80 645,80" class="arrow" />
  <text x="590" y="70" class="cardinality">contributes to</text>
  
  <!-- Account to ProfitAndLoss -->
  <path d="M 500 210 Q 580 210 580 150 L 650 150" class="relation" />
  <polygon points="645,150 650,150 645,150" class="arrow" />
  <text x="590" y="140" class="cardinality">contributes to</text>
  
  <!-- Account to TrialBalance -->
  <path d="M 480 210 Q 560 210 560 220 L 650 220" class="relation" />
  <polygon points="645,220 650,220 645,220" class="arrow" />
  <text x="590" y="210" class="cardinality">contributes to</text>
  
  <!-- GeneralLedger to Account -->
  <path d="M 700 250 Q 700 180 530 150" class="relation" />
  <polygon points="535,146 530,150 535,154" class="arrow" />
  <text x="650" y="200" class="cardinality">affects</text>
  
  <!-- JournalEntry to GeneralLedger -->
  <path d="M 530 470 L 600 470 L 650 410" class="relation" />
  <polygon points="654,416 655,405 646,414" class="arrow" />
  <text x="590" y="450" class="cardinality">creates</text>
  
  <!-- JournalEntry to Account -->
  <path d="M 440 400 L 440 210" class="relation" />
  <polygon points="436,215 440,210 444,215" class="arrow" />
  <text x="450" y="300" class="cardinality">affects</text>
  
  <!-- JournalLineItem to JournalEntry -->
  <path d="M 440 600 L 440 540" class="relation" />
  <polygon points="436,545 440,540 444,545" class="arrow" />
  <text x="450" y="570" class="cardinality">belongs to</text>
  
  <!-- JournalLineItem to Account -->
  <path d="M 370 610 Q 300 610 300 200 Q 300 100 350 100" class="relation" />
  <polygon points="345,96 350,100 345,104" class="arrow" />
  <text x="310" y="300" class="cardinality">references</text>
  
  <!-- Customer to JournalEntry -->
  <path d="M 230 270 Q 290 270 350 400" class="relation" />
  <polygon points="346,396 354,396 350,400" class="arrow" />
  <text x="290" y="350" class="cardinality">relates to</text>
  
  <!-- Vendor to JournalEntry -->
  <path d="M 230 470 L 350 470" class="relation" />
  <polygon points="345,466 350,470 345,474" class="arrow" />
  <text x="290" y="450" class="cardinality">relates to</text>
  
  <!-- Employee to JournalEntry -->
  <path d="M 230 620 Q 290 620 290 550 Q 290 510 350 510" class="relation" />
  <polygon points="345,506 350,510 345,514" class="arrow" />
  <text x="290" y="550" class="cardinality">relates to</text>
</svg>
</file>

<file path="plop-templates/component/component.hbs">
import React from 'react';

interface {{pascalCase name}}Props {
  children?: React.ReactNode;
}

export const {{pascalCase name}} = ({ children }: {{pascalCase name}}Props) => {
  return (
    <div className="{{kebabCase name}}-component">
      {children}
    </div>
  );
};
</file>

<file path="plop-templates/component/index.hbs">
export { {{pascalCase name}} } from './{{pascalCase name}}';
</file>

<file path="plop-templates/feature/category-index.hbs">
/**
 * {{pascalCase name}} Feature Exports
 */

/* PLOP_EXPORTS */
</file>

<file path="plop-templates/feature/component.hbs">
import React from 'react';

interface {{pascalCase component}}Props {
  children?: React.ReactNode;
}

export const {{pascalCase component}} = ({ children }: {{pascalCase component}}Props) => {
  return (
    <div className="{{kebabCase name}}-feature">
      <h2>{{pascalCase component}}</h2>
      {children}
    </div>
  );
};
</file>

<file path="plop-templates/feature/index.hbs">
export { {{pascalCase component}} } from './{{pascalCase component}}';
</file>

<file path="plop-templates/page/layout.hbs">
import React from 'react';

interface {{pascalCase (lookup (split path "/") (subtract (count (split path "/")) 1))}}LayoutProps {
  children: React.ReactNode;
}

export default function {{pascalCase (lookup (split path "/") (subtract (count (split path "/")) 1))}}Layout({ children }: {{pascalCase (lookup (split path "/") (subtract (count (split path "/")) 1))}}LayoutProps) {
  return (
    <div className="{{kebabCase (lookup (split path "/") (subtract (count (split path "/")) 1))}}-layout">
      {children}
    </div>
  );
}
</file>

<file path="plop-templates/page/page.hbs">
import React from 'react';

export const metadata = {
  title: '{{pascalCase (lookup (split path "/") (subtract (count (split path "/")) 1))}}',
  description: '{{pascalCase (lookup (split path "/") (subtract (count (split path "/")) 1))}} page',
};

export default async function {{pascalCase (lookup (split path "/") (subtract (count (split path "/")) 1))}}Page() {
  return (
    <div className="{{kebabCase (lookup (split path "/") (subtract (count (split path "/")) 1))}}-page">
      <h1>{{pascalCase (lookup (split path "/") (subtract (count (split path "/")) 1))}}</h1>
    </div>
  );
}
</file>

<file path="plop-templates/service/api-route.hbs">
import { NextRequest, NextResponse } from 'next/server';

/**
 * GET handler for {{pascalCase name}} API
 * @param request The Next.js request object
 */
export async function GET(request: NextRequest) {
  try {
    // Get query parameters
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    // Return data based on the ID
    if (id) {
      return NextResponse.json({ 
        message: `Successfully retrieved {{kebabCase name}} with ID: ${id}` 
      });
    }

    // Return all data if no ID is provided
    return NextResponse.json({ 
      message: `Successfully retrieved all {{kebabCase name}} items` 
    });
  } catch (error) {
    console.error('Error in {{pascalCase name}} GET handler:', error);
    return NextResponse.json(
      { error: 'Failed to retrieve {{kebabCase name}} data' },
      { status: 500 }
    );
  }
}

/**
 * POST handler for {{pascalCase name}} API
 * @param request The Next.js request object
 */
export async function POST(request: NextRequest) {
  try {
    // Parse request body
    const body = await request.json();

    // Process the data
    return NextResponse.json({ 
      message: `Successfully created {{kebabCase name}}`,
      data: body 
    }, { status: 201 });
  } catch (error) {
    console.error('Error in {{pascalCase name}} POST handler:', error);
    return NextResponse.json(
      { error: 'Failed to create {{kebabCase name}}' },
      { status: 500 }
    );
  }
}

/**
 * PUT handler for {{pascalCase name}} API
 * @param request The Next.js request object
 */
export async function PUT(request: NextRequest) {
  try {
    // Get query parameters
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    // Parse request body
    const body = await request.json();

    if (!id) {
      return NextResponse.json(
        { error: 'ID is required for updating {{kebabCase name}}' },
        { status: 400 }
      );
    }

    // Process the data
    return NextResponse.json({ 
      message: `Successfully updated {{kebabCase name}} with ID: ${id}`,
      data: body 
    });
  } catch (error) {
    console.error('Error in {{pascalCase name}} PUT handler:', error);
    return NextResponse.json(
      { error: 'Failed to update {{kebabCase name}}' },
      { status: 500 }
    );
  }
}

/**
 * DELETE handler for {{pascalCase name}} API
 * @param request The Next.js request object
 */
export async function DELETE(request: NextRequest) {
  try {
    // Get query parameters
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id) {
      return NextResponse.json(
        { error: 'ID is required for deleting {{kebabCase name}}' },
        { status: 400 }
      );
    }

    // Process the data
    return NextResponse.json({ 
      message: `Successfully deleted {{kebabCase name}} with ID: ${id}` 
    });
  } catch (error) {
    console.error('Error in {{pascalCase name}} DELETE handler:', error);
    return NextResponse.json(
      { error: 'Failed to delete {{kebabCase name}}' },
      { status: 500 }
    );
  }
}
</file>

<file path="plop-templates/service/client.hbs">
/**
 * {{pascalCase name}} Service Client
 */

import axios from 'axios';

// Create a base URL for this service
const BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api';

// Create an Axios instance with default config
export const {{camelCase name}}Client = axios.create({
  baseURL: `${BASE_URL}/{{kebabCase name}}`,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add request interceptor for auth tokens, etc.
{{camelCase name}}Client.interceptors.request.use(
  (config) => {
    // You can add authorization headers, etc. here
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Add response interceptor for error handling
{{camelCase name}}Client.interceptors.response.use(
  (response) => {
    return response.data;
  },
  (error) => {
    // Handle error responses
    return Promise.reject(error);
  }
);
</file>

<file path="plop-templates/service/index.hbs">
/**
 * {{pascalCase name}} Service
 */

import { {{camelCase name}}Client } from './client';

export const {{camelCase name}} = {
  // Add your service methods here
  getAll: async () => {
    return {{camelCase name}}Client.get('/');
  },
  
  getById: async (id: string) => {
    return {{camelCase name}}Client.get(`/${id}`);
  },
  
  create: async (data: any) => {
    return {{camelCase name}}Client.post('/', data);
  },
  
  update: async (id: string, data: any) => {
    return {{camelCase name}}Client.put(`/${id}`, data);
  },
  
  remove: async (id: string) => {
    return {{camelCase name}}Client.delete(`/${id}`);
  },
};
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="scripts/dev.js">
#!/usr/bin/env node
/**
 * dev.js
 * Task Master CLI - AI-driven development task management
 * 
 * This is the refactored entry point that uses the modular architecture.
 * It imports functionality from the modules directory and provides a CLI.
 */
// Add at the very beginning of the file
if (process.env.DEBUG === '1') {
  console.error('DEBUG - dev.js received args:', process.argv.slice(2));
}
import { runCLI } from './modules/commands.js';
// Run the CLI with the process arguments
runCLI(process.argv);
</file>

<file path="scripts/example_prd.txt">
<context>
# Overview  
[Provide a high-level overview of your product here. Explain what problem it solves, who it's for, and why it's valuable.]

# Core Features  
[List and describe the main features of your product. For each feature, include:
- What it does
- Why it's important
- How it works at a high level]

# User Experience  
[Describe the user journey and experience. Include:
- User personas
- Key user flows
- UI/UX considerations]
</context>
<PRD>
# Technical Architecture  
[Outline the technical implementation details:
- System components
- Data models
- APIs and integrations
- Infrastructure requirements]

# Development Roadmap  
[Break down the development process into phases:
- MVP requirements
- Future enhancements
- Do not think about timelines whatsoever -- all that matters is scope and detailing exactly what needs to be build in each phase so it can later be cut up into tasks]

# Logical Dependency Chain
[Define the logical order of development:
- Which features need to be built first (foundation)
- Getting as quickly as possible to something usable/visible front end that works
- Properly pacing and scoping each feature so it is atomic but can also be built upon and improved as development approaches]

# Risks and Mitigations  
[Identify potential risks and how they'll be addressed:
- Technical challenges
- Figuring out the MVP that we can build upon
- Resource constraints]

# Appendix  
[Include any additional information:
- Research findings
- Technical specifications]
</PRD>
</file>

<file path="scripts/README.md">
# Meta-Development Script

This folder contains a **meta-development script** (`dev.js`) and related utilities that manage tasks for an AI-driven or traditional software development workflow. The script revolves around a `tasks.json` file, which holds an up-to-date list of development tasks.

## Overview

In an AI-driven development process—particularly with tools like [Cursor](https://www.cursor.so/)—it's beneficial to have a **single source of truth** for tasks. This script allows you to:

1. **Parse** a PRD or requirements document (`.txt`) to initialize a set of tasks (`tasks.json`).
2. **List** all existing tasks (IDs, statuses, titles).
3. **Update** tasks to accommodate new prompts or architecture changes (useful if you discover "implementation drift").
4. **Generate** individual task files (e.g., `task_001.txt`) for easy reference or to feed into an AI coding workflow.
5. **Set task status**—mark tasks as `done`, `pending`, or `deferred` based on progress.
6. **Expand** tasks with subtasks—break down complex tasks into smaller, more manageable subtasks.
7. **Research-backed subtask generation**—use Perplexity AI to generate more informed and contextually relevant subtasks.
8. **Clear subtasks**—remove subtasks from specified tasks to allow regeneration or restructuring.
9. **Show task details**—display detailed information about a specific task and its subtasks.

## Configuration

The script can be configured through environment variables in a `.env` file at the root of the project:

### Required Configuration
- `ANTHROPIC_API_KEY`: Your Anthropic API key for Claude

### Optional Configuration
- `MODEL`: Specify which Claude model to use (default: "claude-3-7-sonnet-20250219")
- `MAX_TOKENS`: Maximum tokens for model responses (default: 4000)
- `TEMPERATURE`: Temperature for model responses (default: 0.7)
- `PERPLEXITY_API_KEY`: Your Perplexity API key for research-backed subtask generation
- `PERPLEXITY_MODEL`: Specify which Perplexity model to use (default: "sonar-medium-online")
- `DEBUG`: Enable debug logging (default: false)
- `LOG_LEVEL`: Log level - debug, info, warn, error (default: info)
- `DEFAULT_SUBTASKS`: Default number of subtasks when expanding (default: 3)
- `DEFAULT_PRIORITY`: Default priority for generated tasks (default: medium)
- `PROJECT_NAME`: Override default project name in tasks.json
- `PROJECT_VERSION`: Override default version in tasks.json

## How It Works

1. **`tasks.json`**:  
   - A JSON file at the project root containing an array of tasks (each with `id`, `title`, `description`, `status`, etc.).  
   - The `meta` field can store additional info like the project's name, version, or reference to the PRD.  
   - Tasks can have `subtasks` for more detailed implementation steps.
   - Dependencies are displayed with status indicators (✅ for completed, ⏱️ for pending) to easily track progress.

2. **CLI Commands**  
   You can run the commands via:

   ```bash
   # If installed globally
   task-master [command] [options]
   
   # If using locally within the project
   node scripts/dev.js [command] [options]
   ```

   Available commands:

   - `init`: Initialize a new project
   - `parse-prd`: Generate tasks from a PRD document
   - `list`: Display all tasks with their status
   - `update`: Update tasks based on new information
   - `generate`: Create individual task files
   - `set-status`: Change a task's status
   - `expand`: Add subtasks to a task or all tasks
   - `clear-subtasks`: Remove subtasks from specified tasks
   - `next`: Determine the next task to work on based on dependencies
   - `show`: Display detailed information about a specific task
   - `analyze-complexity`: Analyze task complexity and generate recommendations
   - `complexity-report`: Display the complexity analysis in a readable format
   - `add-dependency`: Add a dependency between tasks
   - `remove-dependency`: Remove a dependency from a task
   - `validate-dependencies`: Check for invalid dependencies
   - `fix-dependencies`: Fix invalid dependencies automatically
   - `add-task`: Add a new task using AI

   Run `task-master --help` or `node scripts/dev.js --help` to see detailed usage information.

## Listing Tasks

The `list` command allows you to view all tasks and their status:

```bash
# List all tasks
task-master list

# List tasks with a specific status
task-master list --status=pending

# List tasks and include their subtasks
task-master list --with-subtasks

# List tasks with a specific status and include their subtasks
task-master list --status=pending --with-subtasks
```

## Updating Tasks

The `update` command allows you to update tasks based on new information or implementation changes:

```bash
# Update tasks starting from ID 4 with a new prompt
task-master update --from=4 --prompt="Refactor tasks from ID 4 onward to use Express instead of Fastify"

# Update all tasks (default from=1)
task-master update --prompt="Add authentication to all relevant tasks"

# Specify a different tasks file
task-master update --file=custom-tasks.json --from=5 --prompt="Change database from MongoDB to PostgreSQL"
```

Notes:
- The `--prompt` parameter is required and should explain the changes or new context
- Only tasks that aren't marked as 'done' will be updated
- Tasks with ID >= the specified --from value will be updated

## Setting Task Status

The `set-status` command allows you to change a task's status:

```bash
# Mark a task as done
task-master set-status --id=3 --status=done

# Mark a task as pending
task-master set-status --id=4 --status=pending

# Mark a specific subtask as done
task-master set-status --id=3.1 --status=done

# Mark multiple tasks at once
task-master set-status --id=1,2,3 --status=done
```

Notes:
- When marking a parent task as "done", all of its subtasks will automatically be marked as "done" as well
- Common status values are 'done', 'pending', and 'deferred', but any string is accepted
- You can specify multiple task IDs by separating them with commas
- Subtask IDs are specified using the format `parentId.subtaskId` (e.g., `3.1`)
- Dependencies are updated to show completion status (✅ for completed, ⏱️ for pending) throughout the system

## Expanding Tasks

The `expand` command allows you to break down tasks into subtasks for more detailed implementation:

```bash
# Expand a specific task with 3 subtasks (default)
task-master expand --id=3

# Expand a specific task with 5 subtasks
task-master expand --id=3 --num=5

# Expand a task with additional context
task-master expand --id=3 --prompt="Focus on security aspects"

# Expand all pending tasks that don't have subtasks
task-master expand --all

# Force regeneration of subtasks for all pending tasks
task-master expand --all --force

# Use Perplexity AI for research-backed subtask generation
task-master expand --id=3 --research

# Use Perplexity AI for research-backed generation on all pending tasks
task-master expand --all --research
```

## Clearing Subtasks

The `clear-subtasks` command allows you to remove subtasks from specified tasks:

```bash
# Clear subtasks from a specific task
task-master clear-subtasks --id=3

# Clear subtasks from multiple tasks
task-master clear-subtasks --id=1,2,3

# Clear subtasks from all tasks
task-master clear-subtasks --all
```

Notes:
- After clearing subtasks, task files are automatically regenerated
- This is useful when you want to regenerate subtasks with a different approach
- Can be combined with the `expand` command to immediately generate new subtasks
- Works with both parent tasks and individual subtasks

## AI Integration

The script integrates with two AI services:

1. **Anthropic Claude**: Used for parsing PRDs, generating tasks, and creating subtasks.
2. **Perplexity AI**: Used for research-backed subtask generation when the `--research` flag is specified.

The Perplexity integration uses the OpenAI client to connect to Perplexity's API, which provides enhanced research capabilities for generating more informed subtasks. If the Perplexity API is unavailable or encounters an error, the script will automatically fall back to using Anthropic's Claude.

To use the Perplexity integration:
1. Obtain a Perplexity API key
2. Add `PERPLEXITY_API_KEY` to your `.env` file
3. Optionally specify `PERPLEXITY_MODEL` in your `.env` file (default: "sonar-medium-online")
4. Use the `--research` flag with the `expand` command

## Logging

The script supports different logging levels controlled by the `LOG_LEVEL` environment variable:
- `debug`: Detailed information, typically useful for troubleshooting
- `info`: Confirmation that things are working as expected (default)
- `warn`: Warning messages that don't prevent execution
- `error`: Error messages that might prevent execution

When `DEBUG=true` is set, debug logs are also written to a `dev-debug.log` file in the project root.

## Managing Task Dependencies

The `add-dependency` and `remove-dependency` commands allow you to manage task dependencies:

```bash
# Add a dependency to a task
task-master add-dependency --id=<id> --depends-on=<id>

# Remove a dependency from a task
task-master remove-dependency --id=<id> --depends-on=<id>
```

These commands:

1. **Allow precise dependency management**:
   - Add dependencies between tasks with automatic validation
   - Remove dependencies when they're no longer needed
   - Update task files automatically after changes

2. **Include validation checks**:
   - Prevent circular dependencies (a task depending on itself)
   - Prevent duplicate dependencies
   - Verify that both tasks exist before adding/removing dependencies
   - Check if dependencies exist before attempting to remove them

3. **Provide clear feedback**:
   - Success messages confirm when dependencies are added/removed
   - Error messages explain why operations failed (if applicable)

4. **Automatically update task files**:
   - Regenerates task files to reflect dependency changes
   - Ensures tasks and their files stay synchronized

## Dependency Validation and Fixing

The script provides two specialized commands to ensure task dependencies remain valid and properly maintained:

### Validating Dependencies

The `validate-dependencies` command allows you to check for invalid dependencies without making changes:

```bash
# Check for invalid dependencies in tasks.json
task-master validate-dependencies

# Specify a different tasks file
task-master validate-dependencies --file=custom-tasks.json
```

This command:
- Scans all tasks and subtasks for non-existent dependencies
- Identifies potential self-dependencies (tasks referencing themselves)
- Reports all found issues without modifying files
- Provides a comprehensive summary of dependency state
- Gives detailed statistics on task dependencies

Use this command to audit your task structure before applying fixes.

### Fixing Dependencies

The `fix-dependencies` command proactively finds and fixes all invalid dependencies:

```bash
# Find and fix all invalid dependencies
task-master fix-dependencies

# Specify a different tasks file
task-master fix-dependencies --file=custom-tasks.json
```

This command:
1. **Validates all dependencies** across tasks and subtasks
2. **Automatically removes**:
   - References to non-existent tasks and subtasks
   - Self-dependencies (tasks depending on themselves)
3. **Fixes issues in both**:
   - The tasks.json data structure
   - Individual task files during regeneration
4. **Provides a detailed report**:
   - Types of issues fixed (non-existent vs. self-dependencies)
   - Number of tasks affected (tasks vs. subtasks)
   - Where fixes were applied (tasks.json vs. task files)
   - List of all individual fixes made

This is especially useful when tasks have been deleted or IDs have changed, potentially breaking dependency chains.

## Analyzing Task Complexity

The `analyze-complexity` command allows you to automatically assess task complexity and generate expansion recommendations:

```bash
# Analyze all tasks and generate expansion recommendations
task-master analyze-complexity

# Specify a custom output file
task-master analyze-complexity --output=custom-report.json

# Override the model used for analysis
task-master analyze-complexity --model=claude-3-opus-20240229

# Set a custom complexity threshold (1-10)
task-master analyze-complexity --threshold=6

# Use Perplexity AI for research-backed complexity analysis
task-master analyze-complexity --research
```

Notes:
- The command uses Claude to analyze each task's complexity (or Perplexity with --research flag)
- Tasks are scored on a scale of 1-10
- Each task receives a recommended number of subtasks based on DEFAULT_SUBTASKS configuration
- The default output path is `scripts/task-complexity-report.json`
- Each task in the analysis includes a ready-to-use `expansionCommand` that can be copied directly to the terminal or executed programmatically
- Tasks with complexity scores below the threshold (default: 5) may not need expansion
- The research flag provides more contextual and informed complexity assessments

### Integration with Expand Command

The `expand` command automatically checks for and uses complexity analysis if available:

```bash
# Expand a task, using complexity report recommendations if available
task-master expand --id=8

# Expand all tasks, prioritizing by complexity score if a report exists
task-master expand --all

# Override recommendations with explicit values
task-master expand --id=8 --num=5 --prompt="Custom prompt"
```

When a complexity report exists:
- The `expand` command will use the recommended subtask count from the report (unless overridden)
- It will use the tailored expansion prompt from the report (unless a custom prompt is provided)
- When using `--all`, tasks are sorted by complexity score (highest first)
- The `--research` flag is preserved from the complexity analysis to expansion

The output report structure is:
```json
{
  "meta": {
    "generatedAt": "2023-06-15T12:34:56.789Z",
    "tasksAnalyzed": 20,
    "thresholdScore": 5,
    "projectName": "Your Project Name",
    "usedResearch": true
  },
  "complexityAnalysis": [
    {
      "taskId": 8,
      "taskTitle": "Develop Implementation Drift Handling",
      "complexityScore": 9.5,
      "recommendedSubtasks": 6,
      "expansionPrompt": "Create subtasks that handle detecting...",
      "reasoning": "This task requires sophisticated logic...",
      "expansionCommand": "task-master expand --id=8 --num=6 --prompt=\"Create subtasks...\" --research"
    },
    // More tasks sorted by complexity score (highest first)
  ]
}
```

## Finding the Next Task

The `next` command helps you determine which task to work on next based on dependencies and status:

```bash
# Show the next task to work on
task-master next

# Specify a different tasks file
task-master next --file=custom-tasks.json
```

This command:

1. Identifies all **eligible tasks** - pending or in-progress tasks whose dependencies are all satisfied (marked as done)
2. **Prioritizes** these eligible tasks by:
   - Priority level (high > medium > low)
   - Number of dependencies (fewer dependencies first)
   - Task ID (lower ID first)
3. **Displays** comprehensive information about the selected task:
   - Basic task details (ID, title, priority, dependencies)
   - Detailed description and implementation details
   - Subtasks if they exist
4. Provides **contextual suggested actions**:
   - Command to mark the task as in-progress
   - Command to mark the task as done when completed
   - Commands for working with subtasks (update status or expand)

This feature ensures you're always working on the most appropriate task based on your project's current state and dependency structure.

## Showing Task Details

The `show` command allows you to view detailed information about a specific task:

```bash
# Show details for a specific task
task-master show 1

# Alternative syntax with --id option
task-master show --id=1

# Show details for a subtask
task-master show --id=1.2

# Specify a different tasks file
task-master show 3 --file=custom-tasks.json
```

This command:

1. **Displays comprehensive information** about the specified task:
   - Basic task details (ID, title, priority, dependencies, status)
   - Full description and implementation details
   - Test strategy information
   - Subtasks if they exist
2. **Handles both regular tasks and subtasks**:
   - For regular tasks, shows all subtasks and their status
   - For subtasks, shows the parent task relationship
3. **Provides contextual suggested actions**:
   - Commands to update the task status
   - Commands for working with subtasks
   - For subtasks, provides a link to view the parent task

This command is particularly useful when you need to examine a specific task in detail before implementing it or when you want to check the status and details of a particular task.
</file>

<file path="src/app/(public)/sign-in/[[...sign-in]]/page.tsx">
import {SignIn} from '@clerk/nextjs'
export default function Page() {
  return (
    <div className='flex h-screen w-screen items-center justify-center'>
      <SignIn />
    </div>
  )
}
</file>

<file path="src/app/(public)/sign-up/[[...sign-up]]/page.tsx">
import {SignUp} from '@clerk/nextjs'
export default function Page() {
  return (
    <div className='flex h-screen w-screen items-center justify-center'>
      <SignUp />
    </div>
  )
}
</file>

<file path="src/app/api/ai/chat/route.ts">
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";
import { z } from "zod";
// Allow streaming responses up to 30 seconds
export const maxDuration = 30;
export async function POST(req: Request) {
	const { messages } = await req.json();
	const result = streamText({
		model: openai("gpt-4o"),
		messages,
		tools: {
			// QuickBooks Tools
			queryQuickbooksCustomers: {
				description: "Query customers from Quickbooks",
				parameters: z.object({
					limit: z
						.number()
						.optional()
						.describe("Maximum number of customers to return"),
					active: z.boolean().optional().describe("Filter by active status"),
					searchTerm: z
						.string()
						.optional()
						.describe("Search term to filter customers"),
				}),
				execute: async ({
					limit = 10,
					active,
					searchTerm,
				}: {
					limit?: number;
					active?: boolean;
					searchTerm?: string;
				}) => {
					// Implement actual QuickBooks API integration here
					// This is a placeholder implementation
					console.log("Querying QuickBooks customers:", {
						limit,
						active,
						searchTerm,
					});
					return {
						success: true,
						data: [
							{
								id: "1",
								name: "Acme Corp",
								email: "contact@acme.com",
								active: true,
							},
							{
								id: "2",
								name: "Globex Inc",
								email: "info@globex.com",
								active: true,
							},
						],
					};
				},
			},
			queryQuickbooksInvoices: {
				description: "Query invoices from Quickbooks",
				parameters: z.object({
					limit: z
						.number()
						.optional()
						.describe("Maximum number of invoices to return"),
					status: z
						.enum(["paid", "unpaid", "overdue", "all"])
						.optional()
						.describe("Filter by invoice status"),
					customerId: z.string().optional().describe("Filter by customer ID"),
				}),
				execute: async ({
					limit = 10,
					status,
					customerId,
				}: {
					limit?: number;
					status?: "paid" | "unpaid" | "overdue" | "all";
					customerId?: string;
				}) => {
					// Implement actual QuickBooks API integration here
					console.log("Querying QuickBooks invoices:", {
						limit,
						status,
						customerId,
					});
					return {
						success: true,
						data: [
							{
								id: "inv001",
								customerId: "1",
								amount: 1200.0,
								status: "paid",
								date: "2023-05-15",
							},
							{
								id: "inv002",
								customerId: "2",
								amount: 850.5,
								status: "unpaid",
								date: "2023-06-01",
							},
						],
					};
				},
			},
			queryQuickbooksItems: {
				description: "Query items/products from Quickbooks",
				parameters: z.object({
					limit: z
						.number()
						.optional()
						.describe("Maximum number of items to return"),
					active: z.boolean().optional().describe("Filter by active status"),
					searchTerm: z
						.string()
						.optional()
						.describe("Search term to filter items"),
				}),
				execute: async ({
					limit = 10,
					active,
					searchTerm,
				}: {
					limit?: number;
					active?: boolean;
					searchTerm?: string;
				}) => {
					// Implement actual QuickBooks API integration here
					console.log("Querying QuickBooks items:", {
						limit,
						active,
						searchTerm,
					});
					return {
						success: true,
						data: [
							{ id: "item001", name: "Product A", price: 99.99, active: true },
							{ id: "item002", name: "Service B", price: 149.99, active: true },
						],
					};
				},
			},
			// Sage Tools
			querySageProducts: {
				description: "Query products from Sage",
				parameters: z.object({
					categories: z
						.string()
						.optional()
						.describe("Product categories to filter by"),
					searchTerm: z
						.string()
						.optional()
						.describe("Search term to filter products"),
				}),
				execute: async ({
					categories,
					searchTerm,
				}: {
					categories?: string;
					searchTerm?: string;
				}) => {
					// Implement actual Sage API integration
					// This would use the format shown in sage-products.mdc
					console.log("Querying Sage products:", { categories, searchTerm });
					// Mock response data
					return {
						success: true,
						data: [
							{
								productId: 1578894,
								name: "LED Flashlight",
								category: "Flashlights",
								price: 24.99,
							},
							{
								productId: 1578895,
								name: "Tactical Flashlight",
								category: "Flashlights",
								price: 49.99,
							},
						],
					};
				},
			},
			querySageInventory: {
				description: "Query inventory from Sage",
				parameters: z.object({
					productId: z.number().describe("Product ID to check inventory for"),
				}),
				execute: async ({ productId }: { productId: number }) => {
					// Implement actual Sage API integration
					// This would use the format shown in sage-products.mdc
					console.log("Querying Sage inventory:", { productId });
					// Mock response data
					return {
						success: true,
						data: {
							productId: productId,
							quantityAvailable: 42,
							lastUpdated: new Date().toISOString(),
							warehouseLocation: "Main Warehouse",
						},
					};
				},
			},
		},
	});
	return result.toDataStreamResponse();
}
</file>

<file path="src/app/api/intuit/auth/route.ts">
import { NextResponse } from "next/server";
import { getAuthorizationUrl } from "@/services/intuit/auth";
export async function GET() {
	try {
		// Get the authorization URL
		const authUrl = await getAuthorizationUrl();
		// Redirect to QuickBooks authorization page
		return NextResponse.redirect(authUrl);
	} catch (error) {
		console.error("Error initiating QuickBooks authentication:", error);
		// Redirect to error page with message
		return NextResponse.redirect(
			new URL(
				"/auth/error?message=Failed+to+start+authentication",
				process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000",
			),
		);
	}
}
// import { type NextRequest, NextResponse } from "next/server";
// import { getAuthorizationUrl } from "@/lib/intuit/auth";
// export async function GET(request: NextRequest) {
// 	try {
// 		// Get the authorization URL
// 		const authUrl = getAuthorizationUrl();
// 		// Redirect to QuickBooks authorization page
// 		return NextResponse.redirect(authUrl);
// 	} catch (error) {
// 		console.error("Error initiating QuickBooks authentication:", error);
// 		// Redirect to error page or show error message
// 		return NextResponse.redirect(
// 			new URL(
// 				"/auth/error?message=Failed+to+start+authentication",
// 				request.url,
// 			),
// 		);
// 	}
// }
</file>

<file path="src/app/api/intuit/callback/route.ts">
import { type NextRequest, NextResponse } from "next/server";
import { oauthClient } from "@/services/intuit/client";
import { storeTokens } from "@/services/intuit/auth";
export async function GET(request: NextRequest) {
	try {
		console.log("🚀 ~ GET ~ request:", request);
		// Get the URL with query parameters from the request
		const url = new URL(request.url);
		// const parseRedirect = request.url;
		console.log("🚀 ~ GET ~ url:", url);
		const fullUrl = url.origin + url.pathname + url.search;
		console.log("🚀 ~ GET ~ fullUrl:", fullUrl);
		// Parse the authorization response from Intuit
		const tokens = await oauthClient
			.createToken(fullUrl)
			// @ts-ignore
			.then((authResponse) => JSON.stringify(authResponse.getToken()));
		// const tokens = response.getJson();
		// Store tokens in user metadata
		await storeTokens(tokens);
		// Redirect to the dashboard
		return NextResponse.redirect(new URL("/dashboard", request.url));
	} catch (error) {
		console.error("Error handling QuickBooks callback:", error);
		// Redirect to error page with message
		return NextResponse.redirect(
			new URL("/auth/error?message=Authentication+failed", request.url),
		);
	}
}
</file>

<file path="src/app/api/intuit/debug/route.ts">
import { NextResponse } from "next/server";
import { isAuthenticated, getTokens } from "@/services/intuit/auth";
export async function GET() {
	try {
		// Check authentication status
		const authenticated = await isAuthenticated();
		// Get tokens if authenticated
		const tokens = authenticated ? await getTokens() : null;
		// Environment variables (sanitized)
		const environmentInfo = {
			QB_ENVIRONMENT: process.env.QB_ENVIRONMENT || "not set",
			HAS_COMPANY_ID:
				!!process.env.QB_COMPANY_ID || !!process.env.INTUIT_SANDBOX_COMPANY_ID,
			COMPANY_ID_SOURCE: process.env.QB_COMPANY_ID
				? "QB_COMPANY_ID"
				: process.env.INTUIT_SANDBOX_COMPANY_ID
					? "INTUIT_SANDBOX_COMPANY_ID"
					: "none",
			BASE_URL: process.env.NEXT_PUBLIC_BASE_URL || "not set",
			NODE_ENV: process.env.NODE_ENV,
		};
		// Authentication info
		const authInfo = {
			authenticated,
			hasTokens: !!tokens,
			tokenExpiry: tokens?.createdAt
				? new Date(tokens.createdAt + tokens.expires_in * 1000).toISOString()
				: null,
			refreshTokenExpiry: tokens?.createdAt
				? new Date(
						tokens.createdAt + tokens.x_refresh_token_expires_in * 1000,
					).toISOString()
				: null,
			tokenCreatedAt: tokens?.createdAt
				? new Date(tokens.createdAt).toISOString()
				: null,
		};
		return NextResponse.json({
			environmentInfo,
			authInfo,
			timestamp: new Date().toISOString(),
		});
	} catch (error) {
		console.error("Debug endpoint error:", error);
		return NextResponse.json(
			{
				error: error instanceof Error ? error.message : "Unknown error",
				timestamp: new Date().toISOString(),
			},
			{ status: 500 },
		);
	}
}
</file>

<file path="src/app/api/intuit/logout/route.ts">
import { NextResponse } from "next/server";
import { revokeTokens } from "@/services/intuit/auth";
export async function POST() {
	try {
		// Revoke the QuickBooks tokens
		const success = await revokeTokens();
		if (!success) {
			return NextResponse.json(
				{ error: "Failed to revoke QuickBooks tokens" },
				{ status: 500 },
			);
		}
		// Redirect to home page or login page
		return NextResponse.redirect(
			new URL("/", process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000"),
		);
	} catch (error) {
		console.error("Error revoking QuickBooks tokens:", error);
		return NextResponse.json(
			{ error: "An error occurred while logging out" },
			{ status: 500 },
		);
	}
}
</file>

<file path="src/app/api/quickbooks/account/route.ts">
import { type NextRequest, NextResponse } from "next/server";
import { findAccounts, getAccount } from "@/services/intuit/api";
/**
 * GET handler for account data from QuickBooks
 */
export async function GET(request: NextRequest) {
	try {
		const searchParams = request.nextUrl.searchParams;
		const accountId = searchParams.get("id");
		// If account ID is provided, return specific account
		if (accountId) {
			const accountData = await getAccount(accountId);
			return NextResponse.json(accountData);
		}
		// Otherwise query accounts with optional filters
		const queryParams: Record<string, string | number | boolean> = {};
		// Add pagination params if provided
		const limit = searchParams.get("limit");
		if (limit) queryParams.limit = Number.parseInt(limit, 10);
		const offset = searchParams.get("offset");
		if (offset) queryParams.offset = Number.parseInt(offset, 10);
		// Add any other filter params
		const name = searchParams.get("name");
		if (name) queryParams.Name = name;
		const accountType = searchParams.get("accountType");
		if (accountType) queryParams.AccountType = accountType;
		const classification = searchParams.get("classification");
		if (classification) queryParams.Classification = classification;
		const active = searchParams.get("active");
		if (active) queryParams.Active = active === "true";
		const accounts = await findAccounts(queryParams);
		return NextResponse.json(accounts);
	} catch (error) {
		console.error("Error fetching account data:", error);
		return NextResponse.json(
			{ error: "Failed to fetch account data" },
			{ status: 500 },
		);
	}
}
</file>

<file path="src/app/api/quickbooks/company-info/route.ts">
import { getCompanyInfo } from "@/services/intuit/api";
import { refreshTokensIfNeeded } from "@/services/intuit/auth";
import { NextResponse } from "next/server";
export async function GET() {
	try {
		// Ensure tokens are refreshed if needed
		await refreshTokensIfNeeded();
		// Fetch company data from QuickBooks
		// biome-ignore lint/suspicious/noExplicitAny: <explanation>
		const response: any = await getCompanyInfo();
		// Extract company info from the query response
		const companyData = response.QueryResponse.CompanyInfo[0];
		return NextResponse.json({ companyData });
	} catch (error) {
		console.error("Error fetching company info:", error);
		return NextResponse.json(
			{ error: "Failed to fetch company information", details: error },
			{ status: 500 },
		);
	}
}
</file>

<file path="src/app/api/quickbooks/mock/company-info/route.ts">
import { NextRequest, NextResponse } from "next/server";
// Mock company info data
const mockCompanyInfo = {
  Id: "5000",
  SyncToken: "1",
  CompanyName: "Sample Company Inc.",
  LegalName: "Sample Company Incorporated",
  CompanyAddr: {
    Id: "1",
    Line1: "123 Business Ave",
    City: "San Francisco",
    CountrySubDivisionCode: "CA",
    PostalCode: "94107",
    Country: "USA"
  },
  CustomerCommunicationAddr: {
    Id: "2",
    Line1: "123 Business Ave",
    City: "San Francisco",
    CountrySubDivisionCode: "CA",
    PostalCode: "94107",
    Country: "USA"
  },
  LegalAddr: {
    Id: "3",
    Line1: "123 Business Ave",
    City: "San Francisco",
    CountrySubDivisionCode: "CA",
    PostalCode: "94107",
    Country: "USA"
  },
  PrimaryPhone: { FreeFormNumber: "(555) 555-5555" },
  CompanyEmail: { Address: "contact@samplecompany.com" },
  WebAddr: { URI: "https://www.samplecompany.com" },
  SupportedLanguages: "en",
  Country: "US",
  Email: { Address: "admin@samplecompany.com" },
  FiscalYearStartMonth: "January",
  CompanyStartDate: "2020-01-01",
  MetaData: {
    CreateTime: "2020-01-01T00:00:00-08:00",
    LastUpdatedTime: "2023-01-01T00:00:00-08:00"
  }
};
/**
 * GET handler for mock company info data
 */
export async function GET(request: NextRequest) {
  try {
    return NextResponse.json({
      QueryResponse: {
        CompanyInfo: [mockCompanyInfo],
        maxResults: 1
      }
    });
  } catch (error) {
    console.error("Error with mock company info data:", error);
    return NextResponse.json(
      { error: "Failed to fetch mock company info data" },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/quickbooks/mock/purchase/route.ts">
import { NextRequest, NextResponse } from "next/server";
// Mock purchase data
const mockPurchases = [
  {
    Id: "2001",
    PaymentType: "Check",
    AccountRef: { value: "60", name: "Professional Fees" },
    EntityRef: { value: "1001", name: "ABC Suppliers", type: "Vendor" },
    Line: [
      {
        Id: "1",
        DetailType: "AccountBasedExpenseLineDetail",
        Amount: 1250.00,
        Description: "Monthly service fee",
        AccountBasedExpenseLineDetail: {
          AccountRef: { value: "60", name: "Professional Fees" }
        }
      }
    ],
    TxnDate: "2023-02-15",
    DocNumber: "PUR-001"
  },
  {
    Id: "2002",
    PaymentType: "CreditCard",
    AccountRef: { value: "65", name: "Supplies" },
    EntityRef: { value: "1002", name: "XYZ Manufacturing", type: "Vendor" },
    Line: [
      {
        Id: "1",
        DetailType: "ItemBasedExpenseLineDetail",
        Amount: 750.50,
        Description: "Office equipment",
        ItemBasedExpenseLineDetail: {
          ItemRef: { value: "37", name: "Office Chair" },
          UnitPrice: 250.16,
          Qty: 3
        }
      }
    ],
    TxnDate: "2023-03-10",
    DocNumber: "PUR-002"
  },
  {
    Id: "2003",
    PaymentType: "Cash",
    AccountRef: { value: "68", name: "Utilities" },
    EntityRef: { value: "1003", name: "Global Parts Corp", type: "Vendor" },
    Line: [
      {
        Id: "1",
        DetailType: "AccountBasedExpenseLineDetail",
        Amount: 450.00,
        Description: "Utilities payment",
        AccountBasedExpenseLineDetail: {
          AccountRef: { value: "68", name: "Utilities" }
        }
      }
    ],
    TxnDate: "2023-04-05",
    DocNumber: "PUR-003"
  },
  {
    Id: "2004",
    PaymentType: "Check",
    AccountRef: { value: "70", name: "Software" },
    EntityRef: { value: "1004", name: "Tech Distributors", type: "Vendor" },
    Line: [
      {
        Id: "1",
        DetailType: "ItemBasedExpenseLineDetail",
        Amount: 1200.00,
        Description: "Software licenses",
        ItemBasedExpenseLineDetail: {
          ItemRef: { value: "42", name: "Software License" },
          UnitPrice: 300.00,
          Qty: 4
        }
      }
    ],
    TxnDate: "2023-05-20",
    DocNumber: "PUR-004"
  },
  {
    Id: "2005",
    PaymentType: "CreditCard",
    AccountRef: { value: "65", name: "Supplies" },
    EntityRef: { value: "1005", name: "Office Supply Co", type: "Vendor" },
    Line: [
      {
        Id: "1",
        DetailType: "ItemBasedExpenseLineDetail",
        Amount: 325.75,
        Description: "Office supplies",
        ItemBasedExpenseLineDetail: {
          ItemRef: { value: "45", name: "Paper" },
          UnitPrice: 5.25,
          Qty: 62
        }
      }
    ],
    TxnDate: "2023-06-12",
    DocNumber: "PUR-005"
  }
];
/**
 * GET handler for mock purchase data
 */
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const purchaseId = searchParams.get("id");
    // If purchase ID is provided, return specific purchase
    if (purchaseId) {
      const purchase = mockPurchases.find(p => p.Id === purchaseId);
      if (!purchase) {
        return NextResponse.json(
          { error: "Purchase not found" },
          { status: 404 }
        );
      }
      return NextResponse.json({ Purchase: purchase });
    }
    // Process limit and offset for pagination
    const limit = parseInt(searchParams.get("limit") || "10", 10);
    const offset = parseInt(searchParams.get("offset") || "0", 10);
    // Get paginated purchases
    const paginatedPurchases = mockPurchases.slice(offset, offset + limit);
    return NextResponse.json({
      QueryResponse: {
        Purchase: paginatedPurchases,
        maxResults: paginatedPurchases.length,
        totalCount: mockPurchases.length
      }
    });
  } catch (error) {
    console.error("Error with mock purchase data:", error);
    return NextResponse.json(
      { error: "Failed to fetch mock purchase data" },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/quickbooks/mock/purchase-order/route.ts">
import { NextRequest, NextResponse } from "next/server";
// Mock purchase order data
const mockPurchaseOrders = [
  {
    Id: "3001",
    APAccountRef: { value: "80", name: "Accounts Payable" },
    VendorRef: { value: "1001", name: "ABC Suppliers" },
    Line: [
      {
        Id: "1",
        DetailType: "ItemBasedExpenseLineDetail",
        Amount: 2500.00,
        Description: "Raw materials",
        ItemBasedExpenseLineDetail: {
          ItemRef: { value: "101", name: "Manufacturing Materials" },
          UnitPrice: 25.00,
          Qty: 100
        }
      }
    ],
    POStatus: "Open",
    TxnDate: "2023-01-15",
    DocNumber: "PO-001"
  },
  {
    Id: "3002",
    APAccountRef: { value: "80", name: "Accounts Payable" },
    VendorRef: { value: "1002", name: "XYZ Manufacturing" },
    Line: [
      {
        Id: "1",
        DetailType: "ItemBasedExpenseLineDetail",
        Amount: 1750.00,
        Description: "Machine parts",
        ItemBasedExpenseLineDetail: {
          ItemRef: { value: "102", name: "Machine Parts" },
          UnitPrice: 350.00,
          Qty: 5
        }
      }
    ],
    POStatus: "Closed",
    TxnDate: "2023-02-20",
    DocNumber: "PO-002"
  },
  {
    Id: "3003",
    APAccountRef: { value: "80", name: "Accounts Payable" },
    VendorRef: { value: "1003", name: "Global Parts Corp" },
    Line: [
      {
        Id: "1",
        DetailType: "ItemBasedExpenseLineDetail",
        Amount: 3200.00,
        Description: "Electronic components",
        ItemBasedExpenseLineDetail: {
          ItemRef: { value: "103", name: "Electronics" },
          UnitPrice: 16.00,
          Qty: 200
        }
      }
    ],
    POStatus: "Open",
    TxnDate: "2023-03-25",
    DocNumber: "PO-003"
  },
  {
    Id: "3004",
    APAccountRef: { value: "80", name: "Accounts Payable" },
    VendorRef: { value: "1004", name: "Tech Distributors" },
    Line: [
      {
        Id: "1",
        DetailType: "ItemBasedExpenseLineDetail",
        Amount: 5000.00,
        Description: "Computer equipment",
        ItemBasedExpenseLineDetail: {
          ItemRef: { value: "104", name: "Computers" },
          UnitPrice: 1000.00,
          Qty: 5
        }
      }
    ],
    POStatus: "Closed",
    TxnDate: "2023-04-10",
    DocNumber: "PO-004"
  },
  {
    Id: "3005",
    APAccountRef: { value: "80", name: "Accounts Payable" },
    VendorRef: { value: "1005", name: "Office Supply Co" },
    Line: [
      {
        Id: "1",
        DetailType: "ItemBasedExpenseLineDetail",
        Amount: 850.00,
        Description: "Office furniture",
        ItemBasedExpenseLineDetail: {
          ItemRef: { value: "105", name: "Furniture" },
          UnitPrice: 425.00,
          Qty: 2
        }
      }
    ],
    POStatus: "Open",
    TxnDate: "2023-05-15",
    DocNumber: "PO-005"
  }
];
/**
 * GET handler for mock purchase order data
 */
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const purchaseOrderId = searchParams.get("id");
    // If purchase order ID is provided, return specific purchase order
    if (purchaseOrderId) {
      const purchaseOrder = mockPurchaseOrders.find(po => po.Id === purchaseOrderId);
      if (!purchaseOrder) {
        return NextResponse.json(
          { error: "Purchase order not found" },
          { status: 404 }
        );
      }
      return NextResponse.json({ PurchaseOrder: purchaseOrder });
    }
    // Process limit and offset for pagination
    const limit = parseInt(searchParams.get("limit") || "10", 10);
    const offset = parseInt(searchParams.get("offset") || "0", 10);
    // Get paginated purchase orders
    const paginatedPOs = mockPurchaseOrders.slice(offset, offset + limit);
    return NextResponse.json({
      QueryResponse: {
        PurchaseOrder: paginatedPOs,
        maxResults: paginatedPOs.length,
        totalCount: mockPurchaseOrders.length
      }
    });
  } catch (error) {
    console.error("Error with mock purchase order data:", error);
    return NextResponse.json(
      { error: "Failed to fetch mock purchase order data" },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/quickbooks/mock/vendor/route.ts">
import { NextRequest, NextResponse } from "next/server";
// Mock vendor data
const mockVendors = [
  {
    Id: "1001",
    DisplayName: "ABC Suppliers",
    CompanyName: "ABC Suppliers, Inc.",
    Active: true,
    PrimaryEmailAddr: { Address: "contact@abcsuppliers.com" },
    Balance: 2500.00
  },
  {
    Id: "1002",
    DisplayName: "XYZ Manufacturing",
    CompanyName: "XYZ Manufacturing Co.",
    Active: true,
    PrimaryEmailAddr: { Address: "info@xyzmanufacturing.com" },
    Balance: 4750.50
  },
  {
    Id: "1003",
    DisplayName: "Global Parts Corp",
    CompanyName: "Global Parts Corporation",
    Active: true,
    PrimaryEmailAddr: { Address: "orders@globalparts.com" },
    Balance: 3200.75
  },
  {
    Id: "1004",
    DisplayName: "Tech Distributors",
    CompanyName: "Tech Distributors LLC",
    Active: false,
    PrimaryEmailAddr: { Address: "sales@techdist.com" },
    Balance: 0.00
  },
  {
    Id: "1005",
    DisplayName: "Office Supply Co",
    CompanyName: "Office Supply Company",
    Active: true,
    PrimaryEmailAddr: { Address: "support@officesupply.com" },
    Balance: 850.25
  }
];
/**
 * GET handler for mock vendor data
 */
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const vendorId = searchParams.get("id");
    // If vendor ID is provided, return specific vendor
    if (vendorId) {
      const vendor = mockVendors.find(v => v.Id === vendorId);
      if (!vendor) {
        return NextResponse.json(
          { error: "Vendor not found" },
          { status: 404 }
        );
      }
      return NextResponse.json({ Vendor: vendor });
    }
    // Process limit and offset for pagination
    const limit = parseInt(searchParams.get("limit") || "10", 10);
    const offset = parseInt(searchParams.get("offset") || "0", 10);
    // Get paginated vendors
    const paginatedVendors = mockVendors.slice(offset, offset + limit);
    return NextResponse.json({
      QueryResponse: {
        Vendor: paginatedVendors,
        maxResults: paginatedVendors.length,
        totalCount: mockVendors.length
      }
    });
  } catch (error) {
    console.error("Error with mock vendor data:", error);
    return NextResponse.json(
      { error: "Failed to fetch mock vendor data" },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/api/quickbooks/purchase/route.ts">
import { type NextRequest, NextResponse } from "next/server";
import { findPurchases, getPurchase } from "@/services/intuit/api";
/**
 * GET handler for purchase data from QuickBooks
 */
export async function GET(request: NextRequest) {
	try {
		const searchParams = request.nextUrl.searchParams;
		const purchaseId = searchParams.get("id");
		// If purchase ID is provided, return specific purchase
		if (purchaseId) {
			const purchaseData = await getPurchase(purchaseId);
			return NextResponse.json(purchaseData);
		}
		// Otherwise query purchases with optional filters
		const queryParams: Record<string, string | number> = {};
		// Add pagination params if provided
		const limit = searchParams.get("limit");
		// biome-ignore lint/style/useNumberNamespace: <explanation>
		if (limit) queryParams.limit = parseInt(limit, 10);
		const offset = searchParams.get("offset");
		// biome-ignore lint/style/useNumberNamespace: <explanation>
		if (offset) queryParams.offset = parseInt(offset, 10);
		// Add any other filter params
		const accountRefValue = searchParams.get("accountRefValue");
		if (accountRefValue) queryParams.AccountRef = accountRefValue;
		const entityRefValue = searchParams.get("entityRefValue");
		if (entityRefValue) queryParams.EntityRef = entityRefValue;
		const txnDate = searchParams.get("txnDate");
		if (txnDate) queryParams.TxnDate = txnDate;
		const docNumber = searchParams.get("docNumber");
		if (docNumber) queryParams.DocNumber = docNumber;
		const purchases = await findPurchases(queryParams);
		return NextResponse.json(purchases);
	} catch (error) {
		console.error("Error fetching purchase data:", error);
		return NextResponse.json(
			{ error: "Failed to fetch purchase data" },
			{ status: 500 },
		);
	}
}
</file>

<file path="src/app/api/quickbooks/purchase-order/route.ts">
import { type NextRequest, NextResponse } from "next/server";
import { findPurchaseOrders, getPurchaseOrder } from "@/services/intuit/api";
/**
 * GET handler for purchase order data from QuickBooks
 */
export async function GET(request: NextRequest) {
	try {
		const searchParams = request.nextUrl.searchParams;
		const purchaseOrderId = searchParams.get("id");
		// If purchase order ID is provided, return specific purchase order
		if (purchaseOrderId) {
			const purchaseOrderData = await getPurchaseOrder(purchaseOrderId);
			return NextResponse.json(purchaseOrderData);
		}
		// Otherwise query purchase orders with optional filters
		const queryParams: Record<string, string | number> = {};
		// Add pagination params if provided
		const limit = searchParams.get("limit");
		if (limit) queryParams.limit = Number.parseInt(limit, 10);
		const offset = searchParams.get("offset");
		if (offset) queryParams.offset = Number.parseInt(offset, 10);
		// Add any other filter params
		const vendorRefValue = searchParams.get("vendorRefValue");
		if (vendorRefValue) queryParams.VendorRef = vendorRefValue;
		const status = searchParams.get("status");
		if (status) queryParams.POStatus = status;
		const txnDate = searchParams.get("txnDate");
		if (txnDate) queryParams.TxnDate = txnDate;
		const docNumber = searchParams.get("docNumber");
		if (docNumber) queryParams.DocNumber = docNumber;
		const purchaseOrders = await findPurchaseOrders(queryParams);
		return NextResponse.json(purchaseOrders);
	} catch (error) {
		console.error("Error fetching purchase order data:", error);
		return NextResponse.json(
			{ error: "Failed to fetch purchase order data" },
			{ status: 500 },
		);
	}
}
</file>

<file path="src/app/api/quickbooks/vendor/route.ts">
// @ts-nocheck
import { type NextRequest, NextResponse } from "next/server";
import { findVendors, getVendor } from "@/services/intuit/api";
/**
 * GET handler for vendor data from QuickBooks
 */
export async function GET(request: NextRequest) {
	try {
		const searchParams = request.nextUrl.searchParams;
		const vendorId = searchParams.get("id");
		// If vendor ID is provided, return specific vendor
		if (vendorId) {
			const vendorData = await getVendor(vendorId);
			return NextResponse.json(vendorData);
		}
		// Otherwise query vendors with optional filters
		const queryParams: Record<string, string | number> = {};
		// Add pagination params if provided
		const limit = searchParams.get("limit");
		// biome-ignore lint/style/useNumberNamespace: <explanation>
		if (limit) queryParams.limit = parseInt(limit, 10);
		const offset = searchParams.get("offset");
		if (offset) queryParams.offset = Number.parseInt(offset, 10);
		// Add any other filter params
		const displayName = searchParams.get("displayName");
		if (displayName) queryParams.DisplayName = displayName;
		const companyName = searchParams.get("companyName");
		if (companyName) queryParams.CompanyName = companyName;
		const active = searchParams.get("active");
		if (active) queryParams.Active = active === "true";
		const vendors = await findVendors(queryParams);
		return NextResponse.json(vendors);
	} catch (error) {
		console.error("Error fetching vendor data:", error);
		return NextResponse.json(
			{ error: "Failed to fetch vendor data" },
			{ status: 500 },
		);
	}
}
</file>

<file path="src/app/api/quickbooks/webhooks/route.ts">
import { type NextRequest, NextResponse } from "next/server";
import { createQuickBooksClient } from "@/services/quickbooks/client";
import { refreshTokensIfNeeded } from "@/services/intuit/auth";
/**
 * Handles QuickBooks webhook notifications
 *
 * QuickBooks sends webhook notifications for various events like:
 * - Data changes (CRUD operations)
 * - Authorization events
 * - System notifications
 *
 * @see https://developer.intuit.com/app/developer/qbo/docs/develop/webhooks
 */
export async function POST(req: NextRequest) {
	try {
		// Verify the webhook signature (in production, you should validate the signature)
		// const signature = req.headers.get("intuit-signature");
		// if (!validateSignature(signature, await req.text())) {
		//   return NextResponse.json({ error: "Invalid signature" }, { status: 401 });
		// }
		const payload = await req.json();
		console.log(
			"QuickBooks webhook received:",
			JSON.stringify(payload, null, 2),
		);
		// Extract event information
		const { eventNotifications } = payload;
		if (!eventNotifications || !Array.isArray(eventNotifications)) {
			return NextResponse.json(
				{ error: "Invalid webhook format" },
				{ status: 400 },
			);
		}
		// Process each notification
		for (const notification of eventNotifications) {
			const { realmId, dataChangeEvent } = notification;
			if (!realmId) {
				console.error("Missing realmId in notification");
				continue;
			}
			// Get fresh tokens for API requests
			const tokens = await refreshTokensIfNeeded();
			if (!tokens) {
				console.error("Failed to get valid tokens for realmId:", realmId);
				continue;
			}
			// Create QuickBooks client
			const qbClient = createQuickBooksClient(
				tokens.access_token,
				realmId,
				tokens.refresh_token,
			);
			// Handle different event types
			if (dataChangeEvent) {
				await handleDataChangeEvent(dataChangeEvent, qbClient);
			}
			// Handle other event types as needed
			// if (notification.someOtherEventType) { ... }
		}
		// Acknowledge receipt of webhook
		return NextResponse.json({ status: "success" }, { status: 200 });
	} catch (error) {
		console.error("Error processing QuickBooks webhook:", error);
		return NextResponse.json(
			{ error: "Internal server error" },
			{ status: 500 },
		);
	}
}
/**
 * Handles data change events from QuickBooks
 */
async function handleDataChangeEvent(dataChangeEvent: any, qbClient: any) {
	const { entities } = dataChangeEvent;
	if (!entities || !Array.isArray(entities)) {
		console.log("No entities in data change event");
		return;
	}
	for (const entity of entities) {
		const { name, id, operation } = entity;
		console.log(`Entity ${name} (ID: ${id}) had operation: ${operation}`);
		// Handle specific entity types and operations
		// Example: Fetch updated customer data
		if (
			name === "Customer" &&
			(operation === "Create" || operation === "Update")
		) {
			try {
				qbClient.getCustomer(id, (err: any, customer: any) => {
					if (err) {
						console.error(`Error fetching customer ${id}:`, err);
						return;
					}
					console.log(`Customer data:`, customer);
					// Process customer data (e.g., sync to your database)
				});
			} catch (error) {
				console.error(`Error processing ${name} entity:`, error);
			}
		}
		// Add handlers for other entity types as needed
	}
}
</file>

<file path="src/app/dashboard/[entity]/entity-table.tsx">
'use client'
import {useEffect, useState} from 'react'
import {
  Table,
  TableHeader,
  TableBody,
  TableHead,
  TableRow,
  TableCell,
} from '@/components/ui/table'
import {entityApiMap} from './page'
// Define a generic entity object type
type EntityObject = Record<string, unknown>
// Define possible response structures
type QuickBooksResponse = {
  QueryResponse?: Record<string, EntityObject[]>
  [key: string]: unknown
}
interface EntityTableProps {
  entity: string
  initialData: QuickBooksResponse
}
export default function EntityTable({entity, initialData}: EntityTableProps) {
  const [data, setData] = useState<EntityObject[]>([])
  const [columns, setColumns] = useState<string[]>([])
  const [error, setError] = useState<string | null>(null)
  useEffect(() => {
    try {
      // Extract the data from the response based on entity type
      let entityData: EntityObject[] = []
      // Process the initialData based on its structure
      if (initialData.QueryResponse) {
        // Find the entity data in the QueryResponse object
        const entityKey = Object.keys(initialData.QueryResponse).find(
          (key) =>
            key.toLowerCase() === entity.slice(0, -1) ||
            (entity === 'purchase-orders' && key === 'PurchaseOrder') ||
            (entity === 'items' && key === 'Item') ||
            (entity === 'products' && key === 'Item')
        )
        if (entityKey) {
          entityData = initialData.QueryResponse[entityKey]
        }
      } else if (Array.isArray(initialData)) {
        entityData = initialData as unknown as EntityObject[]
      } else if (initialData[entity.slice(0, -1)]) {
        entityData = [initialData[entity.slice(0, -1)] as EntityObject]
      }
      // If we found data, determine the columns
      if (entityData.length > 0) {
        // Get all unique keys from all objects
        const allKeys = entityData.reduce(
          (keys: Set<string>, item: EntityObject) => {
            for (const key of Object.keys(item)) {
              // Filter out complex objects and arrays for table display
              if (
                item[key] !== null &&
                typeof item[key] !== 'object' &&
                !Array.isArray(item[key])
              ) {
                keys.add(key)
              }
            }
            return keys
          },
          new Set<string>()
        )
        // Convert the keys Set to an array and prioritize common fields
        const priorityKeys = [
          'Id',
          'Name',
          'DisplayName',
          'DocNumber',
          'Active',
          'Balance',
        ]
        const otherKeys = Array.from(allKeys).filter(
          (key) => !priorityKeys.includes(key)
        )
        setColumns([
          ...priorityKeys.filter((key) => allKeys.has(key)),
          ...otherKeys,
        ])
      }
      setData(entityData || [])
    } catch (err) {
      console.error(`Error processing ${entity} data:`, err)
      setError(
        err instanceof Error ? err.message : 'An error occurred processing data'
      )
    }
  }, [entity, initialData])
  if (error) {
    return (
      <div className='p-4 bg-red-50 border border-red-200 rounded-md text-red-700'>
        <h2 className='text-lg font-semibold'>Error</h2>
        <p>{error}</p>
      </div>
    )
  }
  if (!data || data.length === 0) {
    return (
      <div className='p-4 bg-yellow-50 border border-yellow-200 rounded-md text-yellow-700'>
        <h2 className='text-lg font-semibold'>No Data Found</h2>
        <p>No {entity} data available.</p>
      </div>
    )
  }
  return (
    <div className='overflow-x-auto rounded-lg border border-gray-200'>
      <Table>
        <TableHeader>
          <TableRow>
            {columns.map((column) => (
              <TableHead key={column}>{column}</TableHead>
            ))}
          </TableRow>
        </TableHeader>
        <TableBody>
          {data.map((item, index) => (
            <TableRow key={item.Id?.toString() || index}>
              {columns.map((column) => (
                <TableCell key={`${item.Id || index}-${column}`}>
                  {item[column]?.toString() || '—'}
                </TableCell>
              ))}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  )
}
</file>

<file path="src/app/dashboard/[entity]/page.tsx">
import {Suspense} from 'react'
import {notFound} from 'next/navigation'
import EntityTable from './entity-table'
// Define a type for the supported entity types
type EntityType =
  | 'accounts'
  | 'customers'
  | 'vendors'
  | 'invoices'
  | 'items'
  | 'products'
  | 'purchases'
  | 'purchase-orders'
// Map entity types to their API endpoints
export const entityApiMap: Record<EntityType, string> = {
  accounts: '/api/quickbooks/account',
  customers: '/api/quickbooks/customer',
  vendors: '/api/quickbooks/vendor',
  invoices: '/api/quickbooks/invoice',
  items: '/api/quickbooks/item',
  products: '/api/quickbooks/product',
  purchases: '/api/quickbooks/purchase',
  'purchase-orders': '/api/quickbooks/purchase-order',
}
// Server Component to handle data fetching
async function fetchEntityData(entity: string) {
  if (!entity || !entityApiMap[entity as EntityType]) {
    return notFound()
  }
  const response = await fetch(entityApiMap[entity as EntityType], {
    // This ensures the data is fresh on each request
    cache: 'no-store',
  })
  if (!response.ok) {
    throw new Error(`Failed to fetch ${entity} data: ${response.statusText}`)
  }
  return response.json()
}
export default async function EntityPage({params}: {params: {entity: string}}) {
  const {entity} = params
  // Check if entity is valid
  if (!entityApiMap[entity as EntityType]) {
    return notFound()
  }
  const data = await fetchEntityData(entity)
  return (
    <div className='container mx-auto py-8'>
      <h1 className='text-2xl font-bold mb-6 capitalize'>{entity}</h1>
      <Suspense
        fallback={
          <div className='flex justify-center items-center min-h-[400px]'>
            <div className='animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary' />
          </div>
        }
      >
        <EntityTable entity={entity as EntityType} initialData={data} />
      </Suspense>
    </div>
  )
}
</file>

<file path="src/app/dashboard/layout.tsx">
import type React from 'react'
import {AiCHAT} from '@/components/ai-chat'
import {SidebarContextProvider} from '@/providers/sidebar-provider'
import {SidebarTrigger} from '@/components/ui/sidebar'
import {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbPage,
} from '@/components/ui/breadcrumb'
import {Separator} from '@radix-ui/react-dropdown-menu'
import {getCompanyInfo, isAuthenticated} from '@/services/quickbooks/client'
import type {CompanyInfoResponse} from '@/services/quickbooks/client'
import {Button} from '@/components/ui/button'
import {Drawer, DrawerTrigger} from '@/components/ui/drawer'
import {Plus} from 'lucide-react'
export default async function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const authenticated = await isAuthenticated()
  const companyData: CompanyInfoResponse = authenticated
    ? await getCompanyInfo()
    : null
  return (
    <SidebarContextProvider>
      <Drawer>
        <div className='flex flex-col relative pt-16'>
          <header className='sticky top-0 flex h-14 shrink-0 items-center gap-2 bg-background'>
            <div className='flex flex-1 items-center gap-2 px-3'>
              <SidebarTrigger />
              <Separator orientation='vertical' className='mr-2 h-4' />
              <Breadcrumb>
                <BreadcrumbList>
                  <BreadcrumbItem>
                    <BreadcrumbPage className='line-clamp-1'>
                      <strong>Legal Name:</strong>{' '}
                      {companyData?.LegalName || companyData?.CompanyName}
                    </BreadcrumbPage>
                  </BreadcrumbItem>
                </BreadcrumbList>
              </Breadcrumb>
              <div className='ml-auto'>
                <DrawerTrigger asChild>
                  <Button variant='outline'>
                    <Plus className='size-4' />
                  </Button>
                </DrawerTrigger>
              </div>
            </div>
          </header>
          {children}
          <AiCHAT />
        </div>
      </Drawer>
    </SidebarContextProvider>
  )
}
</file>

<file path="src/app/dashboard/page.tsx">
import {getCompanyInfo} from '@/services/intuit/api'
import {Card} from '@/components/ui/card'
import {refreshTokensIfNeeded, isAuthenticated} from '@/services/intuit/auth'
import {Alert, AlertDescription, AlertTitle} from '@/components/ui/alert'
import {Button} from '@/components/ui/button'
import Link from 'next/link'
import {SidebarLeft} from '@/components/sidebar-left'
import {SidebarRight} from '@/components/sidebar-right'
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbList,
  BreadcrumbPage,
} from '@/components/ui/breadcrumb'
import {Separator} from '@/components/ui/separator'
import {
  SidebarInset,
  SidebarProvider,
  SidebarTrigger,
} from '@/components/ui/sidebar'
import {DashboardContent} from '@/components/ui/kokonutui'
import type {CompanyInfoResponse} from '@/services/intuit/types'
// Simple dashboard card component
export default async function DashboardPage() {
  // Check if authenticated with QuickBooks
  const authenticated = await isAuthenticated()
  console.log('🚀 ~ DashboardPage ~ authenticated:', authenticated)
  // Redirect to QuickBooks connection page if not authenticated
  // if (!authenticated) {
  //   await refreshTokensIfNeeded()
  //   // redirect('/quickbooks')
  // }
  // try {
  // Ensure we have valid tokens before loading company data
  // await refreshTokensIfNeeded()
  // Load company data directly from the API
  const companyData: any = authenticated ? await getCompanyInfo() : null
  console.log('🚀 ~ DashboardPage ~ companyData:', companyData)
  return (
    <div className='flex flex-col'>
      <div className='flex flex-1 flex-col gap-4 p-4'>
        <DashboardContent />
      </div>
    </div>
  )
}
/*
catch (error) {
    console.error('Dashboard error:', error)
    return (
      <div className='container mx-auto p-6'>
        <Alert variant='destructive' className='mb-6'>
          <AlertTitle>Error loading QuickBooks data</AlertTitle>
          <AlertDescription>
            {error instanceof Error
              ? error.message
              : 'An unknown error occurred'}
          </AlertDescription>
        </Alert>
        <div className='flex gap-4 mt-6'>
          <Link href='/quickbooks'>
            <Button variant='default'>Reconnect QuickBooks</Button>
          </Link>
          <Link href='/'>
            <Button variant='outline'>Go Home</Button>
          </Link>
        </div>
      </div>
    )
  }
*/
</file>

<file path="src/app/sage/page.tsx">
import {BentoGrid} from '@/components/ui/kokonutui/bento-grid'
export default function SagePage() {
  return (
    <div className='container mx-auto py-10'>
      <BentoGrid
        items={[
          {
            title: 'Sage',
            description: 'Sage',
            icon: <div>Icon</div>,
          },
        ]}
      />
    </div>
  )
}
</file>

<file path="src/app/global.css">
@import "tailwindcss";
@custom-variant dark (&:is(.dark *));
@theme {
	--background: 0 0% 100%;
	--foreground: 222.2 84% 4.9%;
	--card: 0 0% 100%;
	--card-foreground: 222.2 84% 4.9%;
	--popover: 0 0% 100%;
	--popover-foreground: 222.2 84% 4.9%;
	--primary: 222.2 47.4% 11.2%;
	--primary-foreground: 210 40% 98%;
	--secondary: 210 40% 96.1%;
	--secondary-foreground: 222.2 47.4% 11.2%;
	--muted: 210 40% 96.1%;
	--muted-foreground: 215.4 16.3% 46.9%;
	--accent: 210 40% 96.1%;
	--accent-foreground: 222.2 47.4% 11.2%;
	--destructive: 0 84.2% 60.2%;
	--destructive-foreground: 210 40% 98%;
	--border: 214.3 31.8% 91.4%;
	--input: 214.3 31.8% 91.4%;
	--ring: 222.2 84% 4.9%;
	--radius: 0.5rem;
	--chart-1: 12 76% 61%;
	--chart-2: 173 58% 39%;
	--chart-3: 197 37% 24%;
	--chart-4: 43 74% 66%;
	--chart-5: 27 87% 67%;
	--sidebar-background: 0 0% 98%;
	--sidebar-foreground: 240 5.3% 26.1%;
	--sidebar-primary: 240 5.9% 10%;
	--sidebar-primary-foreground: 0 0% 98%;
	--sidebar-accent: 240 4.8% 95.9%;
	--sidebar-accent-foreground: 240 5.9% 10%;
	--sidebar-border: 220 13% 91%;
	--sidebar-ring: 217.2 91.2% 59.8%;
}
@theme dark {
	--background: 0 0% 0%;
	--foreground: 0 0% 100%;
	--card: 0 0% 3%;
	--card-foreground: 0 0% 100%;
	--popover: 0 0% 3%;
	--popover-foreground: 0 0% 100%;
	--primary: 0 0% 100%;
	--primary-foreground: 0 0% 0%;
	--secondary: 0 0% 10%;
	--secondary-foreground: 0 0% 100%;
	--muted: 0 0% 10%;
	--muted-foreground: 0 0% 70%;
	--accent: 0 0% 15%;
	--accent-foreground: 0 0% 100%;
	--destructive: 0 100% 30%;
	--destructive-foreground: 0 0% 100%;
	--border: 0 0% 20%;
	--input: 0 0% 20%;
	--ring: 0 0% 80%;
	--chart-1: 220 70% 50%;
	--chart-2: 160 60% 45%;
	--chart-3: 30 80% 55%;
	--chart-4: 280 65% 60%;
	--chart-5: 340 75% 55%;
	--sidebar-background: 240 5.9% 10%;
	--sidebar-foreground: 240 4.8% 95.9%;
	--sidebar-primary: 224.3 76.3% 48%;
	--sidebar-primary-foreground: 0 0% 100%;
	--sidebar-accent: 240 3.7% 15.9%;
	--sidebar-accent-foreground: 240 4.8% 95.9%;
	--sidebar-border: 240 3.7% 15.9%;
	--sidebar-ring: 217.2 91.2% 59.8%;
}
:root {
	--background: 0 0% 100%;
	--foreground: 222.2 84% 4.9%;
	--card: 0 0% 100%;
	--card-foreground: 222.2 84% 4.9%;
	--popover: 0 0% 100%;
	--popover-foreground: 222.2 84% 4.9%;
	--primary: 222.2 47.4% 11.2%;
	--primary-foreground: 210 40% 98%;
	--secondary: 210 40% 96.1%;
	--secondary-foreground: 222.2 47.4% 11.2%;
	--muted: 210 40% 96.1%;
	--muted-foreground: 215.4 16.3% 46.9%;
	--accent: 210 40% 96.1%;
	--accent-foreground: 222.2 47.4% 11.2%;
	--destructive: 0 84.2% 60.2%;
	--destructive-foreground: 210 40% 98%;
	--border: 214.3 31.8% 91.4%;
	--input: 214.3 31.8% 91.4%;
	--ring: 222.2 84% 4.9%;
	--radius: 0.5rem;
	--chart-1: 12 76% 61%;
	--chart-2: 173 58% 39%;
	--chart-3: 197 37% 24%;
	--chart-4: 43 74% 66%;
	--chart-5: 27 87% 67%;
	--sidebar-background: 0 0% 98%;
	--sidebar-foreground: 240 5.3% 26.1%;
	--sidebar-primary: 240 5.9% 10%;
	--sidebar-primary-foreground: 0 0% 98%;
	--sidebar-accent: 240 4.8% 95.9%;
	--sidebar-accent-foreground: 240 5.9% 10%;
	--sidebar-border: 220 13% 91%;
	--sidebar-ring: 217.2 91.2% 59.8%;
	.dark {
		--background: 0 0% 0%;
		--foreground: 0 0% 100%;
		--card: 0 0% 3%;
		--card-foreground: 0 0% 100%;
		--popover: 0 0% 3%;
		--popover-foreground: 0 0% 100%;
		--primary: 0 0% 100%;
		--primary-foreground: 0 0% 0%;
		--secondary: 0 0% 10%;
		--secondary-foreground: 0 0% 100%;
		--muted: 0 0% 10%;
		--muted-foreground: 0 0% 70%;
		--accent: 0 0% 15%;
		--accent-foreground: 0 0% 100%;
		--destructive: 0 100% 30%;
		--destructive-foreground: 0 0% 100%;
		--border: 0 0% 20%;
		--input: 0 0% 20%;
		--ring: 0 0% 80%;
		--chart-1: 220 70% 50%;
		--chart-2: 160 60% 45%;
		--chart-3: 30 80% 55%;
		--chart-4: 280 65% 60%;
		--chart-5: 340 75% 55%;
		--sidebar-background: 240 5.9% 10%;
		--sidebar-foreground: 240 4.8% 95.9%;
		--sidebar-primary: 224.3 76.3% 48%;
		--sidebar-primary-foreground: 0 0% 100%;
		--sidebar-accent: 240 3.7% 15.9%;
		--sidebar-accent-foreground: 240 4.8% 95.9%;
		--sidebar-border: 240 3.7% 15.9%;
		--sidebar-ring: 217.2 91.2% 59.8%;
	}
	--sidebar: hsl(0 0% 98%);
}
body {
	background-color: var(--background);
	color: var(--foreground);
	font-family: "GeistMono", sans-serif;
}
.dark {
	--sidebar: hsl(240 5.9% 10%);
	--sidebar-foreground: hsl(240 4.8% 95.9%);
	--sidebar-primary: hsl(224.3 76.3% 48%);
	--sidebar-primary-foreground: hsl(0 0% 100%);
	--sidebar-accent: hsl(240 3.7% 15.9%);
	--sidebar-accent-foreground: hsl(240 4.8% 95.9%);
	--sidebar-border: hsl(240 3.7% 15.9%);
	--sidebar-ring: hsl(217.2 91.2% 59.8%);
}
@theme inline {
	--color-sidebar: var(--sidebar);
	--color-sidebar-foreground: var(--sidebar-foreground);
	--color-sidebar-primary: var(--sidebar-primary);
	--color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
	--color-sidebar-accent: var(--sidebar-accent);
	--color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
	--color-sidebar-border: var(--sidebar-border);
	--color-sidebar-ring: var(--sidebar-ring);
}
@layer base {
	* {
		@apply border-[--border] outline-[--ring]/50;
	}
	body {
		@apply bg-[--background] text-[--foreground];
	}
}
</file>

<file path="src/app/layout.tsx">
import './global.css'
import {ClerkProvider, SignUpButton, SignedIn, UserButton} from '@clerk/nextjs'
import {SignInButton} from '@clerk/nextjs'
import {dark} from '@clerk/themes'
import {GeistMono} from 'geist/font/mono'
import {GeistSans} from 'geist/font/sans'
import type {Metadata} from 'next'
import {ThemeProvider} from 'next-themes'
import {cn} from '@/lib/utils'
import {Navbar} from '@/components/ui/navbar-menu'
import {FullNav} from '@/components/nav/full-nav'
import {NuqsAdapter} from 'nuqs/adapters/next/app'
export const metadata: Metadata = {
  title: 'Create v1',
  description: 'Production ready Next.js app',
}
export const viewport = {
  themeColor: [
    {media: '(prefers-color-scheme: light)'},
    {media: '(prefers-color-scheme: dark)'},
  ],
}
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <ClerkProvider appearance={{baseTheme: dark, signIn: {baseTheme: dark}}}>
      <html lang='en' suppressHydrationWarning>
        <body
          className={cn(
            `${GeistSans.variable} ${GeistMono.variable} dark`,
            'antialiased'
          )}
        >
          <NuqsAdapter>
            <ThemeProvider
              attribute={['class', 'data-theme']}
              defaultTheme='dark'
              enableSystem
              disableTransitionOnChange
              enableColorScheme
              style={{colorScheme: 'dark'}}
            >
              <FullNav />
              {children}
            </ThemeProvider>
          </NuqsAdapter>
        </body>
      </html>
    </ClerkProvider>
  )
}
</file>

<file path="src/app/page.tsx">
import {SignedIn} from '@clerk/nextjs'
// import {AdminDashboard} from '@/components/admin-dashboard'
// import {ConnectToQuickbooks} from '@/components/connect-to-quickbooks'
// import {RedirectStatusCode} from 'next/dist/client/components/redirect-status-code'
import {RedirectToQuickbooks} from '@/components/RedirectToQuickbooks'
import HeroGeometric from '@/components/ui/kokonutui/hero-geometric'
export default function Home() {
  return <HeroGeometric />
}
</file>

<file path="src/app/search-params.tsx">
import {parseAsFloat, createLoader} from 'nuqs/server'
// Describe your search params, and reuse this in useQueryStates / createSerializer:
export const coordinatesSearchParams = {
  latitude: parseAsFloat.withDefault(0),
  longitude: parseAsFloat.withDefault(0),
}
export const loadSearchParams = createLoader(coordinatesSearchParams)
</file>

<file path="src/components/ai-chat/index.tsx">
import VercelV0Chat from '@/components/ui/kokonutui/vercel-v0-chat'
import {Button} from '@/components/ui/button'
import {DrawerContent} from '@/components/ui/drawer'
import {Plus} from 'lucide-react'
export const AiCHAT = () => {
  return (
    <div className='absolute bottom-0 left-0 w-full'>
      <DrawerContent>
        <VercelV0Chat />
      </DrawerContent>
    </div>
  )
}
</file>

<file path="src/components/bottom-drawer/index.tsx">
'use client'
import {AiCHAT} from '@/components/ui/kokonutui/vercel-v0-chat'
import {motion, useAnimation, useMotionValue, useTransform} from 'framer-motion'
import {ChevronsUpDown, Plus, X} from 'lucide-react'
const EXPANDED_HEIGHT = 704
const COLLAPSED_HEIGHT = 400
const TOGGLE_HEIGHT_THRESHOLD = (EXPANDED_HEIGHT + COLLAPSED_HEIGHT) / 2
const CaretSortIconMotion = motion(ChevronsUpDown)
//
export function DemoDrawerUnderlay({children}: {children: React.ReactNode}) {
  const contentHeight = useMotionValue(EXPANDED_HEIGHT)
  const contentAnimationControls = useAnimation()
  const heightTransitionSettings = {
    duration: 0.5,
    ease: [0.32, 0.72, 0, 1],
  }
  const contentScale = useTransform(
    contentHeight,
    [EXPANDED_HEIGHT, COLLAPSED_HEIGHT],
    [1, 0.9]
  )
  const contentRoundedCorners = useTransform(
    contentHeight,
    [EXPANDED_HEIGHT, COLLAPSED_HEIGHT],
    [0, 24]
  )
  const contentPaddingTop = useTransform(
    contentHeight,
    [EXPANDED_HEIGHT, COLLAPSED_HEIGHT],
    [80, 0]
  )
  const actionAreaHeight = useTransform(
    contentHeight,
    [EXPANDED_HEIGHT, COLLAPSED_HEIGHT],
    [92, 20]
  )
  const actionButtonSize = useTransform(
    contentHeight,
    [EXPANDED_HEIGHT, COLLAPSED_HEIGHT],
    [28, 4]
  )
  const actionIconScale = useTransform(
    contentHeight,
    [EXPANDED_HEIGHT, COLLAPSED_HEIGHT],
    [1, 0]
  )
  const sheetShadowIntensity = useTransform(
    contentHeight,
    [EXPANDED_HEIGHT, COLLAPSED_HEIGHT],
    [
      '0 0px 0px 0px rgb(0 0 0 / 0.1), 0 0px 0px 0px rgb(0 0 0 / 0.1)',
      '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',
    ]
  )
  const onDragAdjustHeight = (_event: unknown, info: {delta: {y: number}}) => {
    const newHeight = contentHeight.get() + info.delta.y
    if (newHeight > COLLAPSED_HEIGHT && newHeight <= EXPANDED_HEIGHT) {
      contentHeight.set(newHeight)
    }
  }
  const onDragEndAdjustHeight = async () => {
    if (
      contentHeight.get() === COLLAPSED_HEIGHT ||
      contentHeight.get() === EXPANDED_HEIGHT
    ) {
      return
    }
    const finalHeight =
      contentHeight.get() < TOGGLE_HEIGHT_THRESHOLD
        ? COLLAPSED_HEIGHT
        : EXPANDED_HEIGHT
    await contentAnimationControls.start({
      height: finalHeight,
      transition: heightTransitionSettings,
    })
  }
  const openSheet = () => {
    if (contentHeight.get() === COLLAPSED_HEIGHT) {
      return
    }
    contentAnimationControls.start({
      height: COLLAPSED_HEIGHT,
      transition: heightTransitionSettings,
    })
  }
  const closeSheet = () => {
    contentAnimationControls.start({
      height: EXPANDED_HEIGHT,
      transition: heightTransitionSettings,
    })
  }
  return (
    <div className='p-6'>
      <div
        className='relative w-full overflow-hidden '
        style={{
          height: EXPANDED_HEIGHT,
          width: '100%',
        }}
      >
        <div>
          <motion.div
            className='relative overflow-hidden'
            style={{
              height: contentHeight,
              scale: contentScale,
              borderRadius: contentRoundedCorners,
              boxShadow: sheetShadowIntensity,
            }}
            animate={contentAnimationControls}
          >
            <motion.div
              className='flex h-full flex-col space-y-2 overflow-y-scroll px-5 pb-20'
              style={{
                // remove scrollbar for demo phone screen
                scrollbarWidth: 'none',
                paddingTop: contentPaddingTop,
              }}
            ></motion.div>
            <motion.div
              // TODO
              className='absolute bottom-0 left-0 flex w-full items-end justify-center bg-gradient-to-t from-neutral-50 via-neutral-200 to-transparent dark:from-neutral-700 dark:via-neutral-800 dark:to-transparent'
              style={{
                height: actionAreaHeight,
              }}
              animate={contentAnimationControls}
            >
              <motion.div
                drag='y'
                dragConstraints={{
                  top: 0,
                  right: 0,
                  bottom: 0,
                  left: 0,
                }}
                dragElastic={0}
                dragMomentum={false}
                onDrag={onDragAdjustHeight}
                onDragEnd={onDragEndAdjustHeight}
                dragTransition={{bounceStiffness: 600, bounceDamping: 20}}
                whileDrag={{cursor: 'grabbing'}}
                className='flex h-[80%] w-full items-center justify-center'
              >
                <motion.button
                  onClick={openSheet}
                  className='z-10 flex items-center justify-center rounded-[12px] bg-card/90 px-2  transition-colors hover:bg-card/95'
                  style={{
                    height: actionButtonSize,
                  }}
                  animate={contentAnimationControls}
                >
                  <CaretSortIconMotion
                    className='h-5 w-5 '
                    style={{
                      scaleY: actionIconScale,
                    }}
                  />
                </motion.button>
              </motion.div>
            </motion.div>
          </motion.div>
        </div>
        <motion.div className='flex flex-col space-y-2 px-4'>
          <div className='flex items-center space-x-2 pb-5 pt-3'>
            <div className='flex-1'>
              <button className='rounded-full bg-card/130 border  p-1 transition-colors hover:bg-mauve-light-4'>
                <Plus className='size-3' />
              </button>
            </div>
            <div
              className='flex flex-1 justify-end'
              onClick={closeSheet}
              onKeyDown={(e) => {
                if (e.key === 'Enter') closeSheet()
              }}
            >
              <button className='hover:bg-mauve-light-4-4 rounded-full bg-card/130 border  p-1 transition-colors'>
                <X className='size-3' />
              </button>
            </div>
          </div>
          {children}
          {/* <div className='flex flex-row space-x-2'>
            <AiCHAT />
          </div> */}
        </motion.div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/nav/full-nav.tsx">
'use client'
import {useState} from 'react'
import React from 'react'
import {motion, AnimatePresence} from 'framer-motion'
import Link from 'next/link'
import {usePathname} from 'next/navigation'
import {
  ChevronDown,
  Cpu,
  Globe,
  Eye,
  Shield,
  Rocket,
  Box,
  Search,
  Palette,
  BookOpen,
  FileText,
  Newspaper,
} from 'lucide-react'
import {SignedIn, SignedOut, SignInButton, UserButton} from '@clerk/nextjs'
export const FullNav = () => {
  type Props = {
    id: number
    tile: string
    href: string
  }
  const ITEMS: Props[] = [
    {id: 1, tile: 'Home', href: '/'},
    {id: 2, tile: 'Quickbooks', href: '/dashboard'},
    {id: 3, tile: 'Sage', href: '/sage'},
    {id: 7, tile: 'AI', href: '/ai'},
    {id: 8, tile: 'Settings', href: '/settings'},
  ]
  const pathname = usePathname()
  const [isHover, setIsHover] = useState<Props | null>(null)
  return (
    <ul className='flex items-center justify-center py-2 px-8 rounded-full fixed left-1/2 -translate-x-1/2 mx-auto max-w-3xl bg-black/20 backdrop-blur-md top-4 z-50'>
      {ITEMS.map((item) => {
        const isActive =
          pathname === item.href ||
          (item.href !== '/' && pathname?.startsWith(item.href))
        return (
          <Link
            key={item.id}
            href={item.href}
            className='py-2 relative duration-300 transition-colors hover:!text-white'
            onMouseEnter={() => setIsHover(item)}
            onMouseLeave={() => setIsHover(null)}
            style={{color: isActive ? '#FFF' : '#888888'}}
          >
            <div className='px-5 py-2 relative'>
              {item.tile}
              {isHover?.id === item.id && (
                <motion.div
                  layoutId='hover-bg'
                  className='absolute bottom-0 left-0 right-0 w-full h-full bg-white/10'
                  style={{
                    borderRadius: 6,
                  }}
                />
              )}
            </div>
            {isActive && (
              <motion.div
                layoutId='active'
                className='absolute bottom-0 left-0 right-0 w-full h-0.5 bg-white'
              />
            )}
            {isHover?.id === item.id && (
              <motion.div
                layoutId='hover'
                className='absolute bottom-0 left-0 right-0 w-full h-0.5 bg-white'
              />
            )}
          </Link>
        )
      })}
      <SignedOut>
        <SignInButton />
      </SignedOut>
      <SignedIn>
        <UserButton />
      </SignedIn>
    </ul>
  )
}
</file>

<file path="src/components/ui/kokonutui/action-search-bar.tsx">
"use client";
import { useState, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { motion, AnimatePresence } from "motion/react";
import {
    Search,
    Send,
    BarChart2,
    Globe,
    Video,
    PlaneTakeoff,
    AudioLines,
    Layout,
    LayoutGrid,
} from "lucide-react";
import useDebounce from "@/hooks/use-debounce";
interface Action {
    id: string;
    label: string;
    icon: React.ReactNode;
    description?: string;
    short?: string;
    end?: string;
}
interface SearchResult {
    actions: Action[];
}
const allActionsSample = [
    {
        id: "1",
        label: "Book tickets",
        icon: <PlaneTakeoff className="h-4 w-4 text-blue-500" />,
        description: "Operator",
        short: "⌘K",
        end: "Agent",
    },
    {
        id: "2",
        label: "Summarize",
        icon: <BarChart2 className="h-4 w-4 text-orange-500" />,
        description: "gpt-4o",
        short: "⌘cmd+p",
        end: "Command",
    },
    {
        id: "3",
        label: "Screen Studio",
        icon: <Video className="h-4 w-4 text-purple-500" />,
        description: "gpt-4o",
        short: "",
        end: "Application",
    },
    {
        id: "4",
        label: "Talk to Jarvis",
        icon: <AudioLines className="h-4 w-4 text-green-500" />,
        description: "gpt-4o voice",
        short: "",
        end: "Active",
    },
    {
        id: "5",
        label: "Kokonut UI - Pro",
        icon: <LayoutGrid className="h-4 w-4 text-blue-500" />,
        description: "Components",
        short: "",
        end: "Link",
    },
];
function ActionSearchBar({
    actions = allActionsSample,
    defaultOpen = false,
}: {
    actions?: Action[];
    defaultOpen?: boolean;
}) {
    const [query, setQuery] = useState("");
    const [result, setResult] = useState<SearchResult | null>(null);
    const [isFocused, setIsFocused] = useState(defaultOpen);
    const [isTyping, setIsTyping] = useState(false);
    const [selectedAction, setSelectedAction] = useState<Action | null>(null);
    const debouncedQuery = useDebounce(query, 200);
    useEffect(() => {
        if (!isFocused) {
            setResult(null);
            return;
        }
        if (!debouncedQuery) {
            setResult({ actions: actions });
            return;
        }
        const normalizedQuery = debouncedQuery.toLowerCase().trim();
        const filteredActions = actions.filter((action) => {
            const searchableText = action.label.toLowerCase();
            return searchableText.includes(normalizedQuery);
        });
        setResult({ actions: filteredActions });
    }, [debouncedQuery, isFocused, actions]);
    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setQuery(e.target.value);
        setIsTyping(true);
    };
    const container = {
        hidden: { opacity: 0, height: 0 },
        show: {
            opacity: 1,
            height: "auto",
            transition: {
                height: {
                    duration: 0.4,
                },
                staggerChildren: 0.1,
            },
        },
        exit: {
            opacity: 0,
            height: 0,
            transition: {
                height: {
                    duration: 0.3,
                },
                opacity: {
                    duration: 0.2,
                },
            },
        },
    };
    const item = {
        hidden: { opacity: 0, y: 20 },
        show: {
            opacity: 1,
            y: 0,
            transition: {
                duration: 0.3,
            },
        },
        exit: {
            opacity: 0,
            y: -10,
            transition: {
                duration: 0.2,
            },
        },
    };
    const handleFocus = () => {
        setSelectedAction(null);
        setIsFocused(true);
    };
    return (
        <div className="w-full max-w-xl mx-auto">
            <div className="relative flex flex-col justify-start items-center min-h-[300px]">
                <div className="w-full max-w-sm sticky top-0 bg-background z-10 pt-4 pb-1">
                    <label
                        className="text-xs font-medium text-gray-500 dark:text-gray-400 mb-1 block"
                        htmlFor="search"
                    >
                        Search Commands
                    </label>
                    <div className="relative">
                        <Input
                            type="text"
                            placeholder="What's up?"
                            value={query}
                            onChange={handleInputChange}
                            onFocus={handleFocus}
                            onBlur={() =>
                                setTimeout(() => setIsFocused(false), 200)
                            }
                            className="pl-3 pr-9 py-1.5 h-9 text-sm rounded-lg focus-visible:ring-offset-0"
                        />
                        <div className="absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4">
                            <AnimatePresence mode="popLayout">
                                {query.length > 0 ? (
                                    <motion.div
                                        key="send"
                                        initial={{ y: -20, opacity: 0 }}
                                        animate={{ y: 0, opacity: 1 }}
                                        exit={{ y: 20, opacity: 0 }}
                                        transition={{ duration: 0.2 }}
                                    >
                                        <Send className="w-4 h-4 text-gray-400 dark:text-gray-500" />
                                    </motion.div>
                                ) : (
                                    <motion.div
                                        key="search"
                                        initial={{ y: -20, opacity: 0 }}
                                        animate={{ y: 0, opacity: 1 }}
                                        exit={{ y: 20, opacity: 0 }}
                                        transition={{ duration: 0.2 }}
                                    >
                                        <Search className="w-4 h-4 text-gray-400 dark:text-gray-500" />
                                    </motion.div>
                                )}
                            </AnimatePresence>
                        </div>
                    </div>
                </div>
                <div className="w-full max-w-sm">
                    <AnimatePresence>
                        {isFocused && result && !selectedAction && (
                            <motion.div
                                className="w-full border rounded-md shadow-xs overflow-hidden dark:border-gray-800 bg-white dark:bg-black mt-1"
                                variants={container}
                                initial="hidden"
                                animate="show"
                                exit="exit"
                            >
                                <motion.ul>
                                    {result.actions.map((action) => (
                                        <motion.li
                                            key={action.id}
                                            className="px-3 py-2 flex items-center justify-between hover:bg-gray-200 dark:hover:bg-zinc-900  cursor-pointer rounded-md"
                                            variants={item}
                                            layout
                                            onClick={() =>
                                                setSelectedAction(action)
                                            }
                                        >
                                            <div className="flex items-center gap-2 justify-between">
                                                <div className="flex items-center gap-2">
                                                    <span className="text-gray-500">
                                                        {action.icon}
                                                    </span>
                                                    <span className="text-sm font-medium text-gray-900 dark:text-gray-100">
                                                        {action.label}
                                                    </span>
                                                    <span className="text-xs text-gray-400">
                                                        {action.description}
                                                    </span>
                                                </div>
                                            </div>
                                            <div className="flex items-center gap-2">
                                                <span className="text-xs text-gray-400">
                                                    {action.short}
                                                </span>
                                                <span className="text-xs text-gray-400 text-right">
                                                    {action.end}
                                                </span>
                                            </div>
                                        </motion.li>
                                    ))}
                                </motion.ul>
                                <div className="mt-2 px-3 py-2 border-t border-gray-100 dark:border-gray-800">
                                    <div className="flex items-center justify-between text-xs text-gray-500">
                                        <span>Press ⌘K to open commands</span>
                                        <span>ESC to cancel</span>
                                    </div>
                                </div>
                            </motion.div>
                        )}
                    </AnimatePresence>
                </div>
            </div>
        </div>
    );
}
export default ActionSearchBar;
</file>

<file path="src/components/ui/kokonutui/bento-grid.tsx">
'use client'
import {cn} from '@/lib/utils'
import {CheckCircle, Clock, Star, TrendingUp, Video, Globe} from 'lucide-react'
export interface BentoItem {
  title: string
  description: string
  icon: React.ReactNode
  status?: string
  tags?: string[]
  meta?: string
  cta?: string
  colSpan?: number
  hasPersistentHover?: boolean
}
interface BentoGridProps {
  items: BentoItem[]
}
function BentoGrid({items}: BentoGridProps) {
  return (
    <div className='grid grid-cols-1 md:grid-cols-3 gap-3 p-4 max-w-7xl mx-auto'>
      {items.map((item, index) => (
        <div
          key={index}
          className={cn(
            'group relative p-4 rounded-xl overflow-hidden transition-all duration-300',
            'border border-gray-100/80 dark:border-white/10 bg-white dark:bg-black',
            'hover:shadow-[0_2px_12px_rgba(0,0,0,0.03)] dark:hover:shadow-[0_2px_12px_rgba(255,255,255,0.03)]',
            'hover:-translate-y-0.5 will-change-transform',
            item.colSpan || 'col-span-1',
            item.colSpan === 2 ? 'md:col-span-2' : '',
            {
              'shadow-[0_2px_12px_rgba(0,0,0,0.03)] -translate-y-0.5':
                item.hasPersistentHover,
              'dark:shadow-[0_2px_12px_rgba(255,255,255,0.03)]':
                item.hasPersistentHover,
            }
          )}
        >
          <div
            className={`absolute inset-0 ${
              item.hasPersistentHover
                ? 'opacity-100'
                : 'opacity-0 group-hover:opacity-100'
            } transition-opacity duration-300`}
          >
            <div className='absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(0,0,0,0.02)_1px,transparent_1px)] dark:bg-[radial-gradient(circle_at_center,rgba(255,255,255,0.02)_1px,transparent_1px)] bg-[length:4px_4px]' />
          </div>
          <div className='relative flex flex-col space-y-3'>
            <div className='flex items-center justify-between'>
              <div className='w-8 h-8 rounded-lg flex items-center justify-center bg-black/5 dark:bg-white/10 group-hover:bg-gradient-to-br transition-all duration-300'>
                {item.icon}
              </div>
              <span
                className={cn(
                  'text-xs font-medium px-2 py-1 rounded-lg backdrop-blur-sm',
                  'bg-black/5 dark:bg-white/10 text-gray-600 dark:text-gray-300',
                  'transition-colors duration-300 group-hover:bg-black/10 dark:group-hover:bg-white/20'
                )}
              >
                {item.status || 'Active'}
              </span>
            </div>
            <div className='space-y-2'>
              <h3 className='font-medium text-gray-900 dark:text-gray-100 tracking-tight text-[15px]'>
                {item.title}
                <span className='ml-2 text-xs text-gray-500 dark:text-gray-400 font-normal'>
                  {item.meta}
                </span>
              </h3>
              <p className='text-sm text-gray-600 dark:text-gray-300 leading-snug font-[425]'>
                {item.description}
              </p>
            </div>
            <div className='flex items-center justify-between mt-2'>
              <div className='flex items-center space-x-2 text-xs text-gray-500 dark:text-gray-400'>
                {item.tags?.map((tag, i) => (
                  <span
                    key={i}
                    className='px-2 py-1 rounded-md bg-black/5 dark:bg-white/10 backdrop-blur-sm transition-all duration-200 hover:bg-black/10 dark:hover:bg-white/20'
                  >
                    #{tag}
                  </span>
                ))}
              </div>
              <span className='text-xs text-gray-500 dark:text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity'>
                {item.cta || 'Explore →'}
              </span>
            </div>
          </div>
          <div
            className={`absolute inset-0 -z-10 rounded-xl p-px bg-gradient-to-br from-transparent via-gray-100/50 to-transparent dark:via-white/10 ${
              item.hasPersistentHover
                ? 'opacity-100'
                : 'opacity-0 group-hover:opacity-100'
            } transition-opacity duration-300`}
          />
        </div>
      ))}
    </div>
  )
}
export {BentoGrid}
</file>

<file path="src/components/ui/kokonutui/content.tsx">
import {Calendar, CreditCard, Wallet, Users} from 'lucide-react'
import {Suspense} from 'react'
import List01 from './list-01'
import List02 from './list-02'
import List03 from './list-03'
import {
  findCustomers,
  findVendors,
  findPurchases,
  // Customer,
  // Vendor,
  // Purchase,
} from '@/services/intuit/api'
async function CustomersList() {
  const {QueryResponse} = await findCustomers({limit: 5})
  console.log('🚀 ~ CustomersList ~ QueryResponse:', QueryResponse)
  return <List01 customers={QueryResponse.Customer} />
}
async function PurchasesList() {
  const {QueryResponse} = await findPurchases({limit: 6})
  console.log('🚀 ~ PurchasesList ~ QueryResponse:', QueryResponse)
  return <List02 purchases={QueryResponse.Purchase} />
}
async function VendorsList() {
  const {QueryResponse} = await findVendors({limit: 3})
  console.log('🚀 ~ VendorsList ~ QueryResponse:', QueryResponse)
  return <List03 vendors={QueryResponse.Vendor} />
}
export function DashboardContent() {
  return (
    <div className='space-y-4'>
      <div className='grid grid-cols-1 lg:grid-cols-2 gap-6'>
        <div className='bg-[#0F0F12] rounded-xl p-6 flex flex-col border border-gray-200 border-[#1F1F23]'>
          <h2 className='text-lg font-bold text-gray-900 text-white mb-4 text-left flex items-center gap-2 '>
            <Users className='w-3.5 h-3.5 text-zinc-900 text-zinc-50' />
            Customers
          </h2>
          <div className='flex-1'>
            <Suspense
              fallback={
                <div className='p-4 text-center'>Loading customers...</div>
              }
            >
              <CustomersList />
            </Suspense>
          </div>
        </div>
        <div className='bg-[#0F0F12] rounded-xl p-6 flex flex-col border border-gray-200 border-[#1F1F23]'>
          <h2 className='text-lg font-bold text-gray-900 text-white mb-4 text-left flex items-center gap-2'>
            <CreditCard className='w-3.5 h-3.5 text-zinc-900 text-zinc-50' />
            Recent Purchases
          </h2>
          <div className='flex-1'>
            <Suspense
              fallback={
                <div className='p-4 text-center'>Loading transactions...</div>
              }
            >
              <PurchasesList />
            </Suspense>
          </div>
        </div>
      </div>
      <div className='bg-[#0F0F12] rounded-xl p-6 flex flex-col items-start justify-start border border-gray-200 border-[#1F1F23]'>
        <h2 className='text-lg font-bold text-gray-900 text-white mb-4 text-left flex items-center gap-2'>
          <Wallet className='w-3.5 h-3.5 text-zinc-900 text-zinc-50' />
          Vendors
        </h2>
        <Suspense
          fallback={<div className='p-4 text-center'>Loading vendors...</div>}
        >
          <VendorsList />
        </Suspense>
      </div>
    </div>
  )
}
</file>

<file path="src/components/ui/kokonutui/hero-geometric.tsx">
'use client'
import {motion} from 'motion/react'
import {Pacifico} from 'next/font/google'
import Image from 'next/image'
import {cn} from '@/lib/utils'
const pacifico = Pacifico({
  subsets: ['latin'],
  weight: ['400'],
  variable: '--font-pacifico',
})
function ElegantShape({
  className,
  delay = 0,
  width = 400,
  height = 100,
  rotate = 0,
  gradient = 'from-white/[0.08]',
}: {
  className?: string
  delay?: number
  width?: number
  height?: number
  rotate?: number
  gradient?: string
}) {
  return (
    <motion.div
      initial={{
        opacity: 0,
        y: -150,
        rotate: rotate - 15,
      }}
      animate={{
        opacity: 1,
        y: 0,
        rotate: rotate,
      }}
      transition={{
        duration: 2.4,
        delay,
        ease: [0.23, 0.86, 0.39, 0.96],
        opacity: {duration: 1.2},
      }}
      className={cn('absolute', className)}
    >
      <motion.div
        animate={{
          y: [0, 15, 0],
        }}
        transition={{
          duration: 12,
          repeat: Number.POSITIVE_INFINITY,
          ease: 'easeInOut',
        }}
        style={{
          width,
          height,
        }}
        className='relative'
      >
        <div
          className={cn(
            'absolute inset-0 rounded-full',
            'bg-linear-to-r to-transparent',
            gradient,
            'backdrop-blur-[2px] border-2 border-white/[0.15]',
            'shadow-[0_8px_32px_0_rgba(255,255,255,0.1)]',
            'after:absolute after:inset-0 after:rounded-full',
            'after:bg-[radial-gradient(circle_at_50%_50%,rgba(255,255,255,0.2),transparent_70%)]'
          )}
        />
      </motion.div>
    </motion.div>
  )
}
export default function HeroGeometric({
  badge = 'AI',
  title1 = 'FLYPILOT',
  title2 = 'AI ORACLE',
}: {
  badge?: string
  title1?: string
  title2?: string
}) {
  const fadeUpVariants = {
    hidden: {opacity: 0, y: 30},
    visible: (i: number) => ({
      opacity: 1,
      y: 0,
      transition: {
        duration: 1,
        delay: 0.5 + i * 0.2,
        ease: [0.25, 0.4, 0.25, 1],
      },
    }),
  }
  return (
    <div className='relative min-h-screen w-full flex items-center justify-center overflow-hidden bg-[#030303]'>
      <div className='absolute inset-0 bg-linear-to-br from-indigo-500/[0.05] via-transparent to-rose-500/[0.05] blur-3xl' />
      <div className='absolute inset-0 overflow-hidden'>
        <ElegantShape
          delay={0.3}
          width={600}
          height={140}
          rotate={12}
          gradient='from-indigo-500/[0.15]'
          className='left-[-10%] md:left-[-5%] top-[15%] md:top-[20%]'
        />
        <ElegantShape
          delay={0.5}
          width={500}
          height={120}
          rotate={-15}
          gradient='from-rose-500/[0.15]'
          className='right-[-5%] md:right-[0%] top-[70%] md:top-[75%]'
        />
        <ElegantShape
          delay={0.4}
          width={300}
          height={80}
          rotate={-8}
          gradient='from-violet-500/[0.15]'
          className='left-[5%] md:left-[10%] bottom-[5%] md:bottom-[10%]'
        />
        <ElegantShape
          delay={0.6}
          width={200}
          height={60}
          rotate={20}
          gradient='from-amber-500/[0.15]'
          className='right-[15%] md:right-[20%] top-[10%] md:top-[15%]'
        />
        <ElegantShape
          delay={0.7}
          width={150}
          height={40}
          rotate={-25}
          gradient='from-cyan-500/[0.15]'
          className='left-[20%] md:left-[25%] top-[5%] md:top-[10%]'
        />
      </div>
      <div className='relative z-10 container mx-auto px-4 md:px-6'>
        <div className='max-w-3xl mx-auto text-center'>
          <motion.div
            custom={0}
            variants={fadeUpVariants}
            initial='hidden'
            animate='visible'
            className='inline-flex items-center gap-2 px-3 py-1 rounded-full bg-white/[0.03] border border-white/[0.08] mb-8 md:mb-12'
          >
            <Image
              src='https://kokonutui.com/logo.svg'
              alt='Kokonut UI'
              width={20}
              height={20}
            />
            <span className='text-sm text-white/60 tracking-wide'>{badge}</span>
          </motion.div>
          <motion.div
            custom={1}
            variants={fadeUpVariants}
            initial='hidden'
            animate='visible'
          >
            <h1 className='text-4xl sm:text-6xl md:text-8xl font-bold mb-6 md:mb-8 tracking-tight'>
              <span className='bg-clip-text text-transparent bg-linear-to-b from-white to-white/80'>
                {title1}
              </span>
              <br />
              <span
                className={cn(
                  'bg-clip-text text-transparent bg-linear-to-r from-indigo-300 via-white/90 to-rose-300 ',
                  pacifico.className
                )}
              >
                {title2}
              </span>
            </h1>
          </motion.div>
          <motion.div
            custom={2}
            variants={fadeUpVariants}
            initial='hidden'
            animate='visible'
          >
            <p className='text-base sm:text-lg md:text-xl text-white/40 mb-8 leading-relaxed font-light tracking-wide max-w-xl mx-auto px-4'>
              Presently offering support for SAGE and the Quickbooks + Intuit
              Platforms
            </p>
          </motion.div>
        </div>
      </div>
      <div className='absolute inset-0 bg-linear-to-t from-[#030303] via-transparent to-[#030303]/80 pointer-events-none' />
    </div>
  )
}
</file>

<file path="src/components/ui/kokonutui/index.tsx">
export * from './content'
</file>

<file path="src/components/ui/kokonutui/list-01.tsx">
import type {Customer} from '@/services/intuit/types'
import {cn} from '@/lib/utils'
import {
  ArrowUpRight,
  ArrowDownLeft,
  Wallet,
  SendHorizontal,
  QrCode,
  type LucideIcon,
  Plus,
  ArrowRight,
  CreditCard,
  Users,
} from 'lucide-react'
interface AccountItem {
  id: string
  title: string
  description?: string
  balance: string
  type: 'savings' | 'checking' | 'investment' | 'debt'
}
interface List01Props {
  totalBalance?: string
  accounts?: AccountItem[]
  customers?: Customer[]
  className?: string
}
export default function List01({
  totalBalance = '$26,540.25',
  accounts,
  customers = [],
  className,
}: List01Props) {
  // If customers are provided, use them instead of the default accounts
  const hasCustomers = customers && customers.length > 0
  // Calculate total balance if customers are provided
  const customerTotalBalance = hasCustomers
    ? customers.reduce((total, customer) => total + (customer.Balance || 0), 0)
    : 0
  // Format as currency
  const formattedCustomerBalance = hasCustomers
    ? new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
      }).format(customerTotalBalance)
    : totalBalance
  return (
    <div
      className={cn(
        'w-full',
        'bg-zinc-900/70',
        'border border-zinc-800',
        'rounded-xl shadow-sm backdrop-blur-xl',
        className
      )}
    >
      {/* Total Balance Section */}
      <div className='p-4 border-b border-zinc-800'>
        <p className='text-xs text-zinc-400'>
          {hasCustomers ? 'Total Customer Balance' : 'Total Balance'}
        </p>
        <h1 className='text-2xl font-semibold text-zinc-50'>
          {formattedCustomerBalance}
        </h1>
      </div>
      {/* Accounts/Customers List */}
      <div className='p-3'>
        <div className='flex items-center justify-between mb-2'>
          <h2 className='text-xs font-medium text-zinc-100'>
            {hasCustomers ? 'Your Customers' : 'Your Accounts'}
          </h2>
        </div>
        <div className='space-y-1'>
          {hasCustomers
            ? // Render customers from QuickBooks API
              customers.map((customer) => (
                <div
                  key={customer.Id}
                  className={cn(
                    'group flex items-center justify-between',
                    'p-2 rounded-lg',
                    'hover:bg-zinc-100 hover:bg-zinc-800/50',
                    'transition-all duration-200'
                  )}
                >
                  <div className='flex items-center gap-2'>
                    <div className='p-1.5 rounded-lg bg-blue-100 bg-blue-900/30'>
                      <Users className='w-3.5 h-3.5 text-blue-600 text-blue-400' />
                    </div>
                    <div>
                      <h3 className='text-xs font-medium text-zinc-100'>
                        {customer.DisplayName}
                      </h3>
                      {customer.CompanyName && (
                        <p className='text-[11px] text-zinc-400'>
                          {customer.CompanyName}
                        </p>
                      )}
                    </div>
                  </div>
                  <div className='text-right'>
                    <span className='text-xs font-medium text-zinc-100'>
                      {customer.Balance
                        ? new Intl.NumberFormat('en-US', {
                            style: 'currency',
                            currency: 'USD',
                          }).format(customer.Balance)
                        : '$0.00'}
                    </span>
                  </div>
                </div>
              ))
            : 'No customers found'}
        </div>
      </div>
      {/* Footer with buttons */}
      <div className='p-2 border-t border-zinc-800'>
        <div className='grid grid-cols-4 gap-2'>
          <button
            type='button'
            className={cn(
              'flex items-center justify-center gap-2',
              'py-2 px-3 rounded-lg',
              'text-xs font-medium',
              'bg-zinc-900 bg-zinc-50',
              'text-zinc-50 text-zinc-900',
              'hover:bg-zinc-800 hover:bg-zinc-200',
              'shadow-sm hover:shadow',
              'transition-all duration-200'
            )}
          >
            <Plus className='w-3.5 h-3.5' />
            <span>{hasCustomers ? 'New' : 'Add'}</span>
          </button>
          <button
            type='button'
            className={cn(
              'flex items-center justify-center gap-2',
              'py-2 px-3 rounded-lg',
              'text-xs font-medium',
              'bg-zinc-900 bg-zinc-50',
              'text-zinc-50 text-zinc-900',
              'hover:bg-zinc-800 hover:bg-zinc-200',
              'shadow-sm hover:shadow',
              'transition-all duration-200'
            )}
          >
            <SendHorizontal className='w-3.5 h-3.5' />
            <span>{hasCustomers ? 'Email' : 'Send'}</span>
          </button>
          <button
            type='button'
            className={cn(
              'flex items-center justify-center gap-2',
              'py-2 px-3 rounded-lg',
              'text-xs font-medium',
              'bg-zinc-900 bg-zinc-50',
              'text-zinc-50 text-zinc-900',
              'hover:bg-zinc-800 hover:bg-zinc-200',
              'shadow-sm hover:shadow',
              'transition-all duration-200'
            )}
          >
            <ArrowDownLeft className='w-3.5 h-3.5' />
            <span>{hasCustomers ? 'Import' : 'Top-up'}</span>
          </button>
          <button
            type='button'
            className={cn(
              'flex items-center justify-center gap-2',
              'py-2 px-3 rounded-lg',
              'text-xs font-medium',
              'bg-zinc-900 bg-zinc-50',
              'text-zinc-50 text-zinc-900',
              'hover:bg-zinc-800 hover:bg-zinc-200',
              'shadow-sm hover:shadow',
              'transition-all duration-200'
            )}
          >
            <ArrowRight className='w-3.5 h-3.5' />
            <span>More</span>
          </button>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/ui/kokonutui/list-02.tsx">
import type {Purchase} from '@/services/intuit/types'
import {cn} from '@/lib/utils'
import {
  ArrowUpRight,
  ArrowDownLeft,
  Wallet,
  ShoppingCart,
  CreditCard,
  type LucideIcon,
  ArrowRight,
  DollarSign,
  Building,
} from 'lucide-react'
interface Transaction {
  id: string
  title: string
  amount: string
  type: 'incoming' | 'outgoing'
  category: string
  icon: LucideIcon
  timestamp: string
  status: 'completed' | 'pending' | 'failed'
}
interface List02Props {
  transactions?: Transaction[]
  purchases?: Purchase[]
  className?: string
}
const categoryStyles = {
  shopping: 'bg-zinc-100 dark:bg-zinc-800 text-zinc-100',
  food: 'bg-zinc-100 dark:bg-zinc-800 text-zinc-100',
  transport: 'bg-zinc-100 dark:bg-zinc-800 text-zinc-100',
  entertainment: 'bg-zinc-100 dark:bg-zinc-800 text-zinc-100',
}
export default function List02({purchases = [], className}: List02Props) {
  // If purchases are provided, use them instead of the default transactions
  const hasPurchases = purchases && purchases.length > 0
  // Format date from ISO string
  const formatDate = (dateString?: string) => {
    if (!dateString) return 'N/A'
    const date = new Date(dateString)
    const now = new Date()
    const isToday = date.toDateString() === now.toDateString()
    const isYesterday =
      new Date(now.setDate(now.getDate() - 1)).toDateString() ===
      date.toDateString()
    const timeStr = date.toLocaleTimeString([], {
      hour: '2-digit',
      minute: '2-digit',
    })
    if (isToday) return `Today, ${timeStr}`
    if (isYesterday) return `Yesterday, ${timeStr}`
    return date.toLocaleDateString(undefined, {
      month: 'short',
      day: 'numeric',
      year:
        date.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined,
    })
  }
  return (
    <div
      className={cn(
        'w-full',
        'bg-zinc-900/70',
        'border border-zinc-100 dark:border-zinc-800',
        'rounded-xl shadow-sm backdrop-blur-xl',
        className
      )}
    >
      <div className='p-4'>
        <div className='flex items-center justify-between mb-3'>
          <h2 className='text-sm font-semibold text-zinc-100'>
            {hasPurchases ? 'Recent Purchases' : 'Recent Activity'}
            <span className='text-xs font-normal text-zinc-400 ml-1'>
              ({hasPurchases ? purchases.length : '23'} transactions)
            </span>
          </h2>
          <span className='text-xs text-zinc-400'>This Month</span>
        </div>
        <div className='space-y-1'>
          {hasPurchases
            ? // Render purchases from QuickBooks API
              purchases.map((purchase) => (
                <div
                  key={purchase.Id}
                  className={cn(
                    'group flex items-center gap-3',
                    'p-2 rounded-lg',
                    'hover:bg-zinc-100 dark:hover:bg-zinc-800/50',
                    'transition-all duration-200'
                  )}
                >
                  <div
                    className={cn(
                      'p-2 rounded-lg',
                      'bg-zinc-100 dark:bg-zinc-800',
                      'border border-zinc-700'
                    )}
                  >
                    {purchase.PaymentType === 'CreditCard' ? (
                      <CreditCard className='w-4 h-4 text-zinc-100' />
                    ) : purchase.PaymentType === 'Cash' ? (
                      <DollarSign className='w-4 h-4 text-zinc-100' />
                    ) : (
                      <Building className='w-4 h-4 text-zinc-100' />
                    )}
                  </div>
                  <div className='flex-1 flex items-center justify-between min-w-0'>
                    <div className='space-y-0.5'>
                      <h3 className='text-xs font-medium text-zinc-100'>
                        {purchase.EntityRef?.name || 'Unknown Vendor'}
                      </h3>
                      <p className='text-[11px] text-zinc-400'>
                        {formatDate(purchase.TxnDate)}
                      </p>
                    </div>
                    <div className='flex items-center gap-1.5 pl-3'>
                      <span className='text-xs font-medium text-red-600 dark:text-red-400'>
                        -{' '}
                        {purchase.Line && purchase.Line.length > 0
                          ? new Intl.NumberFormat('en-US', {
                              style: 'currency',
                              currency: 'USD',
                            }).format(
                              purchase.Line.reduce(
                                (sum, line) => sum + (line.Amount || 0),
                                0
                              )
                            )
                          : '$0.00'}
                      </span>
                      <ArrowUpRight className='w-3.5 h-3.5 text-red-600 dark:text-red-400' />
                    </div>
                  </div>
                </div>
              ))
            : 'No purchases found'}
        </div>
      </div>
      <div className='p-2 border-t border-zinc-100 dark:border-zinc-800'>
        <button
          type='button'
          className={cn(
            'w-full flex items-center justify-center gap-2',
            'py-2 px-3 rounded-lg',
            'text-xs font-medium',
            'bg-gradient-to-r from-zinc-900 to-zinc-800',
            'dark:from-zinc-50 dark:to-zinc-200',
            'text-zinc-50 dark:text-zinc-900',
            'hover:from-zinc-800 hover:to-zinc-700',
            'dark:hover:from-zinc-200 dark:hover:to-zinc-300',
            'shadow-sm hover:shadow',
            'transform transition-all duration-200',
            'hover:-translate-y-0.5',
            'active:translate-y-0',
            'focus:outline-none focus:ring-2',
            'focus:ring-zinc-500 dark:focus:ring-zinc-400',
            'focus:ring-offset-2 dark:focus:ring-offset-zinc-900'
          )}
        >
          <span>View All {hasPurchases ? 'Purchases' : 'Transactions'}</span>
          <ArrowRight className='w-3.5 h-3.5' />
        </button>
      </div>
    </div>
  )
}
</file>

<file path="src/components/ui/kokonutui/list-03.tsx">
import {cn} from '@/lib/utils'
import {
  Calendar,
  Users,
  FileText,
  type LucideIcon,
  Clock,
  ArrowRight,
  CheckCircle2,
  Timer,
  AlertCircle,
  PiggyBank,
  TrendingUp,
  CreditCard,
  Building,
} from 'lucide-react'
import React from 'react'
import type {Vendor} from '@/services/intuit/types'
interface ListItem {
  id: string
  title: string
  subtitle: string
  icon: LucideIcon
  iconStyle: string
  date: string
  time?: string
  amount?: string
  status: 'pending' | 'in-progress' | 'completed'
  progress?: number
}
interface List03Props {
  items?: ListItem[]
  vendors?: Vendor[]
  className?: string
}
const iconStyles = {
  savings: 'bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100',
  investment: 'bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100',
  debt: 'bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100',
}
const statusConfig = {
  pending: {
    icon: Timer,
    class: 'text-amber-600 dark:text-amber-400',
    bg: 'bg-amber-100 dark:bg-amber-900/30',
  },
  'in-progress': {
    icon: AlertCircle,
    class: 'text-blue-600 dark:text-blue-400',
    bg: 'bg-blue-100 dark:bg-blue-900/30',
  },
  completed: {
    icon: CheckCircle2,
    class: 'text-emerald-600 dark:text-emerald-400',
    bg: 'bg-emerald-100 dark:bg-emerald-900/30',
  },
}
const ITEMS: ListItem[] = [
  {
    id: '1',
    title: 'Emergency Fund',
    subtitle: '3 months of expenses saved',
    icon: PiggyBank,
    iconStyle: 'savings',
    date: 'Target: Dec 2024',
    amount: '$15,000',
    status: 'in-progress',
    progress: 65,
  },
  {
    id: '2',
    title: 'Stock Portfolio',
    subtitle: 'Tech sector investment plan',
    icon: TrendingUp,
    iconStyle: 'investment',
    date: 'Target: Jun 2024',
    amount: '$50,000',
    status: 'pending',
    progress: 30,
  },
  {
    id: '3',
    title: 'Debt Repayment',
    subtitle: 'Student loan payoff plan',
    icon: CreditCard,
    iconStyle: 'debt',
    date: 'Target: Mar 2025',
    amount: '$25,000',
    status: 'in-progress',
    progress: 45,
  },
]
export default function List03({
  items = ITEMS,
  vendors = [],
  className,
}: List03Props) {
  // If vendors are provided, use them instead of the default items
  const hasVendors = vendors && vendors.length > 0
  // Convert vendors to a format suitable for display
  const vendorItems = hasVendors
    ? vendors.map((vendor) => ({
        id: vendor.Id || '',
        title: vendor.DisplayName,
        subtitle: vendor.CompanyName || 'Vendor',
        icon: Building,
        iconStyle: 'savings',
        date: vendor.PrintOnCheckName || '',
        amount: vendor.Balance
          ? new Intl.NumberFormat('en-US', {
              style: 'currency',
              currency: 'USD',
            }).format(vendor.Balance)
          : '$0.00',
        status: vendor.Active
          ? 'completed'
          : ('pending' as 'pending' | 'in-progress' | 'completed'),
        email: vendor.PrimaryEmailAddr?.Address,
        phone: vendor.PrimaryPhone?.FreeFormNumber,
      }))
    : []
  return (
    <div className={cn('w-full overflow-x-auto scrollbar-none', className)}>
      <div className='flex gap-3 min-w-full p-1'>
        {hasVendors
          ? // Render vendors from QuickBooks API
            vendorItems.map((vendor) => (
              <div
                key={vendor.id}
                className={cn(
                  'flex flex-col',
                  'w-[280px] shrink-0',
                  'bg-zinc-900/70',
                  'rounded-xl',
                  'border border-zinc-800',
                  'hover:border-zinc-700',
                  'transition-all duration-200',
                  'shadow-sm backdrop-blur-xl'
                )}
              >
                <div className='p-4 space-y-3'>
                  <div className='flex items-start justify-between'>
                    <div
                      className={cn(
                        'p-2 rounded-lg',
                        'bg-zinc-100 dark:bg-zinc-800'
                      )}
                    >
                      <Building className='w-4 h-4 text-zinc-900 dark:text-zinc-100' />
                    </div>
                    <div
                      className={cn(
                        'px-2 py-1 rounded-full text-xs font-medium flex items-center gap-1.5',
                        vendor.status === 'completed'
                          ? 'bg-emerald-100 dark:bg-emerald-900/30 text-emerald-600 dark:text-emerald-400'
                          : 'bg-amber-100 dark:bg-amber-900/30 text-amber-600 dark:text-amber-400'
                      )}
                    >
                      {vendor.status === 'completed' ? (
                        <CheckCircle2 className='w-3.5 h-3.5' />
                      ) : (
                        <Timer className='w-3.5 h-3.5' />
                      )}
                      {vendor.status === 'completed' ? 'Active' : 'Inactive'}
                    </div>
                  </div>
                  <div>
                    <h3 className='text-sm font-medium text-zinc-900 dark:text-zinc-100 mb-1'>
                      {vendor.title}
                    </h3>
                    <p className='text-xs text-zinc-600 dark:text-zinc-400 line-clamp-2'>
                      {vendor.subtitle}
                    </p>
                  </div>
                  <div className='flex items-center gap-1.5'>
                    <span className='text-sm font-medium text-zinc-900 dark:text-zinc-100'>
                      {vendor.amount}
                    </span>
                    <span className='text-xs text-zinc-600 dark:text-zinc-400'>
                      balance
                    </span>
                  </div>
                  {vendor.email && (
                    <div className='flex items-center text-xs text-zinc-600 dark:text-zinc-400'>
                      <span className='truncate'>Email: {vendor.email}</span>
                    </div>
                  )}
                  {vendor.phone && (
                    <div className='flex items-center text-xs text-zinc-600 dark:text-zinc-400'>
                      <span>Phone: {vendor.phone}</span>
                    </div>
                  )}
                </div>
                <div className='mt-auto border-t border-zinc-800'>
                  <button
                    type='button'
                    className={cn(
                      'w-full flex items-center justify-center gap-2',
                      'py-2.5 px-3',
                      'text-xs font-medium',
                      'text-zinc-600 dark:text-zinc-400',
                      'hover:text-zinc-900 dark:hover:text-zinc-100',
                      'hover:bg-zinc-100 dark:hover:bg-zinc-800/50',
                      'transition-colors duration-200'
                    )}
                  >
                    View Details
                    <ArrowRight className='w-3.5 h-3.5' />
                  </button>
                </div>
              </div>
            ))
          : // Render default items if no vendors
            'No vendors found'}
      </div>
    </div>
  )
}
</file>

<file path="src/components/ui/kokonutui/profile-01.tsx">
import {SignOutButton} from '@clerk/nextjs'
import {LogOut, MoveUpRight, Settings, CreditCard, FileText} from 'lucide-react'
import Image from 'next/image'
import Link from 'next/link'
interface MenuItem {
  label: string
  value?: string
  href: string
  icon?: React.ReactNode
  external?: boolean
}
interface Profile01Props {
  name: string
  role: string
  avatar: string
  subscription?: string
}
export interface ClerkUser {
  id?: string
  firstName?: string | null
  lastName?: string | null
  fullName?: string | null
  imageUrl?: string
  emailAddresses?: Array<{emailAddress: string}>
}
const defaultProfile = {
  name: 'Eugene An',
  role: 'Prompt Engineer',
  avatar:
    'https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-02-albo9B0tWOSLXCVZh9rX9KFxXIVWMr.png',
  subscription: 'Free Trial',
} satisfies Required<Profile01Props>
export default function Profile01({
  name = defaultProfile.name,
  role = defaultProfile.role,
  avatar = defaultProfile.avatar,
  subscription = defaultProfile.subscription,
  user,
}: Partial<Profile01Props> & {user?: ClerkUser} = defaultProfile) {
  const menuItems: MenuItem[] = [
    {
      label: 'Subscription',
      value: subscription,
      href: '#',
      icon: <CreditCard className='w-4 h-4' />,
      external: false,
    },
    {
      label: 'Settings',
      href: '#',
      icon: <Settings className='w-4 h-4' />,
    },
    {
      label: 'Terms & Policies',
      href: '#',
      icon: <FileText className='w-4 h-4' />,
      external: true,
    },
  ]
  // Use user data if available, otherwise fall back to props/defaults
  const displayName =
    user?.fullName || user?.firstName
      ? `${user?.firstName || ''} ${user?.lastName || ''}`.trim()
      : name
  const displayRole = user?.emailAddresses?.[0]?.emailAddress || role
  const displayAvatar = user?.imageUrl || avatar
  return (
    <div className='w-full max-w-sm mx-auto'>
      <div className='relative overflow-hidden rounded-2xl border border-zinc-200 dark:border-zinc-800'>
        <div className='relative px-6 pt-12 pb-6'>
          <div className='flex items-center gap-4 mb-8'>
            <div className='relative shrink-0'>
              <Image
                src={displayAvatar}
                alt={displayName}
                width={42}
                height={42}
                className='rounded-full ring-4 ring-white dark:ring-zinc-900 object-cover'
              />
              <div className='absolute bottom-0 right-0 w-4 h-4 rounded-full bg-emerald-500 ring-2 ring-white dark:ring-zinc-900' />
            </div>
            {/* Profile Info */}
            <div className='flex-1'>
              <h2 className='text-lg font-semibold text-zinc-900 dark:text-zinc-100'>
                {displayName}
              </h2>
              <p className='text-zinc-600 dark:text-zinc-400'>{displayRole}</p>
            </div>
          </div>
          <div className='h-px bg-zinc-200 dark:bg-zinc-800 my-6' />
          <div className='space-y-2'>
            {/* {menuItems.map((item) => (
              <Link
                key={item.label}
                href={item.href}
                className='flex items-center justify-between p-2 
                                    hover:bg-zinc-50 dark:hover:bg-zinc-800/50 
                                    rounded-lg transition-colors duration-200'
              >
                <div className='flex items-center gap-2'>
                  {item.icon}
                  <span className='text-sm font-medium text-zinc-900 dark:text-zinc-100'>
                    {item.label}
                  </span>
                </div>
                <div className='flex items-center'>
                  {item.value && (
                    <span className='text-sm text-zinc-500 dark:text-zinc-400 mr-2'>
                      {item.value}
                    </span>
                  )}
                  {item.external && <MoveUpRight className='w-4 h-4' />}
                </div>
              </Link>
            ))} */}
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/ui/kokonutui/profile-02.tsx">
import { Button } from "@/components/ui/button";
import { Mail, Link as LinkIcon, MapPin, ExternalLink } from "lucide-react";
import Image from "next/image";
interface Profile02Props {
    name?: string;
    role?: string;
    avatar?: string;
    location?: string;
    email?: string;
    website?: string;
    bio?: string;
}
const defaultProfile = {
    name: "Alex Thompson",
    role: "Product Designer",
    avatar: "https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-02-albo9B0tWOSLXCVZh9rX9KFxXIVWMr.png",
    location: "San Francisco, CA",
    email: "hello@kokonutui.com",
    website: "https://kokonutui.com/",
    bio: "Designing interfaces that bridge the gap between complexity and simplicity.",
} satisfies Required<Profile02Props>;
export default function Profile02({
    name = defaultProfile.name,
    role = defaultProfile.role,
    avatar = defaultProfile.avatar,
    location = defaultProfile.location,
    email = defaultProfile.email,
    website = defaultProfile.website,
    bio = defaultProfile.bio,
}: Partial<Profile02Props> = defaultProfile) {
    return (
        <div className="w-full max-w-md mx-auto">
            <div className="p-6 rounded-2xl border border-zinc-200 dark:border-zinc-800 bg-white/50 dark:bg-zinc-900/50 backdrop-blur-xs">
                <div className="flex items-start gap-5">
                    <Image
                        src={avatar}
                        alt={name}
                        width={80}
                        height={80}
                        className="rounded-lg object-cover ring-1 ring-zinc-200 dark:ring-zinc-800"
                    />
                    <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between gap-2">
                            <div>
                                <h2 className="text-lg font-medium text-zinc-900 dark:text-zinc-100">
                                    {name}
                                </h2>
                                <p className="text-sm text-zinc-500 dark:text-zinc-400">
                                    {role}
                                </p>
                            </div>
                            <Button variant="outline" size="sm" asChild>
                                <a href={`mailto:${email}`}>
                                    <Mail className="w-4 h-4" />
                                </a>
                            </Button>
                        </div>
                        <div className="mt-4 space-y-2">
                            <div className="flex items-center gap-2 text-sm text-zinc-600 dark:text-zinc-400">
                                <MapPin className="w-4 h-4" />
                                {location}
                            </div>
                            <div className="flex items-center gap-2 text-sm text-zinc-600 dark:text-zinc-400">
                                <Mail className="w-4 h-4" />
                                <a
                                    href={`mailto:${email}`}
                                    className="hover:text-zinc-900 dark:hover:text-zinc-100 transition-colors"
                                >
                                    {email}
                                </a>
                            </div>
                            <div className="flex items-center gap-2 text-sm text-zinc-600 dark:text-zinc-400">
                                <LinkIcon className="w-4 h-4" />
                                <a
                                    href={`https://${website}`}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="hover:text-zinc-900 dark:hover:text-zinc-100 transition-colors flex items-center gap-1"
                                >
                                    {website}
                                    <ExternalLink className="w-3 h-3" />
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                <div className="mt-6">
                    <p className="text-sm text-zinc-600 dark:text-zinc-400 leading-relaxed">
                        {bio}
                    </p>
                </div>
            </div>
        </div>
    );
}
</file>

<file path="src/components/ui/kokonutui/top-nav.tsx">
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import Image from "next/image";
import { Bell, Sun, Moon, ChevronRight } from "lucide-react";
import Profile01 from "./profile-01";
import Link from "next/link";
interface BreadcrumbItem {
    label: string;
    href?: string;
}
export default function TopNav() {
    const breadcrumbs: BreadcrumbItem[] = [
        { label: "kokonutUI", href: "#" },
        { label: "dashboard", href: "#" },
    ];
    return (
        <nav className="px-3 sm:px-6 flex items-center justify-between bg-white dark:bg-[#0F0F12] border-b border-gray-200 dark:border-[#1F1F23] h-full">
            <div className="font-medium text-sm hidden sm:flex items-center space-x-1 truncate max-w-[300px]">
                {breadcrumbs.map((item, index) => (
                    <div key={item.label} className="flex items-center">
                        {index > 0 && (
                            <ChevronRight className="h-4 w-4 text-gray-500 dark:text-gray-400 mx-1" />
                        )}
                        {item.href ? (
                            <Link
                                href={item.href}
                                className="text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
                            >
                                {item.label}
                            </Link>
                        ) : (
                            <span className="text-gray-900 dark:text-gray-100">
                                {item.label}
                            </span>
                        )}
                    </div>
                ))}
            </div>
            <div className="flex items-center gap-2 sm:gap-4 ml-auto sm:ml-0">
                <button
                    type="button"
                    className="p-1.5 sm:p-2 hover:bg-gray-100 dark:hover:bg-[#1F1F23] rounded-full transition-colors"
                >
                    <Bell className="h-4 w-4 sm:h-5 sm:w-5 text-gray-600 dark:text-gray-300" />
                </button>
                <button
                    type="button"
                    className="relative p-1.5 sm:p-2 hover:bg-gray-100 dark:hover:bg-[#1F1F23] rounded-full transition-colors"
                >
                    <Sun className="h-4 w-4 sm:h-5 sm:w-5 text-gray-600 dark:text-gray-300 transition-all scale-100 rotate-0 dark:scale-0 dark:rotate-90" />
                    <Moon className="absolute h-4 w-4 sm:h-5 sm:w-5 text-gray-600 dark:text-gray-300 transition-all scale-0 -rotate-90 dark:scale-100 dark:rotate-0 left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2" />
                    <span className="sr-only">Toggle theme</span>
                </button>
                <DropdownMenu>
                    <DropdownMenuTrigger className="focus:outline-none">
                        <Image
                            src="https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-01-n0x8HFv8EUetf9z6ht0wScJKoTHqf8.png"
                            alt="User avatar"
                            width={28}
                            height={28}
                            className="rounded-full ring-2 ring-gray-200 dark:ring-[#2B2B30] sm:w-8 sm:h-8 cursor-pointer"
                        />
                    </DropdownMenuTrigger>
                    <DropdownMenuContent
                        align="end"
                        sideOffset={8}
                        className="w-[280px] sm:w-80 bg-background border-border rounded-lg shadow-lg"
                    >
                        <Profile01 avatar="https://ferf1mheo22r9ira.public.blob.vercel-storage.com/avatar-01-n0x8HFv8EUetf9z6ht0wScJKoTHqf8.png" />
                    </DropdownMenuContent>
                </DropdownMenu>
            </div>
        </nav>
    );
}
</file>

<file path="src/components/ui/kokonutui/vercel-v0-chat.tsx">
'use client'
import {useState, useRef, useEffect} from 'react'
import {Textarea} from '@/components/ui/textarea'
import {cn} from '@/lib/utils'
import {useAutoResizeTextarea} from '@/hooks/use-auto-resize-textarea'
import {
  ImageIcon,
  FileUp,
  Figma,
  MonitorIcon,
  CircleUserRound,
  ArrowUpIcon,
  Paperclip,
  PlusIcon,
  Loader2,
} from 'lucide-react'
import Image from 'next/image'
import {useChat} from '@ai-sdk/react'
import type {Message} from 'ai'
export function VercelV0Chat() {
  const {messages, input, handleInputChange, handleSubmit, isLoading} = useChat(
    {
      api: '/api/ai/chat',
    }
  )
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const [files, setFiles] = useState<FileList | undefined>(undefined)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const {textareaRef, adjustHeight} = useAutoResizeTextarea({
    minHeight: 60,
    maxHeight: 200,
  })
  // Scroll to bottom when messages change
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({behavior: 'smooth'})
    }
  }, [])
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      if (input.trim()) {
        handleSubmit(e as unknown as React.FormEvent<HTMLFormElement>)
        adjustHeight(true)
      }
    }
  }
  // Helper function to render tool calls
  const renderToolCalls = (message: Message) => {
    if (!message.content || typeof message.content !== 'string') return null
    // For now, just display the message content
    return (
      <p className='text-sm text-white whitespace-pre-wrap'>
        {message.content}
      </p>
    )
  }
  return (
    <div className='flex flex-col items-center w-full max-w-4xl mx-auto p-4 space-y-4 sm:space-y-8'>
      <div className='w-full'>
        {/* Chat Messages */}
        <div className='mb-4 max-h-[600px] overflow-y-auto bg-neutral-900 rounded-xl border border-neutral-800 p-4'>
          {messages.length === 0 ? (
            <div className='text-neutral-500 text-center py-8'>
              No messages yet. Ask me about QuickBooks or Sage data!
            </div>
          ) : (
            <div className='flex flex-col space-y-4'>
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={cn(
                    'flex flex-col p-3 rounded-lg',
                    message.role === 'user'
                      ? 'bg-blue-600 text-white self-end max-w-[80%]'
                      : 'bg-neutral-800 text-white self-start max-w-[80%]'
                  )}
                >
                  <div className='font-semibold mb-1'>
                    {message.role === 'user' ? 'You' : 'AI Assistant'}
                  </div>
                  {message.role === 'assistant' ? (
                    renderToolCalls(message)
                  ) : (
                    <p className='text-sm whitespace-pre-wrap'>
                      {message.content}
                    </p>
                  )}
                  <div>
                    {message?.experimental_attachments
                      ?.filter((attachment) =>
                        attachment?.contentType?.startsWith('image/')
                      )
                      .map((attachment, index) => (
                        <Image
                          key={`${attachment.url}-${index}`}
                          src={attachment.url}
                          width={500}
                          height={500}
                          alt={attachment.name ?? `attachment-${index}`}
                        />
                      ))}
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className='bg-neutral-800 text-white self-start p-3 rounded-lg flex items-center space-x-2 max-w-[80%]'>
                  <Loader2 className='w-4 h-4 animate-spin' />
                  <span>AI is thinking...</span>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>
          )}
        </div>
        {/* Input Area */}
        <form
          onSubmit={(event) => {
            handleSubmit(event, {
              experimental_attachments: files,
            })
            setFiles(undefined)
            if (fileInputRef.current) {
              fileInputRef.current.value = ''
            }
          }}
          className='relative bg-neutral-900 rounded-xl border border-neutral-800'
        >
          <div className='overflow-y-auto'>
            <Textarea
              ref={textareaRef}
              value={input}
              onChange={(e) => {
                handleInputChange(e)
                adjustHeight()
              }}
              onKeyDown={handleKeyDown}
              placeholder='Ask about QuickBooks or Sage data...'
              className={cn(
                'w-full px-4 py-3',
                'resize-none',
                'bg-transparent',
                'border-none',
                'text-white text-sm',
                'focus:outline-none',
                'focus-visible:ring-0 focus-visible:ring-offset-0',
                'placeholder:text-neutral-500 placeholder:text-sm',
                'min-h-[60px]'
              )}
              style={{
                overflow: 'hidden',
              }}
            />
          </div>
          <div className='flex items-center justify-between p-3'>
            <div className='flex items-center gap-2'>
              <button
                type='button'
                className='group p-2 hover:bg-neutral-800 rounded-lg transition-colors flex items-center gap-1'
              >
                <Paperclip className='w-4 h-4 text-white' />
                <input
                  type='file'
                  className='opacity-0 w-full'
                  onChange={(event) => {
                    if (event.target.files) {
                      setFiles(event.target.files)
                    }
                  }}
                  multiple
                  ref={fileInputRef}
                />
                <span className='text-xs text-zinc-400 hidden group-hover:inline transition-opacity'>
                  Attach
                </span>
              </button>
            </div>
            <div className='flex items-center gap-2'>
              <button
                type='button'
                className='px-2 py-1 rounded-lg text-sm text-zinc-400 transition-colors border border-dashed border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1'
              >
                <PlusIcon className='w-4 h-4' />
                Project
              </button>
              <button
                type='submit'
                className={cn(
                  'px-1.5 py-1.5 rounded-lg text-sm transition-colors border border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1',
                  input.trim() ? 'bg-white text-black' : 'text-zinc-400'
                )}
                disabled={isLoading}
              >
                {isLoading ? (
                  <Loader2 className='w-4 h-4 animate-spin' />
                ) : (
                  <ArrowUpIcon
                    className={cn(
                      'w-4 h-4',
                      input.trim() ? 'text-black' : 'text-zinc-400'
                    )}
                  />
                )}
                <span className='sr-only'>Send</span>
              </button>
            </div>
          </div>
        </form>
        <div className='mt-4 -mx-4 px-4 sm:mx-0 sm:px-0'>
          <div className='flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3 sm:overflow-x-auto sm:pb-2 sm:justify-center scrollbar-hide'>
            <ActionButton
              icon={<ImageIcon className='w-4 h-4' />}
              label='Show QuickBooks Customers'
              onClick={() => {
                const fakeEvent = {
                  target: {value: 'Show me the top QuickBooks customers'},
                }
                handleInputChange(
                  fakeEvent as React.ChangeEvent<HTMLTextAreaElement>
                )
                setTimeout(() => {
                  const fakeFormEvent = {preventDefault: () => {}}
                  handleSubmit(
                    fakeFormEvent as React.FormEvent<HTMLFormElement>
                  )
                }, 100)
              }}
            />
            <ActionButton
              icon={<FileUp className='w-4 h-4' />}
              label='Recent Invoices'
              onClick={() => {
                const fakeEvent = {
                  target: {value: 'Show me recent unpaid invoices'},
                }
                handleInputChange(
                  fakeEvent as React.ChangeEvent<HTMLTextAreaElement>
                )
                setTimeout(() => {
                  const fakeFormEvent = {preventDefault: () => {}}
                  handleSubmit(
                    fakeFormEvent as React.FormEvent<HTMLFormElement>
                  )
                }, 100)
              }}
            />
            <ActionButton
              icon={<MonitorIcon className='w-4 h-4' />}
              label='Sage Inventory'
              onClick={() => {
                const fakeEvent = {
                  target: {value: 'Check inventory for product ID 1578894'},
                }
                handleInputChange(
                  fakeEvent as React.ChangeEvent<HTMLTextAreaElement>
                )
                setTimeout(() => {
                  const fakeFormEvent = {preventDefault: () => {}}
                  handleSubmit(
                    fakeFormEvent as React.FormEvent<HTMLFormElement>
                  )
                }, 100)
              }}
            />
            <ActionButton
              icon={<CircleUserRound className='w-4 h-4' />}
              label='Sage Products'
              onClick={() => {
                const fakeEvent = {
                  target: {value: 'List Flashlight products from Sage'},
                }
                handleInputChange(
                  fakeEvent as React.ChangeEvent<HTMLTextAreaElement>
                )
                setTimeout(() => {
                  const fakeFormEvent = {preventDefault: () => {}}
                  handleSubmit(
                    fakeFormEvent as React.FormEvent<HTMLFormElement>
                  )
                }, 100)
              }}
            />
          </div>
        </div>
      </div>
    </div>
  )
}
interface ActionButtonProps {
  icon: React.ReactNode
  label: string
  onClick?: () => void
}
function ActionButton({icon, label, onClick}: ActionButtonProps) {
  return (
    <button
      type='button'
      onClick={onClick}
      className='flex items-center gap-2 w-full sm:w-auto px-3 sm:px-4 py-2 bg-neutral-900 hover:bg-neutral-800 rounded-full border border-neutral-800 text-neutral-400 hover:text-white transition-colors whitespace-nowrap flex-shrink-0'
    >
      {icon}
      <span className='text-xs'>{label}</span>
    </button>
  )
}
export default VercelV0Chat
</file>

<file path="src/components/ui/accordion.tsx">
"use client"
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}
function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  )
}
function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}
function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}
export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/alert-dialog.tsx">
"use client"
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"
function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}
function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}
function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}
function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}
function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}
function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}
function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}
function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}
function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}
function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}
export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}
function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}
function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}
export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/aspect-ratio.tsx">
"use client"
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"
function AspectRatio({
  ...props
}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {
  return <AspectRatioPrimitive.Root data-slot="aspect-ratio" {...props} />
}
export { AspectRatio }
</file>

<file path="src/components/ui/avatar.tsx">
"use client"
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"
import { cn } from "@/lib/utils"
function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}
function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}
function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}
export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/70",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"
  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}
export { Badge, badgeVariants }
</file>

<file path="src/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"
import { cn } from "@/lib/utils"
function Breadcrumb({ ...props }: React.ComponentProps<"nav">) {
  return <nav aria-label="breadcrumb" data-slot="breadcrumb" {...props} />
}
function BreadcrumbList({ className, ...props }: React.ComponentProps<"ol">) {
  return (
    <ol
      data-slot="breadcrumb-list"
      className={cn(
        "text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5",
        className
      )}
      {...props}
    />
  )
}
function BreadcrumbItem({ className, ...props }: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="breadcrumb-item"
      className={cn("inline-flex items-center gap-1.5", className)}
      {...props}
    />
  )
}
function BreadcrumbLink({
  asChild,
  className,
  ...props
}: React.ComponentProps<"a"> & {
  asChild?: boolean
}) {
  const Comp = asChild ? Slot : "a"
  return (
    <Comp
      data-slot="breadcrumb-link"
      className={cn("hover:text-foreground transition-colors", className)}
      {...props}
    />
  )
}
function BreadcrumbPage({ className, ...props }: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="breadcrumb-page"
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn("text-foreground font-normal", className)}
      {...props}
    />
  )
}
function BreadcrumbSeparator({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="breadcrumb-separator"
      role="presentation"
      aria-hidden="true"
      className={cn("[&>svg]:size-3.5", className)}
      {...props}
    >
      {children ?? <ChevronRight />}
    </li>
  )
}
function BreadcrumbEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="breadcrumb-ellipsis"
      role="presentation"
      aria-hidden="true"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontal className="size-4" />
      <span className="sr-only">More</span>
    </span>
  )
}
export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="src/components/ui/button.tsx">
'use client'
import {type ButtonHTMLAttributes, forwardRef} from 'react'
import {cn} from '@/lib/utils'
export interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?:
    | 'default'
    | 'destructive'
    | 'outline'
    | 'secondary'
    | 'ghost'
    | 'link'
  size?: 'default' | 'sm' | 'lg' | 'icon'
}
export const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({className, variant = 'default', size = 'default', ...props}, ref) => {
    return (
      <button
        className={cn(
          'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none',
          // Variants
          variant === 'default' && 'bg-blue-600 text-white hover:bg-blue-700',
          variant === 'destructive' && 'bg-red-500 text-white hover:bg-red-600',
          variant === 'outline' && 'border border-gray-200 hover:bg-gray-100',
          variant === 'secondary' &&
            'bg-gray-200 text-gray-900 hover:bg-gray-300',
          variant === 'ghost' && 'hover:bg-gray-100',
          variant === 'link' &&
            'underline-offset-4 hover:underline text-blue-600',
          // Sizes
          size === 'default' && 'h-10 py-2 px-4',
          size === 'sm' && 'h-8 px-3 text-xs',
          size === 'lg' && 'h-12 px-8 text-base',
          size === 'icon' && 'h-10 w-10',
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'
</file>

<file path="src/components/ui/calendar.tsx">
'use client'
import type * as React from 'react'
import {ChevronLeft, ChevronRight} from 'lucide-react'
import {DayPicker} from 'react-day-picker'
import {cn} from '@/lib/utils'
function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: React.ComponentProps<typeof DayPicker>) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn('p-3', className)}
      classNames={{
        months: 'flex flex-col sm:flex-row gap-2',
        month: 'flex flex-col gap-4',
        caption: 'flex justify-center pt-1 relative items-center w-full',
        caption_label: 'text-sm font-medium',
        nav: 'flex items-center gap-1',
        nav_button: cn(
          {variant: 'outline'},
          'size-7 bg-transparent p-0 opacity-50 hover:opacity-100'
        ),
        nav_button_previous: 'absolute left-1',
        nav_button_next: 'absolute right-1',
        table: 'w-full border-collapse space-x-1',
        head_row: 'flex',
        head_cell:
          'text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]',
        row: 'flex w-full mt-2',
        cell: cn(
          'relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-range-end)]:rounded-r-md',
          props.mode === 'range'
            ? '[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md'
            : '[&:has([aria-selected])]:rounded-md'
        ),
        day: cn(
          {variant: 'ghost'},
          'size-8 p-0 font-normal aria-selected:opacity-100'
        ),
        day_range_start:
          'day-range-start aria-selected:bg-primary aria-selected:text-primary-foreground',
        day_range_end:
          'day-range-end aria-selected:bg-primary aria-selected:text-primary-foreground',
        day_selected:
          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',
        day_today: 'bg-accent text-accent-foreground',
        day_outside:
          'day-outside text-muted-foreground aria-selected:text-muted-foreground',
        day_disabled: 'text-muted-foreground opacity-50',
        day_range_middle:
          'aria-selected:bg-accent aria-selected:text-accent-foreground',
        day_hidden: 'invisible',
        ...classNames,
      }}
      components={{
        IconLeft: ({className, ...props}) => (
          <ChevronLeft className={cn('size-4', className)} {...props} />
        ),
        IconRight: ({className, ...props}) => (
          <ChevronRight className={cn('size-4', className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
export {Calendar}
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}
function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-[data-slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}
function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}
function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}
function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}
function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}
export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="src/components/ui/carousel.tsx">
"use client"
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]
type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}
type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps
const CarouselContext = React.createContext<CarouselContextProps | null>(null)
function useCarousel() {
  const context = React.useContext(CarouselContext)
  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }
  return context
}
function Carousel({
  orientation = "horizontal",
  opts,
  setApi,
  plugins,
  className,
  children,
  ...props
}: React.ComponentProps<"div"> & CarouselProps) {
  const [carouselRef, api] = useEmblaCarousel(
    {
      ...opts,
      axis: orientation === "horizontal" ? "x" : "y",
    },
    plugins
  )
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)
  const onSelect = React.useCallback((api: CarouselApi) => {
    if (!api) return
    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])
  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])
  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])
  const handleKeyDown = React.useCallback(
    (event: React.KeyboardEvent<HTMLDivElement>) => {
      if (event.key === "ArrowLeft") {
        event.preventDefault()
        scrollPrev()
      } else if (event.key === "ArrowRight") {
        event.preventDefault()
        scrollNext()
      }
    },
    [scrollPrev, scrollNext]
  )
  React.useEffect(() => {
    if (!api || !setApi) return
    setApi(api)
  }, [api, setApi])
  React.useEffect(() => {
    if (!api) return
    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)
    return () => {
      api?.off("select", onSelect)
    }
  }, [api, onSelect])
  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}
    >
      <div
        onKeyDownCapture={handleKeyDown}
        className={cn("relative", className)}
        role="region"
        aria-roledescription="carousel"
        data-slot="carousel"
        {...props}
      >
        {children}
      </div>
    </CarouselContext.Provider>
  )
}
function CarouselContent({ className, ...props }: React.ComponentProps<"div">) {
  const { carouselRef, orientation } = useCarousel()
  return (
    <div
      ref={carouselRef}
      className="overflow-hidden"
      data-slot="carousel-content"
    >
      <div
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
}
function CarouselItem({ className, ...props }: React.ComponentProps<"div">) {
  const { orientation } = useCarousel()
  return (
    <div
      role="group"
      aria-roledescription="slide"
      data-slot="carousel-item"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
}
function CarouselPrevious({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()
  return (
    <Button
      data-slot="carousel-previous"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -left-12 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
}
function CarouselNext({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollNext, canScrollNext } = useCarousel()
  return (
    <Button
      data-slot="carousel-next"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -right-12 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight />
      <span className="sr-only">Next slide</span>
    </Button>
  )
}
export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/components/ui/chart.tsx">
"use client"
import * as React from "react"
import * as RechartsPrimitive from "recharts"
import { cn } from "@/lib/utils"
// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const
export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}
type ChartContextProps = {
  config: ChartConfig
}
const ChartContext = React.createContext<ChartContextProps | null>(null)
function useChart() {
  const context = React.useContext(ChartContext)
  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }
  return context
}
function ChartContainer({
  id,
  className,
  children,
  config,
  ...props
}: React.ComponentProps<"div"> & {
  config: ChartConfig
  children: React.ComponentProps<
    typeof RechartsPrimitive.ResponsiveContainer
  >["children"]
}) {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`
  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-slot="chart"
        data-chart={chartId}
        className={cn(
          "[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
}
const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )
  if (!colorConfig.length) {
    return null
  }
  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}
const ChartTooltip = RechartsPrimitive.Tooltip
function ChartTooltipContent({
  active,
  payload,
  className,
  indicator = "dot",
  hideLabel = false,
  hideIndicator = false,
  label,
  labelFormatter,
  labelClassName,
  formatter,
  color,
  nameKey,
  labelKey,
}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
  React.ComponentProps<"div"> & {
    hideLabel?: boolean
    hideIndicator?: boolean
    indicator?: "line" | "dot" | "dashed"
    nameKey?: string
    labelKey?: string
  }) {
  const { config } = useChart()
  const tooltipLabel = React.useMemo(() => {
    if (hideLabel || !payload?.length) {
      return null
    }
    const [item] = payload
    const key = `${labelKey || item?.dataKey || item?.name || "value"}`
    const itemConfig = getPayloadConfigFromPayload(config, item, key)
    const value =
      !labelKey && typeof label === "string"
        ? config[label as keyof typeof config]?.label || label
        : itemConfig?.label
    if (labelFormatter) {
      return (
        <div className={cn("font-medium", labelClassName)}>
          {labelFormatter(value, payload)}
        </div>
      )
    }
    if (!value) {
      return null
    }
    return <div className={cn("font-medium", labelClassName)}>{value}</div>
  }, [
    label,
    labelFormatter,
    payload,
    hideLabel,
    labelClassName,
    config,
    labelKey,
  ])
  if (!active || !payload?.length) {
    return null
  }
  const nestLabel = payload.length === 1 && indicator !== "dot"
  return (
    <div
      className={cn(
        "border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl",
        className
      )}
    >
      {!nestLabel ? tooltipLabel : null}
      <div className="grid gap-1.5">
        {payload.map((item, index) => {
          const key = `${nameKey || item.name || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)
          const indicatorColor = color || item.payload.fill || item.color
          return (
            <div
              key={item.dataKey}
              className={cn(
                "[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5",
                indicator === "dot" && "items-center"
              )}
            >
              {formatter && item?.value !== undefined && item.name ? (
                formatter(item.value, item.name, item, index, item.payload)
              ) : (
                <>
                  {itemConfig?.icon ? (
                    <itemConfig.icon />
                  ) : (
                    !hideIndicator && (
                      <div
                        className={cn(
                          "shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)",
                          {
                            "h-2.5 w-2.5": indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-[1.5px] border-dashed bg-transparent":
                              indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed",
                          }
                        )}
                        style={
                          {
                            "--color-bg": indicatorColor,
                            "--color-border": indicatorColor,
                          } as React.CSSProperties
                        }
                      />
                    )
                  )}
                  <div
                    className={cn(
                      "flex flex-1 justify-between leading-none",
                      nestLabel ? "items-end" : "items-center"
                    )}
                  >
                    <div className="grid gap-1.5">
                      {nestLabel ? tooltipLabel : null}
                      <span className="text-muted-foreground">
                        {itemConfig?.label || item.name}
                      </span>
                    </div>
                    {item.value && (
                      <span className="text-foreground font-mono font-medium tabular-nums">
                        {item.value.toLocaleString()}
                      </span>
                    )}
                  </div>
                </>
              )}
            </div>
          )
        })}
      </div>
    </div>
  )
}
const ChartLegend = RechartsPrimitive.Legend
function ChartLegendContent({
  className,
  hideIcon = false,
  payload,
  verticalAlign = "bottom",
  nameKey,
}: React.ComponentProps<"div"> &
  Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
    hideIcon?: boolean
    nameKey?: string
  }) {
  const { config } = useChart()
  if (!payload?.length) {
    return null
  }
  return (
    <div
      className={cn(
        "flex items-center justify-center gap-4",
        verticalAlign === "top" ? "pb-3" : "pt-3",
        className
      )}
    >
      {payload.map((item) => {
        const key = `${nameKey || item.dataKey || "value"}`
        const itemConfig = getPayloadConfigFromPayload(config, item, key)
        return (
          <div
            key={item.value}
            className={cn(
              "[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3"
            )}
          >
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color,
                }}
              />
            )}
            {itemConfig?.label}
          </div>
        )
      })}
    </div>
  )
}
// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }
  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined
  let configLabelKey: string = key
  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }
  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}
export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/components/ui/checkbox.tsx">
"use client"
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}
export { Checkbox }
</file>

<file path="src/components/ui/collapsible.tsx">
"use client"
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"
function Collapsible({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {
  return <CollapsiblePrimitive.Root data-slot="collapsible" {...props} />
}
function CollapsibleTrigger({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {
  return (
    <CollapsiblePrimitive.CollapsibleTrigger
      data-slot="collapsible-trigger"
      {...props}
    />
  )
}
function CollapsibleContent({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {
  return (
    <CollapsiblePrimitive.CollapsibleContent
      data-slot="collapsible-content"
      {...props}
    />
  )
}
export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/components/ui/command.tsx">
"use client"
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"
import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}
function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}
function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}
function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}
function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}
function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}
function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}
function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}
export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="src/components/ui/context-menu.tsx">
"use client"
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function ContextMenu({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {
  return <ContextMenuPrimitive.Root data-slot="context-menu" {...props} />
}
function ContextMenuTrigger({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {
  return (
    <ContextMenuPrimitive.Trigger data-slot="context-menu-trigger" {...props} />
  )
}
function ContextMenuGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {
  return (
    <ContextMenuPrimitive.Group data-slot="context-menu-group" {...props} />
  )
}
function ContextMenuPortal({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {
  return (
    <ContextMenuPrimitive.Portal data-slot="context-menu-portal" {...props} />
  )
}
function ContextMenuSub({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {
  return <ContextMenuPrimitive.Sub data-slot="context-menu-sub" {...props} />
}
function ContextMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {
  return (
    <ContextMenuPrimitive.RadioGroup
      data-slot="context-menu-radio-group"
      {...props}
    />
  )
}
function ContextMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.SubTrigger
      data-slot="context-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto" />
    </ContextMenuPrimitive.SubTrigger>
  )
}
function ContextMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {
  return (
    <ContextMenuPrimitive.SubContent
      data-slot="context-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}
function ContextMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {
  return (
    <ContextMenuPrimitive.Portal>
      <ContextMenuPrimitive.Content
        data-slot="context-menu-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </ContextMenuPrimitive.Portal>
  )
}
function ContextMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <ContextMenuPrimitive.Item
      data-slot="context-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function ContextMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {
  return (
    <ContextMenuPrimitive.CheckboxItem
      data-slot="context-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.CheckboxItem>
  )
}
function ContextMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {
  return (
    <ContextMenuPrimitive.RadioItem
      data-slot="context-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.RadioItem>
  )
}
function ContextMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.Label
      data-slot="context-menu-label"
      data-inset={inset}
      className={cn(
        "text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}
function ContextMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {
  return (
    <ContextMenuPrimitive.Separator
      data-slot="context-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function ContextMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="context-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}
export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="src/components/ui/dialog.tsx">
"use client"
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}
function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}
function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}
function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}
function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}
function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}
function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}
function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}
function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}
function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
</file>

<file path="src/components/ui/drawer.tsx">
"use client"
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"
import { cn } from "@/lib/utils"
function Drawer({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) {
  return <DrawerPrimitive.Root data-slot="drawer" {...props} />
}
function DrawerTrigger({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {
  return <DrawerPrimitive.Trigger data-slot="drawer-trigger" {...props} />
}
function DrawerPortal({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {
  return <DrawerPrimitive.Portal data-slot="drawer-portal" {...props} />
}
function DrawerClose({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Close>) {
  return <DrawerPrimitive.Close data-slot="drawer-close" {...props} />
}
function DrawerOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {
  return (
    <DrawerPrimitive.Overlay
      data-slot="drawer-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}
function DrawerContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Content>) {
  return (
    <DrawerPortal data-slot="drawer-portal">
      <DrawerOverlay />
      <DrawerPrimitive.Content
        data-slot="drawer-content"
        className={cn(
          "group/drawer-content bg-background fixed z-50 flex h-auto flex-col",
          "data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b",
          "data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t",
          "data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm",
          "data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm",
          className
        )}
        {...props}
      >
        <div className="bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block" />
        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  )
}
function DrawerHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="drawer-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}
function DrawerFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="drawer-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}
function DrawerTitle({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Title>) {
  return (
    <DrawerPrimitive.Title
      data-slot="drawer-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}
function DrawerDescription({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Description>) {
  return (
    <DrawerPrimitive.Description
      data-slot="drawer-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
"use client"
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}
function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}
function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}
function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}
function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}
function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}
function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}
function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}
function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}
function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}
function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}
export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}
</file>

<file path="src/components/ui/form.tsx">
"use client"
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"
import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"
const Form = FormProvider
type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}
const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)
const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}
const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)
  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }
  const { id } = itemContext
  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}
type FormItemContextValue = {
  id: string
}
const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)
function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()
  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}
function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()
  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}
function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}
function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()
  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children
  if (!body) {
    return null
  }
  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}
export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/hover-card.tsx">
"use client"
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"
import { cn } from "@/lib/utils"
function HoverCard({
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {
  return <HoverCardPrimitive.Root data-slot="hover-card" {...props} />
}
function HoverCardTrigger({
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {
  return (
    <HoverCardPrimitive.Trigger data-slot="hover-card-trigger" {...props} />
  )
}
function HoverCardContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {
  return (
    <HoverCardPrimitive.Portal data-slot="hover-card-portal">
      <HoverCardPrimitive.Content
        data-slot="hover-card-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </HoverCardPrimitive.Portal>
  )
}
export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="src/components/ui/input-otp.tsx">
"use client"
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { MinusIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function InputOTP({
  className,
  containerClassName,
  ...props
}: React.ComponentProps<typeof OTPInput> & {
  containerClassName?: string
}) {
  return (
    <OTPInput
      data-slot="input-otp"
      containerClassName={cn(
        "flex items-center gap-2 has-disabled:opacity-50",
        containerClassName
      )}
      className={cn("disabled:cursor-not-allowed", className)}
      {...props}
    />
  )
}
function InputOTPGroup({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="input-otp-group"
      className={cn("flex items-center", className)}
      {...props}
    />
  )
}
function InputOTPSlot({
  index,
  className,
  ...props
}: React.ComponentProps<"div"> & {
  index: number
}) {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}
  return (
    <div
      data-slot="input-otp-slot"
      data-active={isActive}
      className={cn(
        "data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink bg-foreground h-4 w-px duration-1000" />
        </div>
      )}
    </div>
  )
}
function InputOTPSeparator({ ...props }: React.ComponentProps<"div">) {
  return (
    <div data-slot="input-otp-separator" role="separator" {...props}>
      <MinusIcon />
    </div>
  )
}
export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}
export { Input }
</file>

<file path="src/components/ui/label.tsx">
"use client"
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cn } from "@/lib/utils"
function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}
export { Label }
</file>

<file path="src/components/ui/menubar.tsx">
"use client"
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Menubar({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Root>) {
  return (
    <MenubarPrimitive.Root
      data-slot="menubar"
      className={cn(
        "bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs",
        className
      )}
      {...props}
    />
  )
}
function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu data-slot="menubar-menu" {...props} />
}
function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group data-slot="menubar-group" {...props} />
}
function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal data-slot="menubar-portal" {...props} />
}
function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return (
    <MenubarPrimitive.RadioGroup data-slot="menubar-radio-group" {...props} />
  )
}
function MenubarTrigger({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {
  return (
    <MenubarPrimitive.Trigger
      data-slot="menubar-trigger"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none",
        className
      )}
      {...props}
    />
  )
}
function MenubarContent({
  className,
  align = "start",
  alignOffset = -4,
  sideOffset = 8,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Content>) {
  return (
    <MenubarPortal>
      <MenubarPrimitive.Content
        data-slot="menubar-content"
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] overflow-hidden rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </MenubarPortal>
  )
}
function MenubarItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <MenubarPrimitive.Item
      data-slot="menubar-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function MenubarCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {
  return (
    <MenubarPrimitive.CheckboxItem
      data-slot="menubar-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.CheckboxItem>
  )
}
function MenubarRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {
  return (
    <MenubarPrimitive.RadioItem
      data-slot="menubar-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.RadioItem>
  )
}
function MenubarLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <MenubarPrimitive.Label
      data-slot="menubar-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}
function MenubarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {
  return (
    <MenubarPrimitive.Separator
      data-slot="menubar-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function MenubarShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="menubar-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}
function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}
function MenubarSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <MenubarPrimitive.SubTrigger
      data-slot="menubar-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto h-4 w-4" />
    </MenubarPrimitive.SubTrigger>
  )
}
function MenubarSubContent({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {
  return (
    <MenubarPrimitive.SubContent
      data-slot="menubar-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}
export {
  Menubar,
  MenubarPortal,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarGroup,
  MenubarSeparator,
  MenubarLabel,
  MenubarItem,
  MenubarShortcut,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarSub,
  MenubarSubTrigger,
  MenubarSubContent,
}
</file>

<file path="src/components/ui/moving-border.tsx">
"use client";
import React from "react";
import {
  motion,
  useAnimationFrame,
  useMotionTemplate,
  useMotionValue,
  useTransform,
} from "motion/react";
import { useRef } from "react";
import { cn } from "@/lib/utils";
export function Button({
  borderRadius = "1.75rem",
  children,
  as: Component = "button",
  containerClassName,
  borderClassName,
  duration,
  className,
  ...otherProps
}: {
  borderRadius?: string;
  children: React.ReactNode;
  as?: any;
  containerClassName?: string;
  borderClassName?: string;
  duration?: number;
  className?: string;
  [key: string]: any;
}) {
  return (
    <Component
      className={cn(
        "relative h-16 w-40 overflow-hidden bg-transparent p-[1px] text-xl",
        containerClassName,
      )}
      style={{
        borderRadius: borderRadius,
      }}
      {...otherProps}
    >
      <div
        className="absolute inset-0"
        style={{ borderRadius: `calc(${borderRadius} * 0.96)` }}
      >
        <MovingBorder duration={duration} rx="30%" ry="30%">
          <div
            className={cn(
              "h-20 w-20 bg-[radial-gradient(#0ea5e9_40%,transparent_60%)] opacity-[0.8]",
              borderClassName,
            )}
          />
        </MovingBorder>
      </div>
      <div
        className={cn(
          "relative flex h-full w-full items-center justify-center border border-slate-800 bg-slate-900/[0.8] text-sm text-white antialiased backdrop-blur-xl",
          className,
        )}
        style={{
          borderRadius: `calc(${borderRadius} * 0.96)`,
        }}
      >
        {children}
      </div>
    </Component>
  );
}
export const MovingBorder = ({
  children,
  duration = 3000,
  rx,
  ry,
  ...otherProps
}: {
  children: React.ReactNode;
  duration?: number;
  rx?: string;
  ry?: string;
  [key: string]: any;
}) => {
  const pathRef = useRef<any>();
  const progress = useMotionValue<number>(0);
  useAnimationFrame((time) => {
    const length = pathRef.current?.getTotalLength();
    if (length) {
      const pxPerMillisecond = length / duration;
      progress.set((time * pxPerMillisecond) % length);
    }
  });
  const x = useTransform(
    progress,
    (val) => pathRef.current?.getPointAtLength(val).x,
  );
  const y = useTransform(
    progress,
    (val) => pathRef.current?.getPointAtLength(val).y,
  );
  const transform = useMotionTemplate`translateX(${x}px) translateY(${y}px) translateX(-50%) translateY(-50%)`;
  return (
    <>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        preserveAspectRatio="none"
        className="absolute h-full w-full"
        width="100%"
        height="100%"
        {...otherProps}
      >
        <rect
          fill="none"
          width="100%"
          height="100%"
          rx={rx}
          ry={ry}
          ref={pathRef}
        />
      </svg>
      <motion.div
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          display: "inline-block",
          transform,
        }}
      >
        {children}
      </motion.div>
    </>
  );
};
</file>

<file path="src/components/ui/navbar-menu.tsx">
'use client'
import type React from 'react'
import {useState} from 'react'
import {motion} from 'framer-motion'
import Link from 'next/link'
import Image from 'next/image'
import {cn} from '@/lib/utils'
const transition = {
  type: 'spring',
  mass: 0.5,
  damping: 11.5,
  stiffness: 100,
  restDelta: 0.001,
  restSpeed: 0.001,
}
export const MenuItem = ({
  setActive,
  active,
  item,
  children,
}: {
  setActive: (item: string) => void
  active: string | null
  item: string
  children?: React.ReactNode
}) => {
  return (
    <div onMouseEnter={() => setActive(item)} className='relative '>
      <motion.p
        transition={{duration: 0.3}}
        className='cursor-pointer text-black hover:opacity-[0.9] dark:text-white'
      >
        {item}
      </motion.p>
      {active !== null && (
        <motion.div
          initial={{opacity: 0, scale: 0.85, y: 10}}
          animate={{opacity: 1, scale: 1, y: 0}}
          transition={transition}
        >
          {active === item && (
            <div className='absolute top-[calc(100%_+_1.2rem)] left-1/2 transform -translate-x-1/2 pt-4'>
              <motion.div
                transition={transition}
                layoutId='active'
                className='bg-white dark:bg-black backdrop-blur-sm rounded-2xl overflow-hidden border border-black/[0.2] dark:border-white/[0.2] shadow-xl'
              >
                <motion.div layout className='w-max h-full p-4'>
                  {children}
                </motion.div>
              </motion.div>
            </div>
          )}
        </motion.div>
      )}
    </div>
  )
}
export const Menu = ({
  setActive,
  children,
}: {
  setActive: (item: string | null) => void
  children: React.ReactNode
}) => {
  return (
    <nav
      onMouseLeave={() => setActive(null)}
      className='relative rounded-full border border-transparent dark:bg-black dark:border-white/[0.2] bg-white shadow-input flex justify-center space-x-4 px-8 py-6 '
    >
      {children}
    </nav>
  )
}
export const HoveredLink = ({
  children,
  href,
  className,
}: {
  children: React.ReactNode
  href: string
  className?: string
}) => {
  return (
    <Link
      href={href}
      className={cn(
        'text-neutral-700 dark:text-neutral-200 hover:text-black',
        className
      )}
    >
      {children}
    </Link>
  )
}
export function Navbar({className}: {className?: string}) {
  const [active, setActive] = useState<string | null>(null)
  return (
    <div
      className={cn('fixed top-10 inset-x-0 max-w-2xl mx-auto z-50', className)}
    >
      <Menu setActive={setActive}>
        <MenuItem setActive={setActive} active={active} item='QuickBooks'>
          <div className='flex flex-col space-y-4 text-sm'>
            <HoveredLink href='/vendors'>Vendors</HoveredLink>
            <HoveredLink href='/invoices'>Invoices</HoveredLink>
            <HoveredLink href='/dashboard'>Dashboard</HoveredLink>
          </div>
        </MenuItem>
      </Menu>
    </div>
  )
}
</file>

<file path="src/components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDownIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function NavigationMenu({
  className,
  children,
  viewport = true,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {
  viewport?: boolean
}) {
  return (
    <NavigationMenuPrimitive.Root
      data-slot="navigation-menu"
      data-viewport={viewport}
      className={cn(
        "group/navigation-menu relative flex max-w-max flex-1 items-center justify-center",
        className
      )}
      {...props}
    >
      {children}
      {viewport && <NavigationMenuViewport />}
    </NavigationMenuPrimitive.Root>
  )
}
function NavigationMenuList({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {
  return (
    <NavigationMenuPrimitive.List
      data-slot="navigation-menu-list"
      className={cn(
        "group flex flex-1 list-none items-center justify-center gap-1",
        className
      )}
      {...props}
    />
  )
}
function NavigationMenuItem({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {
  return (
    <NavigationMenuPrimitive.Item
      data-slot="navigation-menu-item"
      className={cn("relative", className)}
      {...props}
    />
  )
}
const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 transition-[color,box-shadow] focus-visible:ring-4 focus-visible:outline-1"
)
function NavigationMenuTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {
  return (
    <NavigationMenuPrimitive.Trigger
      data-slot="navigation-menu-trigger"
      className={cn(navigationMenuTriggerStyle(), "group", className)}
      {...props}
    >
      {children}{" "}
      <ChevronDownIcon
        className="relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180"
        aria-hidden="true"
      />
    </NavigationMenuPrimitive.Trigger>
  )
}
function NavigationMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {
  return (
    <NavigationMenuPrimitive.Content
      data-slot="navigation-menu-content"
      className={cn(
        "data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto",
        "group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none",
        className
      )}
      {...props}
    />
  )
}
function NavigationMenuViewport({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {
  return (
    <div
      className={cn(
        "absolute top-full left-0 isolate z-50 flex justify-center"
      )}
    >
      <NavigationMenuPrimitive.Viewport
        data-slot="navigation-menu-viewport"
        className={cn(
          "origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]",
          className
        )}
        {...props}
      />
    </div>
  )
}
function NavigationMenuLink({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {
  return (
    <NavigationMenuPrimitive.Link
      data-slot="navigation-menu-link"
      className={cn(
        "data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-[color,box-shadow] focus-visible:ring-4 focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function NavigationMenuIndicator({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {
  return (
    <NavigationMenuPrimitive.Indicator
      data-slot="navigation-menu-indicator"
      className={cn(
        "data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden",
        className
      )}
      {...props}
    >
      <div className="bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md" />
    </NavigationMenuPrimitive.Indicator>
  )
}
export {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
  navigationMenuTriggerStyle,
}
</file>

<file path="src/components/ui/pagination.tsx">
import * as React from "react"
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  MoreHorizontalIcon,
} from "lucide-react"
import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"
function Pagination({ className, ...props }: React.ComponentProps<"nav">) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      data-slot="pagination"
      className={cn("mx-auto flex w-full justify-center", className)}
      {...props}
    />
  )
}
function PaginationContent({
  className,
  ...props
}: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="pagination-content"
      className={cn("flex flex-row items-center gap-1", className)}
      {...props}
    />
  )
}
function PaginationItem({ ...props }: React.ComponentProps<"li">) {
  return <li data-slot="pagination-item" {...props} />
}
type PaginationLinkProps = {
  isActive?: boolean
} & Pick<React.ComponentProps<typeof Button>, "size"> &
  React.ComponentProps<"a">
function PaginationLink({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) {
  return (
    <a
      aria-current={isActive ? "page" : undefined}
      data-slot="pagination-link"
      data-active={isActive}
      className={cn(
        buttonVariants({
          variant: isActive ? "outline" : "ghost",
          size,
        }),
        className
      )}
      {...props}
    />
  )
}
function PaginationPrevious({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pl-2.5", className)}
      {...props}
    >
      <ChevronLeftIcon />
      <span className="hidden sm:block">Previous</span>
    </PaginationLink>
  )
}
function PaginationNext({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pr-2.5", className)}
      {...props}
    >
      <span className="hidden sm:block">Next</span>
      <ChevronRightIcon />
    </PaginationLink>
  )
}
function PaginationEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      aria-hidden
      data-slot="pagination-ellipsis"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontalIcon className="size-4" />
      <span className="sr-only">More pages</span>
    </span>
  )
}
export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}
</file>

<file path="src/components/ui/popover.tsx">
"use client"
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"
import { cn } from "@/lib/utils"
function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}
function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}
function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}
function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}
export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
</file>

<file path="src/components/ui/progress.tsx">
"use client"
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"
import { cn } from "@/lib/utils"
function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}
export { Progress }
</file>

<file path="src/components/ui/radio-group.tsx">
"use client"
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { CircleIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("grid gap-3", className)}
      {...props}
    />
  )
}
function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
}
export { RadioGroup, RadioGroupItem }
</file>

<file path="src/components/ui/resizable.tsx">
"use client"
import * as React from "react"
import { GripVerticalIcon } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"
import { cn } from "@/lib/utils"
function ResizablePanelGroup({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
        className
      )}
      {...props}
    />
  )
}
function ResizablePanel({
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {
  return <ResizablePrimitive.Panel data-slot="resizable-panel" {...props} />
}
function ResizableHandle({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        "bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
        className
      )}
      {...props}
    >
      {withHandle && (
        <div className="bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border">
          <GripVerticalIcon className="size-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  )
}
export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="src/components/ui/scroll-area.tsx">
"use client"
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
import { cn } from "@/lib/utils"
function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] focus-visible:ring-4 focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}
function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}
export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/select.tsx">
"use client"
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}
function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}
function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}
function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}
function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}
function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}
function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}
function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}
function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}
export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
</file>

<file path="src/components/ui/separator.tsx">
"use client"
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"
import { cn } from "@/lib/utils"
function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}
export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
"use client"
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}
function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}
function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}
function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}
function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}
function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}
function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}
function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}
function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}
function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="src/components/ui/sidebar.tsx">
'use client'
import * as React from 'react'
import {Slot} from '@radix-ui/react-slot'
import {type VariantProps, cva} from 'class-variance-authority'
import {PanelLeftIcon} from 'lucide-react'
import {useIsMobile} from '@/hooks/use-mobile'
import {cn} from '@/lib/utils'
import {Button} from '@/components/ui/button'
import {Input} from '@/components/ui/input'
import {Separator} from '@/components/ui/separator'
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from '@/components/ui/sheet'
import {Skeleton} from '@/components/ui/skeleton'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip'
const SIDEBAR_COOKIE_NAME = 'sidebar_state'
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = '16rem'
const SIDEBAR_WIDTH_MOBILE = '18rem'
const SIDEBAR_WIDTH_ICON = '3rem'
const SIDEBAR_KEYBOARD_SHORTCUT = 'b'
type SidebarContextProps = {
  state: 'expanded' | 'collapsed'
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}
const SidebarContext = React.createContext<SidebarContextProps | null>(null)
function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error('useSidebar must be used within a SidebarProvider.')
  }
  return context
}
function SidebarProvider({
  defaultOpen = true,
  open: openProp,
  onOpenChange: setOpenProp,
  className,
  style,
  children,
  ...props
}: React.ComponentProps<'div'> & {
  defaultOpen?: boolean
  open?: boolean
  onOpenChange?: (open: boolean) => void
}) {
  const isMobile = useIsMobile()
  const [openMobile, setOpenMobile] = React.useState(false)
  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen)
  const open = openProp ?? _open
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === 'function' ? value(open) : value
      if (setOpenProp) {
        setOpenProp(openState)
      } else {
        _setOpen(openState)
      }
      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
    },
    [setOpenProp, open]
  )
  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)
  }, [isMobile, setOpen, setOpenMobile])
  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (
        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
        (event.metaKey || event.ctrlKey)
      ) {
        event.preventDefault()
        toggleSidebar()
      }
    }
    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [toggleSidebar])
  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? 'expanded' : 'collapsed'
  const contextValue = React.useMemo<SidebarContextProps>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
  )
  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          data-slot='sidebar-wrapper'
          style={
            {
              '--sidebar-width': SIDEBAR_WIDTH,
              '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn(
            'group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full',
            className
          )}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  )
}
function Sidebar({
  side = 'left',
  variant = 'sidebar',
  collapsible = 'offcanvas',
  className,
  children,
  ...props
}: React.ComponentProps<'div'> & {
  side?: 'left' | 'right'
  variant?: 'sidebar' | 'floating' | 'inset'
  collapsible?: 'offcanvas' | 'icon' | 'none'
}) {
  const {isMobile, state, openMobile, setOpenMobile} = useSidebar()
  if (collapsible === 'none') {
    return (
      <div
        data-slot='sidebar'
        className={cn(
          'bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col',
          className
        )}
        {...props}
      >
        {children}
      </div>
    )
  }
  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar='sidebar'
          data-slot='sidebar'
          data-mobile='true'
          className='bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden'
          style={
            {
              '--sidebar-width': SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <SheetHeader className='sr-only'>
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className='flex h-full w-full flex-col'>{children}</div>
        </SheetContent>
      </Sheet>
    )
  }
  return (
    <div
      className='group peer text-sidebar-foreground hidden md:block'
      data-state={state}
      data-collapsible={state === 'collapsed' ? collapsible : ''}
      data-variant={variant}
      data-side={side}
      data-slot='sidebar'
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        data-slot='sidebar-gap'
        className={cn(
          'relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear',
          'group-data-[collapsible=offcanvas]:w-0',
          'group-data-[side=right]:rotate-180',
          variant === 'floating' || variant === 'inset'
            ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]'
            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon)'
        )}
      />
      <div
        data-slot='sidebar-container'
        className={cn(
          'inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex',
          side === 'left'
            ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'
            : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',
          // Adjust the padding for floating and inset variants.
          variant === 'floating' || variant === 'inset'
            ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]'
            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l',
          className
        )}
        {...props}
      >
        <div
          data-sidebar='sidebar'
          data-slot='sidebar-inner'
          className='bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm'
        >
          {children}
        </div>
      </div>
    </div>
  )
}
function SidebarTrigger({
  className,
  onClick,
  ...props
}: React.ComponentProps<typeof Button>) {
  const {toggleSidebar} = useSidebar()
  return (
    <Button
      data-sidebar='trigger'
      data-slot='sidebar-trigger'
      variant='ghost'
      size='icon'
      className={cn('size-7', className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeftIcon />
      <span className='sr-only'>Toggle Sidebar</span>
    </Button>
  )
}
function SidebarRail({className, ...props}: React.ComponentProps<'button'>) {
  const {toggleSidebar} = useSidebar()
  return (
    <button
      data-sidebar='rail'
      data-slot='sidebar-rail'
      aria-label='Toggle Sidebar'
      tabIndex={-1}
      onClick={toggleSidebar}
      title='Toggle Sidebar'
      className={cn(
        'hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex',
        'in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize',
        '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',
        'hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',
        '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',
        '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',
        className
      )}
      {...props}
    />
  )
}
function SidebarInset({className, ...props}: React.ComponentProps<'main'>) {
  return (
    <main
      data-slot='sidebar-inset'
      className={cn(
        'bg-background relative flex w-full flex-1 flex-col',
        'md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2',
        className
      )}
      {...props}
    />
  )
}
function SidebarInput({
  className,
  ...props
}: React.ComponentProps<typeof Input>) {
  return (
    <Input
      data-slot='sidebar-input'
      data-sidebar='input'
      className={cn('bg-background h-8 w-full shadow-none', className)}
      {...props}
    />
  )
}
function SidebarHeader({className, ...props}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot='sidebar-header'
      data-sidebar='header'
      className={cn('flex flex-col gap-2 p-2', className)}
      {...props}
    />
  )
}
function SidebarFooter({className, ...props}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot='sidebar-footer'
      data-sidebar='footer'
      className={cn('flex flex-col gap-2 p-2', className)}
      {...props}
    />
  )
}
function SidebarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot='sidebar-separator'
      data-sidebar='separator'
      className={cn('bg-sidebar-border mx-2 w-auto', className)}
      {...props}
    />
  )
}
function SidebarContent({className, ...props}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot='sidebar-content'
      data-sidebar='content'
      className={cn(
        'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',
        className
      )}
      {...props}
    />
  )
}
function SidebarGroup({className, ...props}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot='sidebar-group'
      data-sidebar='group'
      className={cn('relative flex w-full min-w-0 flex-col p-2', className)}
      {...props}
    />
  )
}
function SidebarGroupLabel({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<'div'> & {asChild?: boolean}) {
  const Comp = asChild ? Slot : 'div'
  return (
    <Comp
      data-slot='sidebar-group-label'
      data-sidebar='group-label'
      className={cn(
        'text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',
        className
      )}
      {...props}
    />
  )
}
function SidebarGroupAction({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<'button'> & {asChild?: boolean}) {
  const Comp = asChild ? Slot : 'button'
  return (
    <Comp
      data-slot='sidebar-group-action'
      data-sidebar='group-action'
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        // Increases the hit area of the button on mobile.
        'after:absolute after:-inset-2 md:after:hidden',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  )
}
function SidebarGroupContent({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot='sidebar-group-content'
      data-sidebar='group-content'
      className={cn('w-full text-sm', className)}
      {...props}
    />
  )
}
function SidebarMenu({className, ...props}: React.ComponentProps<'ul'>) {
  return (
    <ul
      data-slot='sidebar-menu'
      data-sidebar='menu'
      className={cn('flex w-full min-w-0 flex-col gap-1', className)}
      {...props}
    />
  )
}
function SidebarMenuItem({className, ...props}: React.ComponentProps<'li'>) {
  return (
    <li
      data-slot='sidebar-menu-item'
      data-sidebar='menu-item'
      className={cn('group/menu-item relative', className)}
      {...props}
    />
  )
}
const sidebarMenuButtonVariants = cva(
  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',
        outline:
          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',
      },
      size: {
        default: 'h-8 text-sm',
        sm: 'h-7 text-xs',
        lg: 'h-12 text-sm group-data-[collapsible=icon]:p-0!',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)
function SidebarMenuButton({
  asChild = false,
  isActive = false,
  variant = 'default',
  size = 'default',
  tooltip,
  className,
  ...props
}: React.ComponentProps<'button'> & {
  asChild?: boolean
  isActive?: boolean
  tooltip?: string | React.ComponentProps<typeof TooltipContent>
} & VariantProps<typeof sidebarMenuButtonVariants>) {
  const Comp = asChild ? Slot : 'button'
  const {isMobile, state} = useSidebar()
  const button = (
    <Comp
      data-slot='sidebar-menu-button'
      data-sidebar='menu-button'
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({variant, size}), className)}
      {...props}
    />
  )
  if (!tooltip) {
    return button
  }
  if (typeof tooltip === 'string') {
    tooltip = {
      children: tooltip,
    }
  }
  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side='right'
        align='center'
        hidden={state !== 'collapsed' || isMobile}
        {...tooltip}
      />
    </Tooltip>
  )
}
function SidebarMenuAction({
  className,
  asChild = false,
  showOnHover = false,
  ...props
}: React.ComponentProps<'button'> & {
  asChild?: boolean
  showOnHover?: boolean
}) {
  const Comp = asChild ? Slot : 'button'
  return (
    <Comp
      data-slot='sidebar-menu-action'
      data-sidebar='menu-action'
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        // Increases the hit area of the button on mobile.
        'after:absolute after:-inset-2 md:after:hidden',
        'peer-data-[size=sm]/menu-button:top-1',
        'peer-data-[size=default]/menu-button:top-1.5',
        'peer-data-[size=lg]/menu-button:top-2.5',
        'group-data-[collapsible=icon]:hidden',
        showOnHover &&
          'peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0',
        className
      )}
      {...props}
    />
  )
}
function SidebarMenuBadge({className, ...props}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot='sidebar-menu-badge'
      data-sidebar='menu-badge'
      className={cn(
        'text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none',
        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',
        'peer-data-[size=sm]/menu-button:top-1',
        'peer-data-[size=default]/menu-button:top-1.5',
        'peer-data-[size=lg]/menu-button:top-2.5',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  )
}
function SidebarMenuSkeleton({
  className,
  showIcon = false,
  ...props
}: React.ComponentProps<'div'> & {
  showIcon?: boolean
}) {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])
  return (
    <div
      data-slot='sidebar-menu-skeleton'
      data-sidebar='menu-skeleton'
      className={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className='size-4 rounded-md'
          data-sidebar='menu-skeleton-icon'
        />
      )}
      <Skeleton
        className='h-4 max-w-(--skeleton-width) flex-1'
        data-sidebar='menu-skeleton-text'
        style={
          {
            '--skeleton-width': width,
          } as React.CSSProperties
        }
      />
    </div>
  )
}
function SidebarMenuSub({className, ...props}: React.ComponentProps<'ul'>) {
  return (
    <ul
      data-slot='sidebar-menu-sub'
      data-sidebar='menu-sub'
      className={cn(
        'border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  )
}
function SidebarMenuSubItem({className, ...props}: React.ComponentProps<'li'>) {
  return (
    <li
      data-slot='sidebar-menu-sub-item'
      data-sidebar='menu-sub-item'
      className={cn('group/menu-sub-item relative', className)}
      {...props}
    />
  )
}
function SidebarMenuSubButton({
  asChild = false,
  size = 'md',
  isActive = false,
  className,
  ...props
}: React.ComponentProps<'a'> & {
  asChild?: boolean
  size?: 'sm' | 'md'
  isActive?: boolean
}) {
  const Comp = asChild ? Slot : 'a'
  return (
    <Comp
      data-slot='sidebar-menu-sub-button'
      data-sidebar='menu-sub-button'
      data-size={size}
      data-active={isActive}
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',
        size === 'sm' && 'text-xs',
        size === 'md' && 'text-sm',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  )
}
export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"
function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}
export { Skeleton }
</file>

<file path="src/components/ui/slider.tsx">
"use client"
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"
import { cn } from "@/lib/utils"
function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )
  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}
export { Slider }
</file>

<file path="src/components/ui/sonner.tsx">
"use client"
import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"
const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()
  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  )
}
export { Toaster }
</file>

<file path="src/components/ui/switch.tsx">
"use client"
import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"
function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}
export { Switch }
</file>

<file path="src/components/ui/table.tsx">
"use client"
import * as React from "react"
import { cn } from "@/lib/utils"
function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}
function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}
function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}
function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}
function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}
function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-muted-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}
function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}
function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}
export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.tsx">
"use client"
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"
function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}
function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}
function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/50 inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}
export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}
export { Textarea }
</file>

<file path="src/components/ui/toggle-group.tsx">
"use client"
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"
const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})
function ToggleGroup({
  className,
  variant,
  size,
  children,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <ToggleGroupPrimitive.Root
      data-slot="toggle-group"
      data-variant={variant}
      data-size={size}
      className={cn(
        "group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs",
        className
      )}
      {...props}
    >
      <ToggleGroupContext.Provider value={{ variant, size }}>
        {children}
      </ToggleGroupContext.Provider>
    </ToggleGroupPrimitive.Root>
  )
}
function ToggleGroupItem({
  className,
  children,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &
  VariantProps<typeof toggleVariants>) {
  const context = React.useContext(ToggleGroupContext)
  return (
    <ToggleGroupPrimitive.Item
      data-slot="toggle-group-item"
      data-variant={context.variant || variant}
      data-size={context.size || size}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        "min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l",
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
}
export { ToggleGroup, ToggleGroupItem }
</file>

<file path="src/components/ui/toggle.tsx">
"use client"
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
function Toggle({
  className,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof TogglePrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <TogglePrimitive.Root
      data-slot="toggle"
      className={cn(toggleVariants({ variant, size, className }))}
      {...props}
    />
  )
}
export { Toggle, toggleVariants }
</file>

<file path="src/components/ui/tooltip.tsx">
"use client"
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"
import { cn } from "@/lib/utils"
function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}
function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}
function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}
function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}
export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/components/calendars.tsx">
import * as React from "react"
import { Check, ChevronRight } from "lucide-react"
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible"
import {
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarSeparator,
} from "@/components/ui/sidebar"
export function Calendars({
  calendars,
}: {
  calendars: {
    name: string
    items: string[]
  }[]
}) {
  return (
    <>
      {calendars.map((calendar, index) => (
        <React.Fragment key={calendar.name}>
          <SidebarGroup key={calendar.name} className="py-0">
            <Collapsible
              defaultOpen={index === 0}
              className="group/collapsible"
            >
              <SidebarGroupLabel
                asChild
                className="group/label text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground w-full text-sm"
              >
                <CollapsibleTrigger>
                  {calendar.name}{" "}
                  <ChevronRight className="ml-auto transition-transform group-data-[state=open]/collapsible:rotate-90" />
                </CollapsibleTrigger>
              </SidebarGroupLabel>
              <CollapsibleContent>
                <SidebarGroupContent>
                  <SidebarMenu>
                    {calendar.items.map((item, index) => (
                      <SidebarMenuItem key={item}>
                        <SidebarMenuButton>
                          <div
                            data-active={index < 2}
                            className="group/calendar-item border-sidebar-border text-sidebar-primary-foreground data-[active=true]:border-sidebar-primary data-[active=true]:bg-sidebar-primary flex aspect-square size-4 shrink-0 items-center justify-center rounded-xs border"
                          >
                            <Check className="hidden size-3 group-data-[active=true]/calendar-item:block" />
                          </div>
                          {item}
                        </SidebarMenuButton>
                      </SidebarMenuItem>
                    ))}
                  </SidebarMenu>
                </SidebarGroupContent>
              </CollapsibleContent>
            </Collapsible>
          </SidebarGroup>
          <SidebarSeparator className="mx-0" />
        </React.Fragment>
      ))}
    </>
  )
}
</file>

<file path="src/components/connect-to-quickbooks.tsx">
'use client'
import {Button} from '@/components/ui/button'
import {useState} from 'react'
export const ConnectToQuickbooks = () => {
  const [isConnecting, setIsConnecting] = useState(false)
  const handleConnect = async () => {
    try {
      setIsConnecting(true)
      // Redirect to our authorize endpoint
      window.location.href = '/api/intuit/auth'
    } catch (error) {
      console.error('Error connecting to QuickBooks:', error)
      setIsConnecting(false)
    }
  }
  return (
    <Button
      variant='outline'
      onClick={handleConnect}
      disabled={isConnecting}
      className='bg-white text-black display-block mx-auto w-full'
    >
      {isConnecting ? 'Connecting...' : 'Connect to QuickBooks'}
    </Button>
  )
}
</file>

<file path="src/components/date-picker.tsx">
import { Calendar } from "@/components/ui/calendar"
import {
  SidebarGroup,
  SidebarGroupContent,
} from "@/components/ui/sidebar"
export function DatePicker() {
  return (
    <SidebarGroup className="px-0">
      <SidebarGroupContent>
        <Calendar className="[&_[role=gridcell].bg-accent]:bg-sidebar-primary [&_[role=gridcell].bg-accent]:text-sidebar-primary-foreground [&_[role=gridcell]]:w-[33px]" />
      </SidebarGroupContent>
    </SidebarGroup>
  )
}
</file>

<file path="src/components/footer.tsx">
export function Footer() {
  return (
    <div className="flex items-center justify-center font-mono text-xs fixed bottom-0 right-4 bottom-4 space-x-2">
      <span>Made by</span>
      <a href="https://midday.ai?utm_source=v1" className="underline">
        Midday
      </a>
    </div>
  );
}
</file>

<file path="src/components/nav-favorites.tsx">
'use client'
import {ArrowUpRight, Link, MoreHorizontal, StarOff, Trash2} from 'lucide-react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from '@/components/ui/sidebar'
export function NavFavorites({
  links,
}: {
  links: {
    category: string
    items: {
      title: string
      url: string
      emoji?: string
      icon?: string
    }[]
  }
}) {
  console.log('🚀 ~ links:', links)
  const {isMobile} = useSidebar()
  const {category, items} = links
  return (
    <SidebarGroup className='group-data-[collapsible=icon]:hidden'>
      <SidebarGroupLabel>{category}</SidebarGroupLabel>
      <SidebarMenu>
        {items.map((item) => (
          <SidebarMenuItem key={item.title}>
            <SidebarMenuButton asChild>
              <a href={item.url} title={item.title}>
                <span>{item.emoji}</span>
                <span>{item.title}</span>
              </a>
            </SidebarMenuButton>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <SidebarMenuAction showOnHover>
                  <MoreHorizontal />
                  <span className='sr-only'>More</span>
                </SidebarMenuAction>
              </DropdownMenuTrigger>
              <DropdownMenuContent
                className='w-56 rounded-lg'
                side={isMobile ? 'bottom' : 'right'}
                align={isMobile ? 'end' : 'start'}
              >
                <DropdownMenuItem>
                  <StarOff className='text-muted-foreground' />
                  <span>Remove from Favorites</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Link className='text-muted-foreground' />
                  <span>Copy Link</span>
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <ArrowUpRight className='text-muted-foreground' />
                  <span>Open in New Tab</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Trash2 className='text-muted-foreground' />
                  <span>Delete</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </SidebarMenuItem>
        ))}
        <SidebarMenuItem>
          <SidebarMenuButton className='text-sidebar-foreground/70'>
            <MoreHorizontal />
            <span>More</span>
          </SidebarMenuButton>
        </SidebarMenuItem>
      </SidebarMenu>
    </SidebarGroup>
  )
}
</file>

<file path="src/components/nav-main.tsx">
'use client'
import type {LucideIcon} from 'lucide-react'
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from '@/components/ui/sidebar'
export function NavMain({
  items,
}: {
  items: {
    title: string
    url: string
    icon: string | LucideIcon
    isActive?: boolean
  }[]
}) {
  return (
    <SidebarMenu>
      {items.map((item) => (
        <SidebarMenuItem key={item.title}>
          <SidebarMenuButton asChild isActive={item.isActive}>
            <a href={item.url}>
              {typeof item.icon === 'string' ? item.icon : <item.icon />}
              <span>{item.title}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
</file>

<file path="src/components/nav-secondary.tsx">
import React from "react"
import { type LucideIcon } from "lucide-react"
import {
  SidebarGroup,
  SidebarGroupContent,
  SidebarMenu,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar"
export function NavSecondary({
  items,
  ...props
}: {
  items: {
    title: string
    url: string
    icon: LucideIcon
    badge?: React.ReactNode
  }[]
} & React.ComponentPropsWithoutRef<typeof SidebarGroup>) {
  return (
    <SidebarGroup {...props}>
      <SidebarGroupContent>
        <SidebarMenu>
          {items.map((item) => (
            <SidebarMenuItem key={item.title}>
              <SidebarMenuButton asChild>
                <a href={item.url}>
                  <item.icon />
                  <span>{item.title}</span>
                </a>
              </SidebarMenuButton>
              {item.badge && <SidebarMenuBadge>{item.badge}</SidebarMenuBadge>}
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>
  )
}
</file>

<file path="src/components/nav-user.tsx">
"use client"
import {
  BadgeCheck,
  Bell,
  ChevronsUpDown,
  CreditCard,
  LogOut,
  Sparkles,
} from "lucide-react"
import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from "@/components/ui/avatar"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar"
export function NavUser({
  user,
}: {
  user: {
    name: string
    email: string
    avatar: string
  }
}) {
  const { isMobile } = useSidebar()
  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <Avatar className="h-8 w-8 rounded-lg">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback className="rounded-lg">CN</AvatarFallback>
              </Avatar>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-medium">{user.name}</span>
                <span className="truncate text-xs">{user.email}</span>
              </div>
              <ChevronsUpDown className="ml-auto size-4" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg"
            side={isMobile ? "bottom" : "right"}
            align="start"
            sideOffset={4}
          >
            <DropdownMenuLabel className="p-0 font-normal">
              <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
                <Avatar className="h-8 w-8 rounded-lg">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback className="rounded-lg">CN</AvatarFallback>
                </Avatar>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-medium">{user.name}</span>
                  <span className="truncate text-xs">{user.email}</span>
                </div>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <Sparkles />
                Upgrade to Pro
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <BadgeCheck />
                Account
              </DropdownMenuItem>
              <DropdownMenuItem>
                <CreditCard />
                Billing
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Bell />
                Notifications
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuItem>
              <LogOut />
              Log out
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  )
}
</file>

<file path="src/components/nav-workspaces.tsx">
import {ChevronRight, MoreHorizontal, Plus} from 'lucide-react'
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible'
import {
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
} from '@/components/ui/sidebar'
export function NavWorkspaces({
  workspaces,
}: {
  workspaces: {
    title: string
    emoji: React.ReactNode
    pages: {
      title: string
      emoji: React.ReactNode
    }[]
  }[]
}) {
  return (
    <SidebarGroup>
      <SidebarGroupLabel>Workspaces</SidebarGroupLabel>
      <SidebarGroupContent>
        <SidebarMenu>
          {workspaces.map((workspace) => (
            <Collapsible key={workspace.title}>
              <SidebarMenuItem>
                <SidebarMenuButton asChild>
                  <a href='#'>
                    <span>{workspace.emoji}</span>
                    <span>{workspace.title}</span>
                  </a>
                </SidebarMenuButton>
                <CollapsibleTrigger asChild>
                  <SidebarMenuAction
                    className='bg-sidebar-accent text-sidebar-accent-foreground left-2 data-[state=open]:rotate-90'
                    showOnHover
                  >
                    <ChevronRight />
                  </SidebarMenuAction>
                </CollapsibleTrigger>
                <SidebarMenuAction showOnHover>
                  <Plus />
                </SidebarMenuAction>
                <CollapsibleContent>
                  <SidebarMenuSub>
                    {workspace.pages.map((page) => (
                      <SidebarMenuSubItem key={page.title}>
                        <SidebarMenuSubButton asChild>
                          <a href='#'>
                            <span>{page.emoji}</span>
                            <span>{page.title}</span>
                          </a>
                        </SidebarMenuSubButton>
                      </SidebarMenuSubItem>
                    ))}
                  </SidebarMenuSub>
                </CollapsibleContent>
              </SidebarMenuItem>
            </Collapsible>
          ))}
          <SidebarMenuItem>
            <SidebarMenuButton className='text-sidebar-foreground/70'>
              <MoreHorizontal />
              <span>More</span>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>
  )
}
</file>

<file path="src/components/RedirectToQuickbooks.tsx">
'use client'
import {useEffect} from 'react'
export const RedirectToQuickbooks = () => {
  useEffect(() => {
    if (typeof window !== 'undefined') {
      window.location.replace('/quickbooks')
    }
  }, [])
  return <div />
}
</file>

<file path="src/components/sidebar-left.tsx">
'use client'
import type * as React from 'react'
import {
  AudioWaveform,
  Blocks,
  Calendar,
  ChevronDown,
  Command,
  Home,
  Inbox,
  MessageCircleQuestion,
  Search,
  Settings2,
  Sparkles,
  Trash2,
} from 'lucide-react'
import {NavFavorites} from '@/components/nav-favorites'
import {NavMain} from '@/components/nav-main'
import {NavSecondary} from '@/components/nav-secondary'
import {NavWorkspaces} from '@/components/nav-workspaces'
import {TeamSwitcher} from '@/components/team-switcher'
import {
  Sidebar,
  SidebarContent,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarRail,
  useSidebar,
} from '@/components/ui/sidebar'
import {SignOutButton, useUser} from '@clerk/nextjs'
import Profile01, {type ClerkUser} from '@/components/ui/kokonutui/profile-01'
import type {UserResource} from '@clerk/types'
// This is sample data.
export function SidebarLeft({
  links,
  ...props
}: React.ComponentProps<typeof Sidebar> & {
  links: Array<{
    category: string
    items: Array<{
      title: string
      url: string
      icon?: string
      emoji?: string
    }>
  }>
}) {
  const [main, dashboards, collections] = links
  const {user} = useUser()
  const mainItems = main.items.map((item) => ({
    ...item,
    icon: item.icon || '📄',
  }))
  const {toggleSidebar, open} = useSidebar()
  return (
    <Sidebar className='border-r-0' {...props} collapsible='icon'>
      <SidebarHeader>
        <SidebarMenu>
          <SidebarMenuItem>
            <Profile01 user={user as unknown as ClerkUser} />
          </SidebarMenuItem>
        </SidebarMenu>
        <NavMain items={mainItems} />
      </SidebarHeader>
      <SidebarContent>
        <NavFavorites links={dashboards} />
        <NavFavorites links={collections} />
        {/* <NavSecondary items={data.navSecondary} className='mt-auto' /> */}
      </SidebarContent>
      <SignOutButton />
      <SidebarRail />
    </Sidebar>
  )
}
</file>

<file path="src/components/sidebar-right.tsx">
import * as React from "react"
import { Plus } from "lucide-react"
import { Calendars } from "@/components/calendars"
import { DatePicker } from "@/components/date-picker"
import { NavUser } from "@/components/nav-user"
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarRail,
  SidebarSeparator,
} from "@/components/ui/sidebar"
// This is sample data.
const data = {
  user: {
    name: "shadcn",
    email: "m@example.com",
    avatar: "/avatars/shadcn.jpg",
  },
  calendars: [
    {
      name: "My Calendars",
      items: ["Personal", "Work", "Family"],
    },
    {
      name: "Favorites",
      items: ["Holidays", "Birthdays"],
    },
    {
      name: "Other",
      items: ["Travel", "Reminders", "Deadlines"],
    },
  ],
}
export function SidebarRight({
  ...props
}: React.ComponentProps<typeof Sidebar>) {
  return (
    <Sidebar
      collapsible="none"
      className="sticky top-0 hidden h-svh border-l lg:flex"
      {...props}
    >
      <SidebarHeader className="border-sidebar-border h-16 border-b">
        <NavUser user={data.user} />
      </SidebarHeader>
      <SidebarContent>
        <DatePicker />
        <SidebarSeparator className="mx-0" />
        <Calendars calendars={data.calendars} />
      </SidebarContent>
      <SidebarFooter>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton>
              <Plus />
              <span>New Calendar</span>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarFooter>
    </Sidebar>
  )
}
</file>

<file path="src/components/team-switcher.tsx">
"use client"
import * as React from "react"
import { ChevronDown, Plus } from "lucide-react"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar"
export function TeamSwitcher({
  teams,
}: {
  teams: {
    name: string
    logo: React.ElementType
    plan: string
  }[]
}) {
  const [activeTeam, setActiveTeam] = React.useState(teams[0])
  if (!activeTeam) {
    return null
  }
  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton className="w-fit px-1.5">
              <div className="bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-5 items-center justify-center rounded-md">
                <activeTeam.logo className="size-3" />
              </div>
              <span className="truncate font-medium">{activeTeam.name}</span>
              <ChevronDown className="opacity-50" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-64 rounded-lg"
            align="start"
            side="bottom"
            sideOffset={4}
          >
            <DropdownMenuLabel className="text-muted-foreground text-xs">
              Teams
            </DropdownMenuLabel>
            {teams.map((team, index) => (
              <DropdownMenuItem
                key={team.name}
                onClick={() => setActiveTeam(team)}
                className="gap-2 p-2"
              >
                <div className="flex size-6 items-center justify-center rounded-xs border">
                  <team.logo className="size-4 shrink-0" />
                </div>
                {team.name}
                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>
              </DropdownMenuItem>
            ))}
            <DropdownMenuSeparator />
            <DropdownMenuItem className="gap-2 p-2">
              <div className="bg-background flex size-6 items-center justify-center rounded-md border">
                <Plus className="size-4" />
              </div>
              <div className="text-muted-foreground font-medium">Add team</div>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  )
}
</file>

<file path="src/hooks/use-auto-resize-textarea.ts">
import { useEffect, useRef, useCallback } from "react";
interface UseAutoResizeTextareaProps {
    minHeight: number;
    maxHeight?: number;
}
export function useAutoResizeTextarea({
    minHeight,
    maxHeight,
}: UseAutoResizeTextareaProps) {
    const textareaRef = useRef<HTMLTextAreaElement>(null);
    const adjustHeight = useCallback(
        (reset?: boolean) => {
            const textarea = textareaRef.current;
            if (!textarea) return;
            if (reset) {
                textarea.style.height = `${minHeight}px`;
                return;
            }
            // Temporarily shrink to get the right scrollHeight
            textarea.style.height = `${minHeight}px`;
            // Calculate new height
            const newHeight = Math.max(
                minHeight,
                Math.min(
                    textarea.scrollHeight,
                    maxHeight ?? Number.POSITIVE_INFINITY
                )
            );
            textarea.style.height = `${newHeight}px`;
        },
        [minHeight, maxHeight]
    );
    useEffect(() => {
        // Set initial height
        const textarea = textareaRef.current;
        if (textarea) {
            textarea.style.height = `${minHeight}px`;
        }
    }, [minHeight]);
    // Adjust height on window resize
    useEffect(() => {
        const handleResize = () => adjustHeight();
        window.addEventListener("resize", handleResize);
        return () => window.removeEventListener("resize", handleResize);
    }, [adjustHeight]);
    return { textareaRef, adjustHeight };
}
</file>

<file path="src/hooks/use-debounce.ts">
import { useEffect, useState } from "react";
function useDebounce<T>(value: T, delay: number = 500): T {
    const [debouncedValue, setDebouncedValue] = useState<T>(value);
    useEffect(() => {
        const timer = setTimeout(() => {
            setDebouncedValue(value);
        }, delay);
        return () => {
            clearTimeout(timer);
        };
    }, [value, delay]);
    return debouncedValue;
}
export default useDebounce;
</file>

<file path="src/hooks/use-mobile.ts">
import * as React from "react"
const MOBILE_BREAKPOINT = 768
export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)
  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])
  return !!isMobile
}
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";
/**
 * Combines multiple class names and merges Tailwind CSS classes
 */
export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}
</file>

<file path="src/providers/sidebar-provider.tsx">
'use client'
import type React from 'react'
import {useState, createContext, useContext, type ReactNode} from 'react'
import {
  SidebarProvider as UISidebarProvider,
  SidebarInset,
  SidebarTrigger,
} from '@/components/ui/sidebar'
import {SidebarLeft} from '@/components/sidebar-left'
import {SidebarRight} from '@/components/sidebar-right'
// Define the navigation link types
export type NavLink = {
  title: string
  url: string
  icon?: string
  emoji?: string
}
export type NavCategory = {
  category: string
  items: NavLink[]
}
// Define the sidebar context type
type SidebarContextType = {
  open: boolean
  setOpen: (open: boolean) => void
  navLinks: NavCategory[]
  setNavLinks: React.Dispatch<React.SetStateAction<NavCategory[]>>
}
// Create the context
const SidebarContext = createContext<SidebarContextType | undefined>(undefined)
// Default navigation links
const defaultNavLinks: NavCategory[] = [
  {
    category: 'Main',
    items: [
      {
        title: 'Dashboard',
        url: '/dashboard',
        icon: '💳',
      },
      {
        title: 'Sales',
        url: '/dashboard/sales',
        icon: '📈',
      },
      {
        title: 'Expenses',
        url: '/dashboard/expenses',
        icon: '📉',
      },
    ],
  },
  {
    category: 'Dashboards',
    items: [
      {
        title: 'Customers & leads',
        url: '/dashboard/customers',
        emoji: '👥',
      },
      {
        title: 'Products',
        url: '/dashboard/products',
        emoji: '📊',
      },
      {
        title: 'Vendors',
        url: '/dashboard/vendors',
        emoji: '💰',
      },
      {
        title: 'Budgets',
        url: '/dashboard/budgets',
        emoji: '💼',
      },
      {
        title: 'Taxes',
        url: '/dashboard/taxes',
        emoji: '📝',
      },
    ],
  },
  {
    category: 'COLLECTIONS',
    items: [
      {
        title: 'My accountant',
        url: '/dashboard/my-accountant',
        emoji: '👨‍💼',
      },
      {
        title: 'Lending & banking',
        url: '/dashboard/lending-and-banking',
        emoji: '🏦',
      },
      {
        title: 'Commerce',
        url: '/dashboard/commerce',
        emoji: '🛒',
      },
      {
        title: 'Apps',
        url: '/dashboard/apps',
        emoji: '📱',
      },
    ],
  },
]
// Export the hook for accessing the sidebar context
export const useSidebarContext = () => {
  const context = useContext(SidebarContext)
  if (context === undefined) {
    throw new Error(
      'useSidebarContext must be used within a SidebarContextProvider'
    )
  }
  return context
}
// Utility function for working with navigation links
export const useNavLinks = () => {
  const {navLinks, open, setOpen, setNavLinks} = useSidebarContext()
  const getCategoryLinks = (categoryName: string) => {
    return (
      navLinks.find((category) => category.category === categoryName)?.items ||
      []
    )
  }
  const getMainLinks = () => getCategoryLinks('Main')
  const getDashboardLinks = () => getCategoryLinks('Dashboards')
  const getCollectionLinks = () => getCategoryLinks('COLLECTIONS')
  const toggleSidebar = () => {
    setOpen(!open)
  }
  // Function to add a new link to a category
  const addNavLink = (categoryName: string, newLink: NavLink) => {
    setNavLinks((prevLinks) => {
      return prevLinks.map((category) => {
        if (category.category === categoryName) {
          return {
            ...category,
            items: [...category.items, newLink],
          }
        }
        return category
      })
    })
  }
  // Function to remove a link from a category
  const removeNavLink = (categoryName: string, linkTitle: string) => {
    setNavLinks((prevLinks) => {
      return prevLinks.map((category) => {
        if (category.category === categoryName) {
          return {
            ...category,
            items: category.items.filter((item) => item.title !== linkTitle),
          }
        }
        return category
      })
    })
  }
  // Function to add a new category
  const addCategory = (newCategory: NavCategory) => {
    setNavLinks((prevLinks) => [...prevLinks, newCategory])
  }
  return {
    navLinks,
    getMainLinks,
    getDashboardLinks,
    getCollectionLinks,
    getCategoryLinks,
    toggleSidebar,
    addNavLink,
    removeNavLink,
    addCategory,
  }
}
export const SidebarContextProvider = ({
  children,
  initialLinks = defaultNavLinks,
}: {
  children: ReactNode
  initialLinks?: NavCategory[]
}) => {
  const [open, setOpen] = useState(false)
  const handleToggleSidebar = () => {
    setOpen(!open)
  }
  return (
    <UISidebarProvider open={open} onOpenChange={handleToggleSidebar}>
      <SidebarLeft links={initialLinks} />
      <SidebarInset>{children}</SidebarInset>
      <SidebarRight />
    </UISidebarProvider>
  )
}
// A component that renders the sidebar trigger in a standard position
export const SidebarTriggerButton = ({
  className = '',
}: {
  className?: string
}) => {
  return <SidebarTrigger className={`absolute top-4 left-4 ${className}`} />
}
</file>

<file path="src/services/intuit/account/account.api.ts">
import { quickbooksRequest } from "../api";
import { buildQueryString } from "../api";
import type { Account, QueryParams } from "../types";
/**
 * Creates a new account in QuickBooks
 * @param accountData - Account data to create
 * @returns Promise with the created account
 */
export async function createAccount(accountData: Account) {
	return quickbooksRequest<{ Account: Account }, { Account: Account }>(
		"account",
		"POST",
		{ Account: accountData },
	);
}
/**
 * Retrieves an account by ID from QuickBooks
 * @param accountId - ID of the account to retrieve
 * @returns Promise with the account data
 */
export async function getAccount(accountId: string) {
	return quickbooksRequest<{ Account: Account }>(`account/${accountId}`);
}
/**
 * Queries accounts in QuickBooks with optional filters
 * @param params - Query parameters and filters
 * @returns Promise with the list of accounts matching the query
 */
export async function findAccounts(params: QueryParams = {}) {
	const queryString = buildQueryString(params);
	return quickbooksRequest<{ QueryResponse: { Account: Account[] } }>(
		`query?query=select * from Account${queryString}`,
	);
}
/**
 * Updates an existing account in QuickBooks
 * @param accountData - Account data with Id and SyncToken
 * @returns Promise with the updated account
 */
export async function updateAccount(
	accountData: Account & { Id: string; SyncToken: string },
) {
	return quickbooksRequest<{ Account: Account }, { Account: Account }>(
		"account",
		"POST",
		{ Account: accountData },
	);
}
/**
 * Deletes an account in QuickBooks
 * @param accountId - ID of the account to delete
 * @param syncToken - SyncToken of the account to delete
 * @returns Promise with the deletion result
 */
export async function deleteAccount(accountId: string, syncToken: string) {
	return quickbooksRequest<
		{ Account: Account },
		{ Id: string; SyncToken: string }
	>("account?operation=delete", "POST", {
		Id: accountId,
		SyncToken: syncToken,
	});
}
</file>

<file path="src/services/intuit/company-info/company-info.api.ts">
import { quickbooksRequest } from "../api";
import { buildQueryString } from "../api";
import type { CompanyInfo, CompanyInfoResponse, QueryParams } from "../types";
/**
 * Retrieves company information from QuickBooks
 * @returns Promise with the company information
 */
export async function getCompanyInfo() {
	return quickbooksRequest<CompanyInfoResponse>(
		"query?query=select * from CompanyInfo",
	).then((res) => res.QueryResponse.CompanyInfo[0]);
}
/**
 * Retrieves a specific company info by ID from QuickBooks
 * @param companyInfoId - ID of the company info to retrieve
 * @returns Promise with the company info data
 */
export async function getCompanyInfoById(companyInfoId: string) {
	return quickbooksRequest<{ CompanyInfo: CompanyInfo }>(
		`companyinfo/${companyInfoId}`,
	);
}
/**
 * Queries company info in QuickBooks with optional filters
 * @param params - Query parameters and filters
 * @returns Promise with the list of company infos matching the query
 */
export async function findCompanyInfos(params: QueryParams = {}) {
	const queryString = buildQueryString(params);
	return quickbooksRequest<CompanyInfoResponse>(
		`query?query=select * from CompanyInfo${queryString}`,
	);
}
/**
 * Updates an existing company info in QuickBooks
 * @param companyInfoData - Company info data with Id and SyncToken
 * @returns Promise with the updated company info
 */
export async function updateCompanyInfo(
	companyInfoData: CompanyInfo & { Id: string; SyncToken: string },
) {
	return quickbooksRequest<
		{ CompanyInfo: CompanyInfo },
		{ CompanyInfo: CompanyInfo }
	>("companyinfo", "POST", { CompanyInfo: companyInfoData });
}
</file>

<file path="src/services/intuit/customer/customer.api.ts">
import { quickbooksRequest } from "../api";
import { buildQueryString } from "../api";
import type { Customer, QueryParams } from "../types";
/**
 * Creates a new customer in QuickBooks
 * @param customerData - Customer data to create
 * @returns Promise with the created customer
 */
export async function createCustomer(customerData: Customer) {
	return quickbooksRequest<{ Customer: Customer }, { Customer: Customer }>(
		"customer",
		"POST",
		{ Customer: customerData },
	);
}
/**
 * Retrieves a customer by ID from QuickBooks
 * @param customerId - ID of the customer to retrieve
 * @returns Promise with the customer data
 */
export async function getCustomer(customerId: string) {
	return quickbooksRequest<{ Customer: Customer }>(`customer/${customerId}`);
}
/**
 * Queries customers in QuickBooks with optional filters
 * @param params - Query parameters and filters
 * @returns Promise with the list of customers matching the query
 */
export async function findCustomers(params: QueryParams = {}) {
	const queryString = buildQueryString(params);
	return quickbooksRequest<{ QueryResponse: { Customer: Customer[] } }>(
		`query?query=select * from Customer${queryString}`,
	);
}
/**
 * Updates an existing customer in QuickBooks
 * @param customerData - Customer data with Id and SyncToken
 * @returns Promise with the updated customer
 */
export async function updateCustomer(
	customerData: Customer & { Id: string; SyncToken: string },
) {
	return quickbooksRequest<{ Customer: Customer }, { Customer: Customer }>(
		"customer",
		"POST",
		{ Customer: customerData },
	);
}
/**
 * Deletes a customer in QuickBooks
 * @param customerId - ID of the customer to delete
 * @param syncToken - SyncToken of the customer to delete
 * @returns Promise with the deletion result
 */
export async function deleteCustomer(customerId: string, syncToken: string) {
	return quickbooksRequest<
		{ Customer: Customer },
		{ Id: string; SyncToken: string }
	>("customer?operation=delete", "POST", {
		Id: customerId,
		SyncToken: syncToken,
	});
}
</file>

<file path="src/services/intuit/invoice/invoice.api.ts">
import { quickbooksRequest } from "../api";
import { buildQueryString } from "../api";
import type { Invoice, QueryParams } from "../types";
/**
 * Creates a new invoice in QuickBooks
 * @param invoiceData - Invoice data to create
 * @returns Promise with the created invoice
 */
export async function createInvoice(invoiceData: Invoice) {
	return quickbooksRequest<{ Invoice: Invoice }, { Invoice: Invoice }>(
		"invoice",
		"POST",
		{ Invoice: invoiceData },
	);
}
/**
 * Retrieves an invoice by ID from QuickBooks
 * @param invoiceId - ID of the invoice to retrieve
 * @returns Promise with the invoice data
 */
export async function getInvoice(invoiceId: string) {
	return quickbooksRequest<{ Invoice: Invoice }>(`invoice/${invoiceId}`);
}
/**
 * Queries invoices in QuickBooks with optional filters
 * @param params - Query parameters and filters
 * @returns Promise with the list of invoices matching the query
 */
export async function findInvoices(params: QueryParams = {}) {
	const queryString = buildQueryString(params);
	return quickbooksRequest<{ QueryResponse: { Invoice: Invoice[] } }>(
		`query?query=select * from Invoice${queryString}`,
	);
}
/**
 * Updates an existing invoice in QuickBooks
 * @param invoiceData - Invoice data with Id and SyncToken
 * @returns Promise with the updated invoice
 */
export async function updateInvoice(
	invoiceData: Invoice & { Id: string; SyncToken: string },
) {
	return quickbooksRequest<{ Invoice: Invoice }, { Invoice: Invoice }>(
		"invoice",
		"POST",
		{ Invoice: invoiceData },
	);
}
/**
 * Deletes an invoice in QuickBooks
 * @param invoiceId - ID of the invoice to delete
 * @param syncToken - SyncToken of the invoice to delete
 * @returns Promise with the deletion result
 */
export async function deleteInvoice(invoiceId: string, syncToken: string) {
	return quickbooksRequest<
		{ Invoice: Invoice },
		{ Id: string; SyncToken: string }
	>("invoice?operation=delete", "POST", {
		Id: invoiceId,
		SyncToken: syncToken,
	});
}
/**
 * Retrieves an invoice as PDF from QuickBooks
 * @param invoiceId - ID of the invoice to retrieve as PDF
 * @returns Promise with the invoice PDF data
 */
export async function getInvoicePdf(invoiceId: string) {
	return quickbooksRequest<Blob>(`invoice/${invoiceId}/pdf`, "GET");
}
/**
 * Sends an invoice via email
 * @param invoiceId - ID of the invoice to send
 * @param email - Optional email address to send to (if different from customer's email)
 * @returns Promise with the send result
 */
export async function sendInvoicePdf(invoiceId: string, email?: string) {
	const endpoint = email
		? `invoice/${invoiceId}/send?sendTo=${email}`
		: `invoice/${invoiceId}/send`;
	return quickbooksRequest<{ Invoice: Invoice }>(endpoint, "POST");
}
</file>

<file path="src/services/intuit/item/item.api.ts">
import { quickbooksRequest } from "../api";
import { buildQueryString } from "../api";
import type { Item, QueryParams } from "../types";
/**
 * Creates a new item in QuickBooks
 * @param itemData - Item data to create
 * @returns Promise with the created item
 */
export async function createItem(itemData: Item) {
	return quickbooksRequest<{ Item: Item }, { Item: Item }>("item", "POST", {
		Item: itemData,
	});
}
/**
 * Retrieves an item by ID from QuickBooks
 * @param itemId - ID of the item to retrieve
 * @returns Promise with the item data
 */
export async function getItem(itemId: string) {
	return quickbooksRequest<{ Item: Item }>(`item/${itemId}`);
}
/**
 * Queries items in QuickBooks with optional filters
 * @param params - Query parameters and filters
 * @returns Promise with the list of items matching the query
 */
export async function findItems(params: QueryParams = {}) {
	const queryString = buildQueryString(params);
	return quickbooksRequest<{ QueryResponse: { Item: Item[] } }>(
		`query?query=select * from Item${queryString}`,
	);
}
/**
 * Updates an existing item in QuickBooks
 * @param itemData - Item data with Id and SyncToken
 * @returns Promise with the updated item
 */
export async function updateItem(
	itemData: Item & { Id: string; SyncToken: string },
) {
	return quickbooksRequest<{ Item: Item }, { Item: Item }>("item", "POST", {
		Item: itemData,
	});
}
/**
 * Deletes an item in QuickBooks
 * @param itemId - ID of the item to delete
 * @param syncToken - SyncToken of the item to delete
 * @returns Promise with the deletion result
 */
export async function deleteItem(itemId: string, syncToken: string) {
	return quickbooksRequest<{ Item: Item }, { Id: string; SyncToken: string }>(
		"item?operation=delete",
		"POST",
		{
			Id: itemId,
			SyncToken: syncToken,
		},
	);
}
</file>

<file path="src/services/intuit/product/product.api.ts">
import { quickbooksRequest } from "../api";
import { buildQueryString } from "../api";
import type { Product, QueryParams } from "../types";
/**
 * Creates a new product in QuickBooks
 * @param productData - Product data to create
 * @returns Promise with the created product
 */
export async function createProduct(productData: Product) {
	return quickbooksRequest<{ Item: Product }, { Item: Product }>(
		"item",
		"POST",
		{ Item: productData },
	);
}
/**
 * Retrieves a product by ID from QuickBooks
 * @param productId - ID of the product to retrieve
 * @returns Promise with the product data
 */
export async function getProduct(productId: string) {
	return quickbooksRequest<{ Item: Product }>(`item/${productId}`);
}
/**
 * Queries products in QuickBooks with optional filters
 * @param params - Query parameters and filters
 * @returns Promise with the list of products matching the query
 */
export async function findProducts(params: QueryParams = {}) {
	const queryString = buildQueryString(params);
	return quickbooksRequest<{ QueryResponse: { Item: Product[] } }>(
		`query?query=select * from Item${queryString}`,
	);
}
/**
 * Updates an existing product in QuickBooks
 * @param productData - Product data with Id and SyncToken
 * @returns Promise with the updated product
 */
export async function updateProduct(
	productData: Product & { Id: string; SyncToken: string },
) {
	return quickbooksRequest<{ Item: Product }, { Item: Product }>(
		"item",
		"POST",
		{ Item: productData },
	);
}
/**
 * Deletes a product in QuickBooks
 * @param productId - ID of the product to delete
 * @param syncToken - SyncToken of the product to delete
 * @returns Promise with the deletion result
 */
export async function deleteProduct(productId: string, syncToken: string) {
	return quickbooksRequest<
		{ Item: Product },
		{ Id: string; SyncToken: string }
	>("item?operation=delete", "POST", {
		Id: productId,
		SyncToken: syncToken,
	});
}
</file>

<file path="src/services/intuit/purchase/purchase.api.ts">
import { quickbooksRequest } from "../api";
import { buildQueryString } from "../api";
import type { Purchase, QueryParams } from "../types";
/**
 * Creates a new purchase in QuickBooks
 * @param purchaseData - Purchase data to create
 * @returns Promise with the created purchase
 */
export async function createPurchase(purchaseData: Purchase) {
	return quickbooksRequest<{ Purchase: Purchase }, { Purchase: Purchase }>(
		"purchase",
		"POST",
		{ Purchase: purchaseData },
	);
}
/**
 * Retrieves a purchase by ID from QuickBooks
 * @param purchaseId - ID of the purchase to retrieve
 * @returns Promise with the purchase data
 */
export async function getPurchase(purchaseId: string) {
	return quickbooksRequest<{ Purchase: Purchase }>(`purchase/${purchaseId}`);
}
/**
 * Queries purchases in QuickBooks with optional filters
 * @param params - Query parameters and filters
 * @returns Promise with the list of purchases matching the query
 */
export async function findPurchases(params: QueryParams = {}) {
	const queryString = buildQueryString(params);
	return quickbooksRequest<{ QueryResponse: { Purchase: Purchase[] } }>(
		`query?query=select * from Purchase${queryString}`,
	);
}
/**
 * Updates an existing purchase in QuickBooks
 * @param purchaseData - Purchase data with Id and SyncToken
 * @returns Promise with the updated purchase
 */
export async function updatePurchase(
	purchaseData: Purchase & { Id: string; SyncToken: string },
) {
	return quickbooksRequest<{ Purchase: Purchase }, { Purchase: Purchase }>(
		"purchase",
		"POST",
		{ Purchase: purchaseData },
	);
}
/**
 * Deletes a purchase in QuickBooks
 * @param purchaseId - ID of the purchase to delete
 * @param syncToken - SyncToken of the purchase to delete
 * @returns Promise with the deletion result
 */
export async function deletePurchase(purchaseId: string, syncToken: string) {
	return quickbooksRequest<
		{ Purchase: Purchase },
		{ Id: string; SyncToken: string }
	>("purchase?operation=delete", "POST", {
		Id: purchaseId,
		SyncToken: syncToken,
	});
}
</file>

<file path="src/services/intuit/purchase-order/purchase-order.api.ts">
import { quickbooksRequest } from "../api";
import { buildQueryString } from "../api";
import type { PurchaseOrder, QueryParams } from "../types";
/**
 * Creates a new purchase order in QuickBooks
 * @param poData - Purchase order data to create
 * @returns Promise with the created purchase order
 */
export async function createPurchaseOrder(poData: PurchaseOrder) {
	return quickbooksRequest<
		{ PurchaseOrder: PurchaseOrder },
		{ PurchaseOrder: PurchaseOrder }
	>("purchaseorder", "POST", { PurchaseOrder: poData });
}
/**
 * Retrieves a purchase order by ID from QuickBooks
 * @param purchaseOrderId - ID of the purchase order to retrieve
 * @returns Promise with the purchase order data
 */
export async function getPurchaseOrder(purchaseOrderId: string) {
	return quickbooksRequest<{ PurchaseOrder: PurchaseOrder }>(
		`purchaseorder/${purchaseOrderId}`,
	);
}
/**
 * Queries purchase orders in QuickBooks with optional filters
 * @param params - Query parameters and filters
 * @returns Promise with the list of purchase orders matching the query
 */
export async function findPurchaseOrders(params: QueryParams = {}) {
	const queryString = buildQueryString(params);
	return quickbooksRequest<{
		QueryResponse: { PurchaseOrder: PurchaseOrder[] };
	}>(`query?query=select * from PurchaseOrder${queryString}`);
}
/**
 * Updates an existing purchase order in QuickBooks
 * @param poData - Purchase order data with Id and SyncToken
 * @returns Promise with the updated purchase order
 */
export async function updatePurchaseOrder(
	poData: PurchaseOrder & { Id: string; SyncToken: string },
) {
	return quickbooksRequest<
		{ PurchaseOrder: PurchaseOrder },
		{ PurchaseOrder: PurchaseOrder }
	>("purchaseorder", "POST", { PurchaseOrder: poData });
}
/**
 * Deletes a purchase order in QuickBooks
 * @param purchaseOrderId - ID of the purchase order to delete
 * @param syncToken - SyncToken of the purchase order to delete
 * @returns Promise with the deletion result
 */
export async function deletePurchaseOrder(
	purchaseOrderId: string,
	syncToken: string,
) {
	return quickbooksRequest<
		{ PurchaseOrder: PurchaseOrder },
		{ Id: string; SyncToken: string }
	>("purchaseorder?operation=delete", "POST", {
		Id: purchaseOrderId,
		SyncToken: syncToken,
	});
}
</file>

<file path="src/services/intuit/vendor/vendor.api.ts">
import { quickbooksRequest } from "../api";
import { buildQueryString } from "../api";
import type { QueryParams, Vendor } from "../types";
/**
 * Creates a new vendor in QuickBooks
 * @param vendorData - Vendor data to create
 * @returns Promise with the created vendor
 */
export async function createVendor(vendorData: Vendor) {
	return quickbooksRequest<{ Vendor: Vendor }, { Vendor: Vendor }>(
		"vendor",
		"POST",
		{ Vendor: vendorData },
	);
}
/**
 * Retrieves a vendor by ID from QuickBooks
 * @param vendorId - ID of the vendor to retrieve
 * @returns Promise with the vendor data
 */
export async function getVendor(vendorId: string) {
	return quickbooksRequest<{ Vendor: Vendor }>(`vendor/${vendorId}`);
}
/**
 * Queries vendors in QuickBooks with optional filters
 * @param params - Query parameters and filters
 * @returns Promise with the list of vendors matching the query
 */
export async function findVendors(params: QueryParams = {}) {
	const queryString = buildQueryString(params);
	return quickbooksRequest<{ QueryResponse: { Vendor: Vendor[] } }>(
		`query?query=select * from Vendor${queryString}`,
	);
}
/**
 * Updates an existing vendor in QuickBooks
 * @param vendorData - Vendor data with Id and SyncToken
 * @returns Promise with the updated vendor
 */
export async function updateVendor(
	vendorData: Vendor & { Id: string; SyncToken: string },
) {
	return quickbooksRequest<{ Vendor: Vendor }, { Vendor: Vendor }>(
		"vendor",
		"POST",
		{ Vendor: vendorData },
	);
}
/**
 * Deletes a vendor in QuickBooks
 * @param vendorId - ID of the vendor to delete
 * @param syncToken - SyncToken of the vendor to delete
 * @returns Promise with the deletion result
 */
export async function deleteVendor(vendorId: string, syncToken: string) {
	return quickbooksRequest<
		{ Vendor: Vendor },
		{ Id: string; SyncToken: string }
	>("vendor?operation=delete", "POST", {
		Id: vendorId,
		SyncToken: syncToken,
	});
}
</file>

<file path="src/services/intuit/api.ts">
// @ts-nocheckw
import { refreshTokensIfNeeded } from "./auth";
// Check for required environment variables
if (!process.env.QB_ENVIRONMENT) {
	console.warn("QB_ENVIRONMENT is not set. Defaulting to 'sandbox'.");
}
console.log("🚀 ~ process.env.QB_COMPANY_ID:", process.env.QB_COMPANY_ID);
console.log(
	"🚀 ~ process.env.INTUIT_COMPANY_ID:",
	process.env.INTUIT_COMPANY_ID,
);
// if (!process.env.QB_COMPANY_ID && !process.env.INTUIT_COMPANY_ID) {
// 	console.error(
// 		"Missing company ID! Please set QB_COMPANY_ID or INTUIT_SANDBOX_COMPANY_ID",
// 	);
// }
// Base URL for QuickBooks API
// Company ID from env
const companyId = process.env.INTUIT_COMPANY_ID;
console.log("🚀 ~ companyId:", companyId);
const apiRoot = `${process.env.INTUIT_BASE_URL}/v3/company/${companyId}`;
console.log("🚀 ~ apiRoot:", apiRoot);
console.log("🚀 ~ apiRoot:", apiRoot);
// Validate company ID before any requests
// if (!companyId) {
// 	throw new Error("QuickBooks company ID not found in environment variables");
// }
/**
 * Makes authenticated requests to the QuickBooks API
 * @param endpoint - The API endpoint to call
 * @param method - HTTP method (GET, POST, etc)
 * @param data - Optional data to send with the request
 * @returns Promise with the API response
 */
export async function quickbooksRequest<T, D = Record<string, unknown>>(
	endpoint: string,
	method = "GET",
	data?: D,
): Promise<T> {
	const companyId = process.env.INTUIT_COMPANY_ID;
	const apiRoot = `${process.env.NEXT_PUBLIC_INTUIT_API_BASE_URL}/v3/company/${companyId}`;
	// Refresh tokens if needed
	const tokens = await refreshTokensIfNeeded();
	console.log("🚀 ~ tokens:", tokens);
	if (!tokens) {
		throw new Error("Not authenticated with QuickBooks");
	}
	// Full API URL
	const url = `${apiRoot}/${endpoint}`;
	console.log(`Making QuickBooks API request to: ${url}`);
	console.log(`Using token: ${tokens.access_token.substring(0, 10)}...`);
	console.log(`Company ID: ${companyId}`);
	console.log(`Environment: ${process.env.QB_ENVIRONMENT || "undefined"}`);
	// API request options
	const options: RequestInit = {
		method,
		headers: {
			Authorization: `Bearer ${tokens.access_token}`,
			Accept: "application/json",
			"Content-Type": "application/json",
		},
	};
	if (data && method !== "GET") {
		// Add body data for non-GET requests
		options.body = JSON.stringify(data);
	}
	// Make the request
	const response = await fetch(url, options);
	console.log("🚀 ~ response:", response);
	const res = await response.json();
	console.log("🚀 ~ res:", res);
	if (!response.ok) {
		// Handle non-successful responses
		const errorData = await response.json().catch(() => null);
		console.log("🚀 ~ errorData:", errorData);
		// Log detailed error information
		console.error("QuickBooks API error details:", {
			status: response.status,
			statusText: response.statusText,
			url,
			errorData,
			headers: Object.fromEntries(response.headers.entries()),
		});
		throw new Error(
			`QuickBooks API error: ${response.status} ${response.statusText}`,
			{ cause: errorData },
		);
	}
	// Parse and return the JSON response
	return res;
}
/**
 * QuickBooks Query API Endpoint
 *
 * GET /v3/company/{companyId}/query?query=<selectStatement>&minorversion=75
 *
 * Content type: text/plain
 * Production Base URL: https://quickbooks.api.intuit.com
 * Sandbox Base URL: https://sandbox-quickbooks.api.intuit.com
 *
 * Used for executing SQL-like queries against QuickBooks entities.
 */
/**
 * Builds a QuickBooks query string from the provided parameters
 * @param params - Object containing query parameters
 * @returns Formatted query string
 */
export function buildQueryString(
	params: Record<string, string | number | boolean | undefined>,
): string {
	const queryParts: string[] = [];
	// Handle where conditions
	for (const [key, value] of Object.entries(params)) {
		if (value !== undefined) {
			// Skip pagination and sorting parameters
			if (
				!["limit", "offset", "asc", "desc"].includes(key) &&
				typeof value === "string"
			) {
				queryParts.push(`${key} = '${value}'`);
			}
		}
	}
	// Add the WHERE clause if we have conditions
	let query = queryParts.length > 0 ? ` WHERE ${queryParts.join(" AND ")}` : "";
	// Handle sorting
	if (params.asc) {
		query += ` ORDERBY ${params.asc} ASC`;
	} else if (params.desc) {
		query += ` ORDERBY ${params.desc} DESC`;
	}
	// Handle pagination
	if (params.limit) {
		query += ` MAXRESULTS ${params.limit}`;
	}
	if (params.offset) {
		query += ` STARTPOSITION ${params.offset}`;
	}
	return query;
}
// Re-export all entity APIs
export * from "./vendor/vendor.api";
export * from "./item/item.api";
export * from "./customer/customer.api";
export * from "./company-info/company-info.api";
export * from "./account/account.api";
export * from "./purchase/purchase.api";
export * from "./purchase-order/purchase-order.api";
export * from "./invoice/invoice.api";
export * from "./product/product.api";
</file>

<file path="src/services/intuit/auth.ts">
// @ts-nocheck
"use server";
import { auth, clerkClient } from "@clerk/nextjs/server";
import { oauthClient } from "@/services/intuit/client";
import OAuthClient from "intuit-oauth";
export type IntuitTokens = {
	access_token: string;
	refresh_token: string;
	expires_in: number;
	x_refresh_token_expires_in: number;
	token_type: string;
	createdAt?: number;
};
// Get the authorization URL
export async function getAuthorizationUrl() {
	return await oauthClient.authorizeUri({
		scope: [
			OAuthClient.scopes.Accounting,
			OAuthClient.scopes.OpenId,
			OAuthClient.scopes.Profile,
			OAuthClient.scopes.Email,
			OAuthClient.scopes.Phone,
			OAuthClient.scopes.Address,
		],
		state: "test ",
	});
}
// Generate a random state value for OAuth security
function generateRandomState() {
	return Math.random().toString(36).substring(2, 15);
}
// Store tokens in Clerk user public metadata
export async function storeTokens(tokens: IntuitTokens) {
	const tokensWithTimestamp = {
		...tokens,
		createdAt: Date.now(),
	};
	const { userId } = await auth();
	if (!userId) throw new Error("No authenticated user");
	// Use clerkClient pattern from docs
	const client = await clerkClient();
	await client.users.updateUser(userId, {
		publicMetadata: {
			qbTokens: tokensWithTimestamp,
		},
	});
}
// Retrieve tokens from Clerk user metadata
export async function getTokens(): Promise<IntuitTokens | null> {
	const { userId } = await auth();
	if (!userId) return null;
	const client = await clerkClient();
	const user = await client.users.getUser(userId);
	const tokens = user.publicMetadata.qbTokens as IntuitTokens | undefined;
	console.log("🚀 ~ getTokens ~ tokens:", tokens);
	return tokens || null;
}
// Refresh tokens if needed (15 minutes before expiry)
export async function refreshTokensIfNeeded(): Promise<IntuitTokens | null> {
	function tokensNeedRefresh(tokens: IntuitTokens): boolean {
		if (!tokens.createdAt) return true;
		const expiryTime = tokens.createdAt + tokens.expires_in * 1000;
		const refreshWindow = 15 * 60 * 1000; // 15 minutes
		return Date.now() > expiryTime - refreshWindow;
	}
	const tokens = await getTokens();
	console.log("🚀 ~ refreshTokensIfNeeded ~ tokens:", tokens);
	if (!tokens) return null;
	if (tokensNeedRefresh(tokens)) {
		try {
			const refreshResponse = await oauthClient.refreshUsingToken(
				tokens.refresh_token,
			);
			const newTokens = refreshResponse.getJson();
			await storeTokens(newTokens);
			return newTokens;
		} catch (error) {
			console.error("Error refreshing tokens:", error);
			return null;
		}
	}
	return tokens;
}
// const refreshTokens = async () => {
// 	const tokensNeedRefresh = oauthClient.isAccessTokenValid();
// 	// const tokens = await getTokens();
// 	// if (!tokens) return null;
// 	if (tokensNeedRefresh) {
// 		try {
// 			const refreshResponse = await oauthClient.refresh().then(authResponse => authResponse.getToken())
// 			// const newTokens = refreshResponse.getJson();
// 			// await storeTokens(newTokens);
// 			// return newTokens;
// 		} catch (error) {
// 			console.error("Error refreshing tokens:", error);
// 			return null;
// 		}
// 	}
// 	return tokens;
// // }
// }
// Revoke tokens and remove them from Clerk user metadata
export async function revokeTokens(): Promise<boolean> {
	const tokens = await getTokens();
	if (!tokens) return false;
	try {
		await oauthClient.revoke({ token: tokens.access_token });
		const { userId } = await auth();
		if (!userId) return false;
		// Use clerkClient pattern from docs
		const client = await clerkClient();
		await client.users.updateUser(userId, {
			publicMetadata: {
				qbTokens: null,
			},
		});
		return true;
	} catch (error) {
		console.error("Error revoking tokens:", error);
		return false;
	}
}
// Check if the user is authenticated with Intuit (i.e. tokens exist and are current)
export async function isAuthenticated(): Promise<boolean> {
	const tokens = await refreshTokensIfNeeded();
	return !!tokens;
}
</file>

<file path="src/services/intuit/client.ts">
const OAuthClient = require("intuit-oauth");
export const oauthClient: any = new OAuthClient({
	clientId: process.env.INTUIT_CLIENT_ID,
	clientSecret: process.env.INTUIT_CLIENT_SECRET,
	environment: process.env.INTUIT_ENVIRONMENT_ID,
	redirectUri: process.env.INTUIT_REDIRECT_URI,
	logging: true,
});
</file>

<file path="src/services/intuit/encryption.ts">
import crypto from "node:crypto";
// Make sure to set a secure encryption key in your environment variables
const ENCRYPTION_KEY =
	process.env.ENCRYPTION_KEY || "a-secure-key-that-is-at-least-32-chars";
const ALGORITHM = "aes-256-cbc";
// Function to encrypt data
export function encrypt(text: string): string {
	const iv = crypto.randomBytes(16);
	const cipher = crypto.createCipheriv(
		ALGORITHM,
		Buffer.from(ENCRYPTION_KEY.slice(0, 32)),
		iv,
	);
	let encrypted = cipher.update(text, "utf8", "hex");
	encrypted += cipher.final("hex");
	// Return IV and encrypted data
	return `${iv.toString("hex")}:${encrypted}`;
}
// Function to decrypt data
export function decrypt(encryptedText: string): string {
	const [ivHex, encryptedData] = encryptedText.split(":");
	if (!ivHex || !encryptedData) {
		throw new Error("Invalid encrypted data format");
	}
	const iv = Buffer.from(ivHex, "hex");
	const decipher = crypto.createDecipheriv(
		ALGORITHM,
		Buffer.from(ENCRYPTION_KEY.slice(0, 32)),
		iv,
	);
	let decrypted = decipher.update(encryptedData, "hex", "utf8");
	decrypted += decipher.final("utf8");
	return decrypted;
}
</file>

<file path="src/services/intuit/index.ts">
// Export types
export * from "./types";
// Export API utilities with re-exports of all entity APIs
export * from "./api";
// Export auth utilities
export * from "./auth";
// Export client
export * from "./client";
// Export encryption utilities
export * from "./encryption";
// Export entity APIs
export * from "./vendor/vendor.api";
export * from "./product/product.api";
export * from "./customer/customer.api";
export * from "./invoice/invoice.api";
export * from "./purchase/purchase.api";
export * from "./purchase-order/purchase-order.api";
export * from "./account/account.api";
export * from "./company-info/company-info.api";
export * from "./item/item.api";
</file>

<file path="src/services/intuit/README.md">
# Intuit QuickBooks API Integration

This directory contains a structured organization of QuickBooks API client modules.

## Directory Structure

The codebase is organized by entity type, with each entity having its own directory and API file:

```
src/lib/intuit/
├── account/
│   └── account.api.ts
├── company-info/
│   └── company-info.api.ts
├── customer/
│   └── customer.api.ts
├── invoice/
│   └── invoice.api.ts
├── item/
│   └── item.api.ts
├── product/
│   └── product.api.ts
├── purchase/
│   └── purchase.api.ts
├── purchase-order/
│   └── purchase-order.api.ts
├── vendor/
│   └── vendor.api.ts
├── api.ts
├── auth.ts
├── client.ts
├── encryption.ts
├── index.ts
└── types.ts
```

## Usage

All API functions are exported from the main QuickBooks client at:

```typescript
import * from "src/lib/quickbooks/client";
```

## Available APIs

### Account

- `createAccount`
- `getAccount`
- `updateAccount`
- `findAccounts`
- `deleteAccount`

### Company Info

- `getCompanyInfo`
- `getCompanyInfoById`
- `findCompanyInfos`
- `updateCompanyInfo`

### Customer

- `createCustomer`
- `getCustomer`
- `updateCustomer`
- `findCustomers`
- `deleteCustomer`

### Invoice

- `createInvoice`
- `getInvoice`
- `updateInvoice`
- `findInvoices`
- `deleteInvoice`
- `getInvoicePdf`
- `sendInvoicePdf`

### Item

- `createItem`
- `getItem`
- `updateItem`
- `findItems`
- `deleteItem`

### Product (alias for Item)

- `createProduct`
- `getProduct`
- `updateProduct`
- `findProducts`
- `deleteProduct`

### Purchase

- `createPurchase`
- `getPurchase`
- `updatePurchase`
- `findPurchases`
- `deletePurchase`

### Purchase Order

- `createPurchaseOrder`
- `getPurchaseOrder`
- `updatePurchaseOrder`
- `findPurchaseOrders`
- `deletePurchaseOrder`

### Vendor

- `createVendor`
- `getVendor`
- `updateVendor`
- `findVendors`
- `deleteVendor`

## Authentication

Authentication is handled via the `auth.ts` module which includes functions for refreshing tokens and maintaining the authentication state with QuickBooks.

## Core Utilities

- `quickbooksRequest`: The core function for making authenticated requests to the QuickBooks API
- `buildQueryString`: Helper function to build query strings for filtering entities
</file>

<file path="src/services/intuit/types.ts">
/**
 * Type definitions for QuickBooks API interactions
 */
// Common interface for query parameters
export interface QueryParams {
	limit?: number;
	offset?: number;
	asc?: string;
	desc?: string;
	[key: string]: string | number | boolean | undefined;
}
/**
 * Company information type definition
 */
export type CompanyInfo = {
	Id?: string;
	SyncToken?: string;
	CompanyName: string;
	LegalName?: string;
	CompanyAddr?: {
		Id?: string;
		Line1?: string;
		Line2?: string;
		City?: string;
		CountrySubDivisionCode?: string;
		PostalCode?: string;
		Country?: string;
		Lat?: string;
		Long?: string;
	};
	CustomerCommunicationAddr?: {
		Id?: string;
		Line1?: string;
		Line2?: string;
		City?: string;
		CountrySubDivisionCode?: string;
		PostalCode?: string;
		Country?: string;
		Lat?: string;
		Long?: string;
	};
	CustomerCommunicationEmailAddr?: {
		Address?: string;
	};
	LegalAddr?: {
		Id?: string;
		Line1?: string;
		Line2?: string;
		City?: string;
		CountrySubDivisionCode?: string;
		PostalCode?: string;
		Country?: string;
		Lat?: string;
		Long?: string;
	};
	PrimaryPhone?: { FreeFormNumber?: string };
	CompanyEmail?: { Address?: string };
	WebAddr?: { URI?: string };
	SupportedLanguages?: string;
	Country?: string;
	Email?: { Address?: string };
	FiscalYearStartMonth?: string;
	CompanyStartDate?: string;
	DefaultTimeZone?: string;
	NameValue?: Array<{
		Name: string;
		Value: string;
	}>;
	MetaData?: {
		CreateTime?: string;
		LastUpdatedTime?: string;
	};
	domain?: string;
	sparse?: boolean;
};
/**
 * Type definition for company info query response
 */
export type CompanyInfoResponse = any & {
	CompanyInfo?: CompanyInfo[];
};
/**
 * Customer entity type definition
 */
export type Customer = {
	Id?: string;
	SyncToken?: string;
	DisplayName: string;
	Title?: string;
	GivenName?: string;
	MiddleName?: string;
	FamilyName?: string;
	Suffix?: string;
	CompanyName?: string;
	Active?: boolean;
	Notes?: string;
	Balance?: number;
	PrimaryEmailAddr?: { Address: string };
	PrimaryPhone?: { FreeFormNumber: string };
	Mobile?: { FreeFormNumber: string };
	WebAddr?: { URI: string };
	BillAddr?: {
		Line1?: string;
		Line2?: string;
		Line3?: string;
		City?: string;
		CountrySubDivisionCode?: string;
		PostalCode?: string;
		Country?: string;
	};
	ShipAddr?: {
		Line1?: string;
		Line2?: string;
		Line3?: string;
		City?: string;
		CountrySubDivisionCode?: string;
		PostalCode?: string;
		Country?: string;
	};
	Taxable?: boolean;
	DefaultTaxCodeRef?: { value: string; name?: string };
	PreferredDeliveryMethod?: string;
};
/**
 * Vendor entity type definition
 */
export type Vendor = {
	Id?: string;
	SyncToken?: string;
	DisplayName: string;
	Title?: string;
	GivenName?: string;
	MiddleName?: string;
	FamilyName?: string;
	Suffix?: string;
	CompanyName?: string;
	Active?: boolean;
	Vendor1099?: boolean;
	Balance?: number;
	AcctNum?: string;
	PrintOnCheckName?: string;
	PrimaryEmailAddr?: { Address: string };
	PrimaryPhone?: { FreeFormNumber: string };
	Mobile?: { FreeFormNumber: string };
	WebAddr?: { URI: string };
	BillAddr?: {
		Line1?: string;
		Line2?: string;
		Line3?: string;
		City?: string;
		CountrySubDivisionCode?: string;
		PostalCode?: string;
		Country?: string;
	};
	TermRef?: { value: string; name?: string };
	TaxIdentifier?: string;
};
/**
 * Purchase entity type definition
 */
export type Purchase = {
	Id?: string;
	SyncToken?: string;
	PaymentType: "Cash" | "Check" | "CreditCard";
	AccountRef: { value: string; name?: string };
	EntityRef?: { value: string; name?: string; type?: string };
	Line: Array<{
		Id?: string;
		DetailType: "AccountBasedExpenseLineDetail" | "ItemBasedExpenseLineDetail";
		Amount: number;
		Description?: string;
		AccountBasedExpenseLineDetail?: {
			AccountRef: { value: string; name?: string };
			TaxCodeRef?: { value: string };
			BillableStatus?: string;
			ClassRef?: { value: string; name?: string };
		};
		ItemBasedExpenseLineDetail?: {
			ItemRef: { value: string; name?: string };
			UnitPrice: number;
			Qty: number;
			TaxCodeRef?: { value: string };
			BillableStatus?: string;
			ClassRef?: { value: string; name?: string };
		};
	}>;
	TxnDate?: string;
	CurrencyRef?: { value: string; name?: string };
	PrivateNote?: string;
	DocNumber?: string;
	TxnTaxDetail?: {
		TotalTax: number;
		TaxLine: Array<{
			Amount: number;
			DetailType: string;
			TaxLineDetail: {
				TaxRateRef: { value: string; name?: string };
				PercentBased?: boolean;
				TaxPercent?: number;
				NetAmountTaxable?: number;
				TaxInclusiveAmount?: number;
			};
		}>;
	};
	Credit?: boolean;
	DepartmentRef?: { value: string; name?: string };
};
/**
 * PurchaseOrder entity type definition
 */
export type PurchaseOrder = {
	Id?: string;
	SyncToken?: string;
	APAccountRef: { value: string; name?: string };
	VendorRef: { value: string; name?: string };
	Line: Array<{
		Id?: string;
		DetailType: "AccountBasedExpenseLineDetail" | "ItemBasedExpenseLineDetail";
		Amount: number;
		Description?: string;
		ItemBasedExpenseLineDetail?: {
			ItemRef: { value: string; name?: string };
			UnitPrice: number;
			Qty: number;
			TaxCodeRef?: { value: string };
			BillableStatus?: string;
			ClassRef?: { value: string; name?: string };
		};
	}>;
	POStatus?: "Open" | "Closed";
	TxnDate?: string;
	CurrencyRef?: { value: string; name?: string };
	PrivateNote?: string;
	Memo?: string;
	DocNumber?: string;
	ShipAddr?: {
		Line1?: string;
		Line2?: string;
		Line3?: string;
		City?: string;
		CountrySubDivisionCode?: string;
		PostalCode?: string;
		Country?: string;
	};
	ShipMethodRef?: { value: string; name?: string };
	EmailStatus?: "NotSet" | "NeedToSend" | "EmailSent";
	POEmail?: { Address: string };
};
/**
 * Account entity type definition
 */
export type Account = {
	Id?: string;
	SyncToken?: string;
	Name: string;
	AccountType: string;
	AccountSubType?: string;
	Active?: boolean;
	Description?: string;
	Classification?: "Asset" | "Liability" | "Equity" | "Revenue" | "Expense";
	CurrentBalance?: number;
	CurrentBalanceWithSubAccounts?: number;
	CurrencyRef?: { value: string; name?: string };
	AcctNum?: string;
	ParentRefType?: string;
	ParentRef?: { value: string; name?: string };
	TaxCodeRef?: { value: string; name?: string };
};
/**
 * Item (Product/Service) entity type definition
 */
export type Item = {
	Id?: string;
	SyncToken?: string;
	Name: string;
	Description?: string;
	Active?: boolean;
	SubItem?: boolean;
	ParentRef?: { value: string; name?: string };
	Level?: number;
	FullyQualifiedName?: string;
	Type: "Inventory" | "Service" | "NonInventory" | "Group";
	Taxable?: boolean;
	SalesTaxIncluded?: boolean;
	UnitPrice?: number;
	RatePercent?: number;
	PurchaseCost?: number;
	ExpenseAccountRef?: { value: string; name?: string };
	PurchaseTaxIncluded?: boolean;
	AssetAccountRef?: { value: string; name?: string };
	TrackQtyOnHand?: boolean;
	QtyOnHand?: number;
	InvStartDate?: string;
	IncomeAccountRef?: { value: string; name?: string };
	ReorderPoint?: number;
	ManPartNum?: string;
};
/**
 * Invoice entity type definition
 */
export type Invoice = {
	Id?: string;
	SyncToken?: string;
	CustomerId?: string;
	CustomerRef: { value: string; name?: string };
	CustomerMemo?: { value: string };
	TxnDate?: string;
	Line: Array<{
		Id?: string;
		LineNum?: number;
		Description?: string;
		Amount: number;
		DetailType:
			| "SalesItemLineDetail"
			| "SubTotalLineDetail"
			| "DiscountLineDetail"
			| "GroupLineDetail";
		SalesItemLineDetail?: {
			ItemRef: { value: string; name?: string };
			TaxCodeRef?: { value: string };
			UnitPrice?: number;
			Qty?: number;
			ServiceDate?: string;
		};
		SubTotalLineDetail?: Record<string, unknown>;
		DiscountLineDetail?: {
			DiscountPercent?: number;
			PercentBased?: boolean;
			DiscountAccountRef?: { value: string; name?: string };
		};
	}>;
	TxnTaxDetail?: {
		TotalTax: number;
		TaxLine: Array<{
			Amount: number;
			DetailType: string;
			TaxLineDetail: {
				TaxRateRef: { value: string; name?: string };
				PercentBased?: boolean;
				TaxPercent?: number;
				NetAmountTaxable?: number;
			};
		}>;
	};
	CurrencyRef?: { value: string; name?: string };
	ExchangeRate?: number;
	ShipAddr?: {
		Id?: string;
		Line1?: string;
		Line2?: string;
		Line3?: string;
		City?: string;
		CountrySubDivisionCode?: string;
		PostalCode?: string;
		Country?: string;
	};
	BillAddr?: {
		Id?: string;
		Line1?: string;
		Line2?: string;
		Line3?: string;
		City?: string;
		CountrySubDivisionCode?: string;
		PostalCode?: string;
		Country?: string;
	};
	DueDate?: string;
	TotalAmt?: number;
	ApplyTaxAfterDiscount?: boolean;
	PrintStatus?: "NotSet" | "NeedToPrint" | "PrintComplete";
	EmailStatus?: "NotSet" | "NeedToSend" | "EmailSent";
	BillEmail?: { Address?: string };
	BillEmailCC?: { Address?: string };
	BillEmailBCC?: { Address?: string };
	Balance?: number;
	DocNumber?: string;
	AllowIPNPayment?: boolean;
	AllowOnlinePayment?: boolean;
	AllowOnlineCreditCardPayment?: boolean;
	AllowOnlineACHPayment?: boolean;
	DeliveryInfo?: {
		DeliveryType?: "Email" | "Print";
		DeliveryTime?: string;
	};
	PrivateNote?: string;
	LinkedTxn?: Array<{
		TxnId: string;
		TxnType: string;
		TxnLineId?: string;
	}>;
};
/**
 * Product entity type definition (alias for Item)
 */
export type Product = Item;
</file>

<file path="src/services/quickbooks/client.ts">
const QuickBooks = require("node-quickbooks");
// Export all the intuit API modules
export * from "../intuit";
/**
 * Type definition for QuickBooks client constructor arguments
 */
export type QuickBooksClientArgs = {
	/** The application's consumer key */
	consumerKey: string;
	/** The application's consumer secret */
	consumerSecret: string;
	/** The user's generated token */
	oauth_token: string;
	/** The user's generated secret. Set this to false for oAuth 2. */
	oauth_token_secret: boolean | string;
	/** The company ID */
	realmId: string;
	/** Boolean flag to indicate whether to use Sandbox (i.e. for testing) */
	useSandbox: boolean;
	/** Boolean flag to log http requests, headers, and response bodies to the console */
	debug: boolean;
	/** Minor version for Intuit's API. Use null if you do not want to specify a version, to use the latest */
	minorVer: number | null;
	/** Use string '2.0' for oAuth 2 */
	oAuthVer: string;
	/** The user's generated refresh token. This is the code query parameter in the oAuth 2.0 callback */
	refresh_token: string;
};
export const createQuickBooksClient = (
	oauthToken: string,
	realmId: string,
	refreshToken: string,
) =>
	new QuickBooks(
		process.env.INTUIT_CLIENT_ID,
		process.env.INTUIT_CLIENT_SECRET,
		oauthToken,
		false, // no token secret for oAuth 2.0
		realmId,
		true, // use the sandbox?
		true, // enable debugging?
		null, // set minorversion, or null for the latest version
		"2.0", //oAuth version
		refreshToken,
	);
</file>

<file path="src/services/sage/client.ts">
const baseApi = "https://www.promoplace.com/ws/ws.dll/ConnectAPI";
const SERVICE_IDS = {
	inventoryStatus: 107,
	productSearch: 103,
	basicProdcutDetail: 104,
	fullProductDetail: 105,
	orderForms: 501,
	orderStatus: 502,
};
const authConfig = {
	key: process.env.SAGE_AUTHENTICATION_KEY,
	acctId: process.env.SAGE_ACCOUNT_ID,
	loginId: process.env.SAGE_SYSTEM_LOGIN_ID,
	apiVer: 130,
};
export const fetchSage = async (
	serviceId: number,
	params: Record<string, string>,
) => {
	const response = await fetch(baseApi, {
		method: "POST",
		body: JSON.stringify({
			serviceld: serviceId,
			acctId: authConfig.acctId,
			loginId: authConfig.loginId,
			key: authConfig.key,
			...params,
		}),
	});
	console.log("🚀 ~ fetchSage ~ response:", response);
};
</file>

<file path="src/services/index.ts">
export * from "./intuit";
</file>

<file path="src/stories/assets/accessibility.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="none" viewBox="0 0 48 48"><title>Accessibility</title><circle cx="24.334" cy="24" r="24" fill="#A849FF" fill-opacity=".3"/><path fill="#A470D5" fill-rule="evenodd" d="M27.8609 11.585C27.8609 9.59506 26.2497 7.99023 24.2519 7.99023C22.254 7.99023 20.6429 9.65925 20.6429 11.585C20.6429 13.575 22.254 15.1799 24.2519 15.1799C26.2497 15.1799 27.8609 13.575 27.8609 11.585ZM21.8922 22.6473C21.8467 23.9096 21.7901 25.4788 21.5897 26.2771C20.9853 29.0462 17.7348 36.3314 17.3325 37.2275C17.1891 37.4923 17.1077 37.7955 17.1077 38.1178C17.1077 39.1519 17.946 39.9902 18.9802 39.9902C19.6587 39.9902 20.253 39.6293 20.5814 39.0889L20.6429 38.9874L24.2841 31.22C24.2841 31.22 27.5529 37.9214 27.9238 38.6591C28.2948 39.3967 28.8709 39.9902 29.7168 39.9902C30.751 39.9902 31.5893 39.1519 31.5893 38.1178C31.5893 37.7951 31.3639 37.2265 31.3639 37.2265C30.9581 36.3258 27.698 29.0452 27.0938 26.2771C26.8975 25.4948 26.847 23.9722 26.8056 22.7236C26.7927 22.333 26.7806 21.9693 26.7653 21.6634C26.7008 21.214 27.0231 20.8289 27.4097 20.7005L35.3366 18.3253C36.3033 18.0685 36.8834 16.9773 36.6256 16.0144C36.3678 15.0515 35.2722 14.4737 34.3055 14.7305C34.3055 14.7305 26.8619 17.1057 24.2841 17.1057C21.7062 17.1057 14.456 14.7947 14.456 14.7947C13.4893 14.5379 12.3937 14.9873 12.0715 15.9502C11.7493 16.9131 12.3293 18.0044 13.3604 18.3253L21.2873 20.7005C21.674 20.8289 21.9318 21.214 21.9318 21.6634C21.9174 21.9493 21.9053 22.2857 21.8922 22.6473Z" clip-rule="evenodd"/></svg>
</file>

<file path="src/stories/assets/discord.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="33" height="32" fill="none" viewBox="0 0 33 32"><g clip-path="url(#clip0_10031_177575)"><mask id="mask0_10031_177575" style="mask-type:luminance" width="33" height="25" x="0" y="4" maskUnits="userSpaceOnUse"><path fill="#fff" d="M32.5034 4.00195H0.503906V28.7758H32.5034V4.00195Z"/></mask><g mask="url(#mask0_10031_177575)"><path fill="#5865F2" d="M27.5928 6.20817C25.5533 5.27289 23.3662 4.58382 21.0794 4.18916C21.0378 4.18154 20.9962 4.20057 20.9747 4.23864C20.6935 4.73863 20.3819 5.3909 20.1637 5.90358C17.7042 5.53558 15.2573 5.53558 12.8481 5.90358C12.6299 5.37951 12.307 4.73863 12.0245 4.23864C12.003 4.20184 11.9614 4.18281 11.9198 4.18916C9.63431 4.58255 7.44721 5.27163 5.40641 6.20817C5.38874 6.21578 5.3736 6.22848 5.36355 6.24497C1.21508 12.439 0.078646 18.4809 0.636144 24.4478C0.638667 24.477 0.655064 24.5049 0.677768 24.5227C3.41481 26.5315 6.06609 27.7511 8.66815 28.5594C8.70979 28.5721 8.75392 28.5569 8.78042 28.5226C9.39594 27.6826 9.94461 26.7968 10.4151 25.8653C10.4428 25.8107 10.4163 25.746 10.3596 25.7244C9.48927 25.3945 8.66058 24.9922 7.86343 24.5354C7.80038 24.4986 7.79533 24.4084 7.85333 24.3653C8.02108 24.2397 8.18888 24.109 8.34906 23.977C8.37804 23.9529 8.41842 23.9478 8.45249 23.963C13.6894 26.3526 19.359 26.3526 24.5341 23.963C24.5682 23.9465 24.6086 23.9516 24.6388 23.9757C24.799 24.1077 24.9668 24.2397 25.1358 24.3653C25.1938 24.4084 25.19 24.4986 25.127 24.5354C24.3298 25.0011 23.5011 25.3945 22.6296 25.7232C22.5728 25.7447 22.5476 25.8107 22.5754 25.8653C23.0559 26.7955 23.6046 27.6812 24.2087 28.5213C24.234 28.5569 24.2794 28.5721 24.321 28.5594C26.9357 27.7511 29.5869 26.5315 32.324 24.5227C32.348 24.5049 32.3631 24.4783 32.3656 24.4491C33.0328 17.5506 31.2481 11.5584 27.6344 6.24623C27.6256 6.22848 27.6105 6.21578 27.5928 6.20817ZM11.1971 20.8146C9.62043 20.8146 8.32129 19.3679 8.32129 17.5913C8.32129 15.8146 9.59523 14.368 11.1971 14.368C12.8115 14.368 14.0981 15.8273 14.0729 17.5913C14.0729 19.3679 12.7989 20.8146 11.1971 20.8146ZM21.8299 20.8146C20.2533 20.8146 18.9541 19.3679 18.9541 17.5913C18.9541 15.8146 20.228 14.368 21.8299 14.368C23.4444 14.368 24.7309 15.8273 24.7057 17.5913C24.7057 19.3679 23.4444 20.8146 21.8299 20.8146Z"/></g></g><defs><clipPath id="clip0_10031_177575"><rect width="32" height="32" fill="#fff" transform="translate(0.5)"/></clipPath></defs></svg>
</file>

<file path="src/stories/assets/github.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="none" viewBox="0 0 32 32"><path fill="#161614" d="M16.0001 0C7.16466 0 0 7.17472 0 16.0256C0 23.1061 4.58452 29.1131 10.9419 31.2322C11.7415 31.3805 12.0351 30.8845 12.0351 30.4613C12.0351 30.0791 12.0202 28.8167 12.0133 27.4776C7.56209 28.447 6.62283 25.5868 6.62283 25.5868C5.89499 23.7345 4.8463 23.2419 4.8463 23.2419C3.39461 22.2473 4.95573 22.2678 4.95573 22.2678C6.56242 22.3808 7.40842 23.9192 7.40842 23.9192C8.83547 26.3691 11.1514 25.6609 12.0645 25.2514C12.2081 24.2156 12.6227 23.5087 13.0803 23.1085C9.52648 22.7032 5.7906 21.3291 5.7906 15.1886C5.7906 13.4389 6.41563 12.0094 7.43916 10.8871C7.27303 10.4834 6.72537 8.85349 7.59415 6.64609C7.59415 6.64609 8.93774 6.21539 11.9953 8.28877C13.2716 7.9337 14.6404 7.75563 16.0001 7.74953C17.3599 7.75563 18.7297 7.9337 20.0084 8.28877C23.0623 6.21539 24.404 6.64609 24.404 6.64609C25.2749 8.85349 24.727 10.4834 24.5608 10.8871C25.5868 12.0094 26.2075 13.4389 26.2075 15.1886C26.2075 21.3437 22.4645 22.699 18.9017 23.0957C19.4756 23.593 19.9869 24.5683 19.9869 26.0634C19.9869 28.2077 19.9684 29.9334 19.9684 30.4613C19.9684 30.8877 20.2564 31.3874 21.0674 31.2301C27.4213 29.1086 32 23.1037 32 16.0256C32 7.17472 24.8364 0 16.0001 0ZM5.99257 22.8288C5.95733 22.9084 5.83227 22.9322 5.71834 22.8776C5.60229 22.8253 5.53711 22.7168 5.57474 22.6369C5.60918 22.5549 5.7345 22.5321 5.85029 22.587C5.9666 22.6393 6.03284 22.7489 5.99257 22.8288ZM6.7796 23.5321C6.70329 23.603 6.55412 23.5701 6.45291 23.4581C6.34825 23.3464 6.32864 23.197 6.40601 23.125C6.4847 23.0542 6.62937 23.0874 6.73429 23.1991C6.83895 23.3121 6.85935 23.4605 6.7796 23.5321ZM7.31953 24.4321C7.2215 24.5003 7.0612 24.4363 6.96211 24.2938C6.86407 24.1513 6.86407 23.9804 6.96422 23.9119C7.06358 23.8435 7.2215 23.905 7.32191 24.0465C7.41968 24.1914 7.41968 24.3623 7.31953 24.4321ZM8.23267 25.4743C8.14497 25.5712 7.95818 25.5452 7.82146 25.413C7.68156 25.2838 7.64261 25.1004 7.73058 25.0035C7.81934 24.9064 8.00719 24.9337 8.14497 25.0648C8.28381 25.1938 8.3262 25.3785 8.23267 25.4743ZM9.41281 25.8262C9.37413 25.9517 9.19423 26.0088 9.013 25.9554C8.83203 25.9005 8.7136 25.7535 8.75016 25.6266C8.78778 25.5003 8.96848 25.4408 9.15104 25.4979C9.33174 25.5526 9.45044 25.6985 9.41281 25.8262ZM10.7559 25.9754C10.7604 26.1076 10.6067 26.2172 10.4165 26.2196C10.2252 26.2238 10.0704 26.1169 10.0683 25.9868C10.0683 25.8534 10.2185 25.7448 10.4098 25.7416C10.6001 25.7379 10.7559 25.8441 10.7559 25.9754ZM12.0753 25.9248C12.0981 26.0537 11.9658 26.1862 11.7769 26.2215C11.5912 26.2554 11.4192 26.1758 11.3957 26.0479C11.3726 25.9157 11.5072 25.7833 11.6927 25.7491C11.8819 25.7162 12.0512 25.7937 12.0753 25.9248Z"/></svg>
</file>

<file path="src/stories/assets/tutorials.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="33" height="32" fill="none" viewBox="0 0 33 32"><g clip-path="url(#clip0_10031_177597)"><path fill="#B7F0EF" fill-rule="evenodd" d="M17 7.87059C17 6.48214 17.9812 5.28722 19.3431 5.01709L29.5249 2.99755C31.3238 2.64076 33 4.01717 33 5.85105V22.1344C33 23.5229 32.0188 24.7178 30.6569 24.9879L20.4751 27.0074C18.6762 27.3642 17 25.9878 17 24.1539L17 7.87059Z" clip-rule="evenodd" opacity=".7"/><path fill="#87E6E5" fill-rule="evenodd" d="M1 5.85245C1 4.01857 2.67623 2.64215 4.47507 2.99895L14.6569 5.01848C16.0188 5.28861 17 6.48354 17 7.87198V24.1553C17 25.9892 15.3238 27.3656 13.5249 27.0088L3.34311 24.9893C1.98119 24.7192 1 23.5242 1 22.1358V5.85245Z" clip-rule="evenodd"/><path fill="#61C1FD" fill-rule="evenodd" d="M15.543 5.71289C15.543 5.71289 16.8157 5.96289 17.4002 6.57653C17.9847 7.19016 18.4521 9.03107 18.4521 9.03107C18.4521 9.03107 18.4521 25.1106 18.4521 26.9629C18.4521 28.8152 19.3775 31.4174 19.3775 31.4174L17.4002 28.8947L16.2575 31.4174C16.2575 31.4174 15.543 29.0765 15.543 27.122C15.543 25.1674 15.543 5.71289 15.543 5.71289Z" clip-rule="evenodd"/></g><defs><clipPath id="clip0_10031_177597"><rect width="32" height="32" fill="#fff" transform="translate(0.5)"/></clipPath></defs></svg>
</file>

<file path="src/stories/assets/youtube.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="none" viewBox="0 0 32 32"><path fill="#ED1D24" d="M31.3313 8.44657C30.9633 7.08998 29.8791 6.02172 28.5022 5.65916C26.0067 5.00026 16 5.00026 16 5.00026C16 5.00026 5.99333 5.00026 3.4978 5.65916C2.12102 6.02172 1.03665 7.08998 0.668678 8.44657C0 10.9053 0 16.0353 0 16.0353C0 16.0353 0 21.1652 0.668678 23.6242C1.03665 24.9806 2.12102 26.0489 3.4978 26.4116C5.99333 27.0703 16 27.0703 16 27.0703C16 27.0703 26.0067 27.0703 28.5022 26.4116C29.8791 26.0489 30.9633 24.9806 31.3313 23.6242C32 21.1652 32 16.0353 32 16.0353C32 16.0353 32 10.9053 31.3313 8.44657Z"/><path fill="#fff" d="M12.7266 20.6934L21.0902 16.036L12.7266 11.3781V20.6934Z"/></svg>
</file>

<file path="src/stories/button.css">
.storybook-button {
  display: inline-block;
  cursor: pointer;
  border: 0;
  border-radius: 3em;
  font-weight: 700;
  line-height: 1;
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}
.storybook-button--primary {
  background-color: #555ab9;
  color: white;
}
.storybook-button--secondary {
  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;
  background-color: transparent;
  color: #333;
}
.storybook-button--small {
  padding: 10px 16px;
  font-size: 12px;
}
.storybook-button--medium {
  padding: 11px 20px;
  font-size: 14px;
}
.storybook-button--large {
  padding: 12px 24px;
  font-size: 16px;
}
</file>

<file path="src/stories/Button.stories.ts">
import type { Meta, StoryObj } from '@storybook/react';
import { fn } from '@storybook/test';
import { Button } from './Button';
// More on how to set up stories at: https://storybook.js.org/docs/writing-stories#default-export
const meta = {
  title: 'Example/Button',
  component: Button,
  parameters: {
    // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/configure/story-layout
    layout: 'centered',
  },
  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
  tags: ['autodocs'],
  // More on argTypes: https://storybook.js.org/docs/api/argtypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args
  args: { onClick: fn() },
} satisfies Meta<typeof Button>;
export default meta;
type Story = StoryObj<typeof meta>;
// More on writing stories with args: https://storybook.js.org/docs/writing-stories/args
export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};
export const Secondary: Story = {
  args: {
    label: 'Button',
  },
};
export const Large: Story = {
  args: {
    size: 'large',
    label: 'Button',
  },
};
export const Small: Story = {
  args: {
    size: 'small',
    label: 'Button',
  },
};
</file>

<file path="src/stories/Button.tsx">
import React from 'react';
import './button.css';
export interface ButtonProps {
  /** Is this the principal call to action on the page? */
  primary?: boolean;
  /** What background color to use */
  backgroundColor?: string;
  /** How large should the button be? */
  size?: 'small' | 'medium' | 'large';
  /** Button contents */
  label: string;
  /** Optional click handler */
  onClick?: () => void;
}
/** Primary UI component for user interaction */
export const Button = ({
  primary = false,
  size = 'medium',
  backgroundColor,
  label,
  ...props
}: ButtonProps) => {
  const mode = primary ? 'storybook-button--primary' : 'storybook-button--secondary';
  return (
    <button
      type="button"
      className={['storybook-button', `storybook-button--${size}`, mode].join(' ')}
      {...props}
    >
      {label}
      <style jsx>{`
        button {
          background-color: ${backgroundColor};
        }
      `}</style>
    </button>
  );
};
</file>

<file path="src/stories/header.css">
.storybook-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  padding: 15px 20px;
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}
.storybook-header svg {
  display: inline-block;
  vertical-align: top;
}
.storybook-header h1 {
  display: inline-block;
  vertical-align: top;
  margin: 6px 0 6px 10px;
  font-weight: 700;
  font-size: 20px;
  line-height: 1;
}
.storybook-header button + button {
  margin-left: 10px;
}
.storybook-header .welcome {
  margin-right: 10px;
  color: #333;
  font-size: 14px;
}
</file>

<file path="src/stories/Header.stories.ts">
import type { Meta, StoryObj } from '@storybook/react';
import { fn } from '@storybook/test';
import { Header } from './Header';
const meta = {
  title: 'Example/Header',
  component: Header,
  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
  tags: ['autodocs'],
  parameters: {
    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout
    layout: 'fullscreen',
  },
  args: {
    onLogin: fn(),
    onLogout: fn(),
    onCreateAccount: fn(),
  },
} satisfies Meta<typeof Header>;
export default meta;
type Story = StoryObj<typeof meta>;
export const LoggedIn: Story = {
  args: {
    user: {
      name: 'Jane Doe',
    },
  },
};
export const LoggedOut: Story = {};
</file>

<file path="src/stories/Header.tsx">
import React from 'react';
import { Button } from './Button';
import './header.css';
type User = {
  name: string;
};
export interface HeaderProps {
  user?: User;
  onLogin?: () => void;
  onLogout?: () => void;
  onCreateAccount?: () => void;
}
export const Header = ({ user, onLogin, onLogout, onCreateAccount }: HeaderProps) => (
  <header>
    <div className="storybook-header">
      <div>
        <svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
          <g fill="none" fillRule="evenodd">
            <path
              d="M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z"
              fill="#FFF"
            />
            <path
              d="M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z"
              fill="#555AB9"
            />
            <path
              d="M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z"
              fill="#91BAF8"
            />
          </g>
        </svg>
        <h1>Acme</h1>
      </div>
      <div>
        {user ? (
          <>
            <span className="welcome">
              Welcome, <b>{user.name}</b>!
            </span>
            <Button size="small" onClick={onLogout} label="Log out" />
          </>
        ) : (
          <>
            <Button size="small" onClick={onLogin} label="Log in" />
            <Button primary size="small" onClick={onCreateAccount} label="Sign up" />
          </>
        )}
      </div>
    </div>
  </header>
);
</file>

<file path="src/stories/page.css">
.storybook-page {
  margin: 0 auto;
  padding: 48px 20px;
  max-width: 600px;
  color: #333;
  font-size: 14px;
  line-height: 24px;
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}
.storybook-page h2 {
  display: inline-block;
  vertical-align: top;
  margin: 0 0 4px;
  font-weight: 700;
  font-size: 32px;
  line-height: 1;
}
.storybook-page p {
  margin: 1em 0;
}
.storybook-page a {
  color: inherit;
}
.storybook-page ul {
  margin: 1em 0;
  padding-left: 30px;
}
.storybook-page li {
  margin-bottom: 8px;
}
.storybook-page .tip {
  display: inline-block;
  vertical-align: top;
  margin-right: 10px;
  border-radius: 1em;
  background: #e7fdd8;
  padding: 4px 12px;
  color: #357a14;
  font-weight: 700;
  font-size: 11px;
  line-height: 12px;
}
.storybook-page .tip-wrapper {
  margin-top: 40px;
  margin-bottom: 40px;
  font-size: 13px;
  line-height: 20px;
}
.storybook-page .tip-wrapper svg {
  display: inline-block;
  vertical-align: top;
  margin-top: 3px;
  margin-right: 4px;
  width: 12px;
  height: 12px;
}
.storybook-page .tip-wrapper svg path {
  fill: #1ea7fd;
}
</file>

<file path="src/stories/Page.stories.ts">
import type { Meta, StoryObj } from '@storybook/react';
import { expect, userEvent, within } from '@storybook/test';
import { Page } from './Page';
const meta = {
  title: 'Example/Page',
  component: Page,
  parameters: {
    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout
    layout: 'fullscreen',
  },
} satisfies Meta<typeof Page>;
export default meta;
type Story = StoryObj<typeof meta>;
export const LoggedOut: Story = {};
// More on component testing: https://storybook.js.org/docs/writing-tests/component-testing
export const LoggedIn: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const loginButton = canvas.getByRole('button', { name: /Log in/i });
    await expect(loginButton).toBeInTheDocument();
    await userEvent.click(loginButton);
    await expect(loginButton).not.toBeInTheDocument();
    const logoutButton = canvas.getByRole('button', { name: /Log out/i });
    await expect(logoutButton).toBeInTheDocument();
  },
};
</file>

<file path="src/stories/Page.tsx">
import React from 'react';
import { Header } from './Header';
import './page.css';
type User = {
  name: string;
};
export const Page: React.FC = () => {
  const [user, setUser] = React.useState<User>();
  return (
    <article>
      <Header
        user={user}
        onLogin={() => setUser({ name: 'Jane Doe' })}
        onLogout={() => setUser(undefined)}
        onCreateAccount={() => setUser({ name: 'Jane Doe' })}
      />
      <section className="storybook-page">
        <h2>Pages in Storybook</h2>
        <p>
          We recommend building UIs with a{' '}
          <a href="https://componentdriven.org" target="_blank" rel="noopener noreferrer">
            <strong>component-driven</strong>
          </a>{' '}
          process starting with atomic components and ending with pages.
        </p>
        <p>
          Render pages with mock data. This makes it easy to build and review page states without
          needing to navigate to them in your app. Here are some handy patterns for managing page
          data in Storybook:
        </p>
        <ul>
          <li>
            Use a higher-level connected component. Storybook helps you compose such data from the
            "args" of child component stories
          </li>
          <li>
            Assemble data in the page component from your services. You can mock these services out
            using Storybook.
          </li>
        </ul>
        <p>
          Get a guided tutorial on component-driven development at{' '}
          <a href="https://storybook.js.org/tutorials/" target="_blank" rel="noopener noreferrer">
            Storybook tutorials
          </a>
          . Read more in the{' '}
          <a href="https://storybook.js.org/docs" target="_blank" rel="noopener noreferrer">
            docs
          </a>
          .
        </p>
        <div className="tip-wrapper">
          <span className="tip">Tip</span> Adjust the width of the canvas with the{' '}
          <svg width="10" height="10" viewBox="0 0 12 12" xmlns="http://www.w3.org/2000/svg">
            <g fill="none" fillRule="evenodd">
              <path
                d="M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z"
                id="a"
                fill="#999"
              />
            </g>
          </svg>
          Viewports addon in the toolbar
        </div>
      </section>
    </article>
  );
};
</file>

<file path="src/types/global.d.ts">
// Global type declarations to fix compiler errors
// Fix orientation on Separator
import { DropdownMenuSeparatorProps } from "@radix-ui/react-dropdown-menu";
declare module "@radix-ui/react-dropdown-menu" {
	interface DropdownMenuSeparatorProps {
		orientation?: string;
	}
}
// Fix missing buttonVariants
declare module "@/components/ui/button" {
	export const buttonVariants: any;
}
// Fix missing props on ThemeProvider
declare module "next-themes" {
	interface ThemeProviderProps {
		style?: any;
		enableColorScheme?: boolean;
		disableTransitionOnChange?: boolean;
	}
}
// Fix missing props on Button
declare module "@/components/ui/button" {
	interface ButtonProps {
		asChild?: boolean;
	}
}
// Fix useRef issues
declare module "react" {
	function useRef<T = any>(): React.RefObject<T>;
}
// Fix OAuthClient issues
declare namespace OAuthClient {
	const scopes: {
		Accounting: string;
		OpenId: string;
		Profile: string;
		Email: string;
		Phone: string;
		Address: string;
	};
}
// Fix kokonutui/vercel-v0-chat issues
declare module "@/components/ui/kokonutui/vercel-v0-chat" {
	export const AiCHAT: any;
}
// Fix missing types
declare module "@/components/admin-dashboard" {
	export const AdminDashboard: any;
}
declare module "./sidebar" {
	const Sidebar: any;
	export default Sidebar;
}
// Fix CompanyInfo type
interface CompanyInfo {
	QueryResponse?: any;
}
// Fix missing properties
interface CompanyInfoResponse {
	LegalName?: string;
	CompanyName?: string;
}
</file>

<file path="src/types/intuit-oauth.d.ts">
declare module "intuit-oauth" {
	export default class OAuthClient {
		constructor(options: {
			clientId: string;
			clientSecret: string;
			environment: string;
			redirectUri: string;
		});
		authorizeUri(options: { scope: string[]; state: string }): string;
		createToken(url: string): Promise<{
			getJson(): {
				access_token: string;
				refresh_token: string;
				expires_in: number;
				x_refresh_token_expires_in: number;
				token_type: string;
			};
		}>;
		refreshUsingToken(token: string): Promise<any>;
		revoke(options: { token: string }): Promise<any>;
		getToken(): any;
		setToken(token: any): void;
	}
}
</file>

<file path="src/env.mjs">
// import { createEnv } from "@t3-oss/env-nextjs";
// import { z } from "zod";

// export const env = createEnv({
//   shared: {
//     VERCEL_URL: z
//       .string()
//       .optional()
//       .transform((v) => (v ? `https://${v}` : undefined)),
//     PORT: z.coerce.number().default(3000),
//   },
//   server: {
//     RESEND_API_KEY: z.string(),
//     SUPABASE_SERVICE_KEY: z.string(),
//     UPSTASH_REDIS_REST_TOKEN: z.string(),
//     UPSTASH_REDIS_REST_URL: z.string(),
//   },
//   client: {
//     NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string(),
//     NEXT_PUBLIC_SUPABASE_URL: z.string(),
//   },
//   runtimeEnv: {
//     NEXT_PUBLIC_SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
//     NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL,
//     PORT: process.env.PORT,
//     RESEND_API_KEY: process.env.RESEND_API_KEY,
//     SUPABASE_SERVICE_KEY: process.env.SUPABASE_SERVICE_KEY,
//     UPSTASH_REDIS_REST_TOKEN: process.env.UPSTASH_REDIS_REST_TOKEN,
//     UPSTASH_REDIS_REST_URL: process.env.UPSTASH_REDIS_REST_URL,
//     VERCEL_URL: process.env.VERCEL_URL,
//   },
//   skipValidation: !!process.env.CI || !!process.env.SKIP_ENV_VALIDATION,
// });
</file>

<file path="src/middleware.ts">
import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server";
const isProtectedRoute = createRouteMatcher([
	"/dashboard(.*)",
	"/quickbooks(.*)",
	"/account(.*)",
]);
export default clerkMiddleware(async (auth, req) => {
	if (isProtectedRoute(req)) await auth.protect();
});
export const config = {
	matcher: [
		// Skip Next.js internals and all static files, unless found in search params
		"/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)",
		// Always run for API routes
		"/(api|trpc)(.*)",
	],
};
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

*storybook.log

# Added by Claude Task Master
# Logs
logs
*.log
dev-debug.log
# Dependency directories
node_modules/
# Environment variables
.env
# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
# OS specific
# Task files
tasks.json
tasks/
</file>

<file path=".npmrc">
# Optimize installation
cache=true
prefer-offline=true

# Reduce build errors
loglevel=error
fund=false
audit=false

# Performance enhancements
network-timeout=60000

# Ensure consistent package installation
engine-strict=true
save-exact=true
</file>

<file path="biome.json">
{
	"$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
	"vcs": {
		"enabled": false,
		"clientKind": "git",
		"useIgnoreFile": false
	},
	"files": {
		"ignoreUnknown": false,
		"ignore": []
	},
	"formatter": {
		"enabled": true,
		"indentStyle": "tab"
	},
	"organizeImports": {
		"enabled": true
	},
	"linter": {
		"enabled": true,
		"rules": {
			"recommended": true
		}
	},
	"javascript": {
		"formatter": {
			"quoteStyle": "double"
		}
	}
}
</file>

<file path="CLAUDE.md">
# QuickBooks Oracle Integration - Developer Guide

## Build Commands
- `npm run dev`: Start development server on port 3000
- `npm run build`: Build for production
- `npm run clean`: Clean build artifacts
- `npm run lint`: Run biome linter
- `npm run format`: Format code with biome
- `npm run typecheck`: Type check with TypeScript

## Code Style Guidelines
- **Imports**: Use absolute imports with `@/` prefix (e.g., `import { xyz } from "@/lib/utils"`)
- **Formatting**: Follow biome formatting rules
- **TypeScript**: Use strict typing; avoid `any` type
- **Components**: Prefer server components where possible
- **Naming**: Use camelCase for functions/variables, PascalCase for components/types
- **Error Handling**: Use try/catch for async operations, especially with external APIs
- **QuickBooks API**: Reference Cursor rules (in .cursor/rules/) for entity documentation
- **Secrets**: Never commit API keys or tokens; use environment variables
- **Organization**: Group related functionality in dedicated directories
- **State Management**: Prefer React hooks for state; use server actions for form submissions

## Project Structure
- `/src/app`: Next.js app router pages and API routes
- `/src/lib`: Utility functions and QuickBooks API client code
- `/src/components`: Reusable React components
- `/src/actions`: Server actions for form handling
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/global.css",
    "baseColor": "gray",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="next.config.ts">
/** @type {import('next').NextConfig} */
const nextConfig = {
	/* config options here */
	async redirects() {
		return [
			{
				source: "/quickbooks",
				destination: "/dashboard",
				permanent: true, // 308 status code (permanent redirect)
				// or permanent: false for 307 status code (temporary redirect)
			},
		];
	},
	env: {
		QB_COMPANY_ID: process.env.QB_COMPANY_ID,
		INTUIT_COMPANY_ID: process.env.INTUIT_COMPANY_ID,
	},
	images: {
		remotePatterns: [
			{
				hostname: "**.intuitcdn.net",
			},
			{
				hostname: "ferf1mheo22r9ira.public.blob.vercel-storage.com",
			},
			{
				hostname: "img.clerk.com",
			},
		],
	},
};
export default nextConfig;
</file>

<file path="package.json">
{
  "name": "@quickbooks-ai-oracle",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "prebuild": "npm run typecheck:skip",
    "build": "next build",
    "clean": "git clean -xdf .next .turbo node_modules",
    "lint": "biome lint .",
    "format": "biome format --write .",
    "start": "next start",
    "typecheck": "tsc --noEmit --project tsconfig.loose.json || true",
    "typecheck:skip": "echo 'TypeScript checking skipped' && exit 0",
    "typecheck:strict": "tsc --noEmit",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build",
    "list": "node scripts/dev.js list",
    "generate": "node scripts/dev.js generate",
    "parse-prd": "node scripts/dev.js parse-prd",
    "generate:component": "plop component",
    "generate:feature": "plop feature",
    "generate:page": "plop page",
    "generate:service": "plop service"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.3.4",
    "@anthropic-ai/sdk": "^0.39.0",
    "@clerk/nextjs": "^6.12.5",
    "@clerk/themes": "^2.2.23",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-aspect-ratio": "^1.1.2",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.3",
    "@radix-ui/react-context-menu": "^2.2.6",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-hover-card": "^1.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-navigation-menu": "^1.2.5",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toggle": "^1.1.2",
    "@radix-ui/react-toggle-group": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@tailwindcss/postcss": "^4.0.14",
    "@tanstack/react-table": "^8.21.2",
    "@upstash/redis": "^1.34.5",
    "ai": "^4.2.8",
    "axios": "^1.8.4",
    "biome": "^0.3.3",
    "boxen": "^7.1.1",
    "chalk": "^5.3.0",
    "class-variance-authority": "^0.7.1",
    "clerk": "^0.8.3",
    "cli-table3": "^0.6.3",
    "clsx": "^2.1.1",
    "cmdk": "1.1.1",
    "commander": "^11.1.0",
    "date-fns": "^4.1.0",
    "dotenv": "^16.3.1",
    "embla-carousel-react": "^8.5.2",
    "figlet": "^1.7.0",
    "framer-motion": "^12.5.0",
    "geist": "^1.3.1",
    "gradient-string": "^2.0.2",
    "input-otp": "^1.4.2",
    "intuit-oauth": "^4.2.0",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.485.0",
    "motion": "^12.6.2",
    "next": "15.2.2",
    "next-safe-action": "^7.10.4",
    "next-themes": "^0.4.6",
    "node-quickbooks": "^2.0.45",
    "nuqs": "^2.4.1",
    "openai": "^4.90.0",
    "ora": "^7.0.1",
    "plop": "^4.0.1",
    "postcss": "^8.5.3",
    "react": "^19.0.0",
    "react-day-picker": "8.10.1",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "react-resizable-panels": "^2.1.7",
    "recharts": "^2.15.1",
    "sonner": "^2.0.1",
    "supabase": "^2.19.7",
    "tailwind-merge": "^3.0.2",
    "tailwindcss": "^4.0.14",
    "tailwindcss-animate": "^1.0.7",
    "textarea": "^0.3.0",
    "vaul": "^1.1.2",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@chromatic-com/storybook": "^3.2.6",
    "@storybook/addon-essentials": "^8.6.10",
    "@storybook/addon-interactions": "^8.6.10",
    "@storybook/addon-onboarding": "^8.6.10",
    "@storybook/blocks": "^8.6.10",
    "@storybook/nextjs": "^8.6.10",
    "@storybook/react": "^8.6.10",
    "@storybook/test": "^8.6.10",
    "@types/node": "^22.13.10",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "storybook": "^8.6.10",
    "typescript": "^5.8.2"
  },
  "type": "module"
}
</file>

<file path="plopfile.js">
export default function (plop) {
	// Helper functions
	plop.setHelper("pascalCase", (text) => {
		return text
			.split(/[-_\s]+/)
			.map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
			.join("");
	});
	plop.setHelper("camelCase", (text) => {
		const pascal = plop.getHelper("pascalCase")(text);
		return pascal.charAt(0).toLowerCase() + pascal.slice(1);
	});
	plop.setHelper("kebabCase", (text) => {
		return text
			.split(/[-_\s]+/)
			.join("-")
			.toLowerCase();
	});
	// COMPONENT GENERATOR
	plop.setGenerator("component", {
		description: "Create a new component",
		prompts: [
			{
				type: "input",
				name: "name",
				message: "Component name:",
				validate: (value) => {
					if (/.+/.test(value)) {
						return true;
					}
					return "Component name is required";
				},
			},
			{
				type: "list",
				name: "type",
				message: "Component type:",
				choices: ["ui", "kokonutui", "magicui", "admin", "qr-code", "none"],
				default: "ui",
			},
		],
		actions: (data) => {
			const actions = [];
			const componentName = plop.getHelper("pascalCase")(data.name);
			// Set up paths depending on the type
			let componentPath;
			if (data.type !== "none") {
				componentPath = `src/components/${data.type}/${plop.getHelper("kebabCase")(data.name)}`;
			} else {
				componentPath = `src/components/${plop.getHelper("kebabCase")(data.name)}`;
			}
			// Create the component file
			actions.push({
				type: "add",
				path: `${componentPath}/${componentName}.tsx`,
				templateFile: "plop-templates/component/component.hbs",
			});
			// Create the index file
			actions.push({
				type: "add",
				path: `${componentPath}/index.tsx`,
				templateFile: "plop-templates/component/index.hbs",
			});
			return actions;
		},
	});
	// FEATURE GENERATOR
	plop.setGenerator("feature", {
		description: "Create a new feature with its main component",
		prompts: [
			{
				type: "input",
				name: "name",
				message: "Feature name:",
				validate: (value) => {
					if (/.+/.test(value)) {
						return true;
					}
					return "Feature name is required";
				},
			},
			{
				type: "input",
				name: "component",
				message: "Main component name:",
				default: (data) => {
					return plop.getHelper("pascalCase")(data.name);
				},
			},
		],
		actions: (data) => {
			const actions = [];
			// Assuming features are organized in a feature category folder based on first part of name
			// e.g., user-profile -> user/user-profile
			const nameParts = data.name.split("-");
			const category = nameParts[0];
			const featurePath = `src/features/${category}/${plop.getHelper("kebabCase")(data.name)}`;
			const featureComponent = plop.getHelper("pascalCase")(
				data.component || data.name,
			);
			// Create the feature component file
			actions.push({
				type: "add",
				path: `${featurePath}/${featureComponent}.tsx`,
				templateFile: "plop-templates/feature/component.hbs",
			});
			// Create the feature index file
			actions.push({
				type: "add",
				path: `${featurePath}/index.tsx`,
				templateFile: "plop-templates/feature/index.hbs",
			});
			// Create or modify the category index file
			actions.push({
				type: "add",
				path: `src/features/${category}/index.ts`,
				templateFile: "plop-templates/feature/category-index.hbs",
				skipIfExists: true,
			});
			// Append the export to the category index file if it exists
			actions.push({
				type: "append",
				path: `src/features/${category}/index.ts`,
				pattern: "/* PLOP_EXPORTS */",
				template: `export * from './${plop.getHelper("kebabCase")(data.name)}';`,
			});
			return actions;
		},
	});
	// PAGE GENERATOR
	plop.setGenerator("page", {
		description: "Create a new Next.js page",
		prompts: [
			{
				type: "input",
				name: "path",
				message: 'Page path (e.g. "restaurants/new"):',
				validate: (value) => {
					if (/.+/.test(value)) {
						return true;
					}
					return "Page path is required";
				},
			},
			{
				type: "confirm",
				name: "withLayout",
				message: "Create a layout file?",
				default: false,
			},
			{
				type: "confirm",
				name: "withFeature",
				message: "Create a corresponding feature?",
				default: false,
			},
		],
		actions: (data) => {
			const actions = [];
			const pagePath = `src/app/${data.path}`;
			const pageComponent = data.path.split("/").pop();
			const pageComponentPascal = plop.getHelper("pascalCase")(pageComponent);
			// Create the page file
			actions.push({
				type: "add",
				path: `${pagePath}/page.tsx`,
				templateFile: "plop-templates/page/page.hbs",
			});
			// Optionally create a layout file
			if (data.withLayout) {
				actions.push({
					type: "add",
					path: `${pagePath}/layout.tsx`,
					templateFile: "plop-templates/page/layout.hbs",
				});
			}
			// Optionally create a corresponding feature
			if (data.withFeature) {
				const category = pageComponent;
				const featureName = pageComponent;
				const featurePath = `src/features/${category}/${plop.getHelper("kebabCase")(featureName)}`;
				actions.push({
					type: "add",
					path: `${featurePath}/${pageComponentPascal}.tsx`,
					templateFile: "plop-templates/feature/component.hbs",
				});
				actions.push({
					type: "add",
					path: `${featurePath}/index.tsx`,
					templateFile: "plop-templates/feature/index.hbs",
				});
				actions.push({
					type: "add",
					path: `src/features/${category}/index.ts`,
					templateFile: "plop-templates/feature/category-index.hbs",
					skipIfExists: true,
				});
				actions.push({
					type: "append",
					path: `src/features/${category}/index.ts`,
					pattern: "/* PLOP_EXPORTS */",
					template: `export * from './${plop.getHelper("kebabCase")(featureName)}';`,
				});
			}
			return actions;
		},
	});
	// SERVICE GENERATOR
	plop.setGenerator("service", {
		description: "Create a new service",
		prompts: [
			{
				type: "input",
				name: "name",
				message: "Service name:",
				validate: (value) => {
					if (/.+/.test(value)) {
						return true;
					}
					return "Service name is required";
				},
			},
			{
				type: "confirm",
				name: "withApiRoute",
				message: "Create an API route for this service?",
				default: false,
			},
		],
		actions: (data) => {
			const actions = [];
			const serviceName = plop.getHelper("kebabCase")(data.name);
			const servicePath = `src/service/${serviceName}`;
			// Create the service index file
			actions.push({
				type: "add",
				path: `${servicePath}/index.ts`,
				templateFile: "plop-templates/service/index.hbs",
			});
			// Create the service client file
			actions.push({
				type: "add",
				path: `${servicePath}/client.ts`,
				templateFile: "plop-templates/service/client.hbs",
			});
			// Optionally create an API route
			if (data.withApiRoute) {
				actions.push({
					type: "add",
					path: `src/app/api/${serviceName}/route.ts`,
					templateFile: "plop-templates/service/api-route.hbs",
				});
			}
			return actions;
		},
	});
}
</file>

<file path="postcss.config.mjs">
export default {
	plugins: {
		"@tailwindcss/postcss": {},
	},
};
</file>

<file path="README-generators.md">
# Project Template Automation with Plop.js

This project uses [Plop.js](https://plopjs.com) to automate the creation of components, features, pages, and services using standardized templates. This ensures consistency across the codebase and speeds up development.

## Available Generators

The project includes the following generators:

- **Component**: Creates a new UI component
- **Feature**: Creates a new feature with its main component
- **Page**: Creates a new Next.js page
- **Service**: Creates a new service with optional API routes

## Usage

### Running the Generators

You can run the generators in two ways:

1. **Interactive Mode**:

   ```bash
   npm run generate
   ```

   This will prompt you to select the type of generator you want to use.

2. **Direct Mode**:

   ```bash
   npm run generate:component
   npm run generate:feature
   npm run generate:page
   npm run generate:service
   ```

   These commands will run the specific generator directly.

### Generator Details

#### Component Generator

Creates a new component in a type-specific folder structure.

```bash
npm run generate:component
```

**Prompts**:

- **name**: The name of the component (e.g., "button", "user-card")
- **type**: The type of component (ui, kokonutui, magicui, admin, qr-code, none)

**Output**:
For a component named "data-table" of type "ui":

```
src/components/ui/data-table/DataTable.tsx
src/components/ui/data-table/index.tsx
```

If you select "none" as the type:

```
src/components/data-table/DataTable.tsx
src/components/data-table/index.tsx
```

#### Feature Generator

Creates a new feature with its main component.

```bash
npm run generate:feature
```

**Prompts**:

- **name**: The name of the feature (e.g., "user-profile", "product-catalog")
- **component**: The name of the main component (defaults to the feature name in PascalCase)

**Output**:
For a feature named "user-profile" with component "ProfileCard":

```
src/features/user/user-profile/ProfileCard.tsx
src/features/user/user-profile/index.tsx
src/features/user/index.ts (exports the feature)
```

#### Page Generator

Creates a new Next.js page with optional layout and feature.

```bash
npm run generate:page
```

**Prompts**:

- **path**: The page path (e.g., "dashboard", "products/new")
- **withLayout**: Whether to create a layout file (yes/no)
- **withFeature**: Whether to create a corresponding feature (yes/no)

**Output**:
For a page at path "products/new" with layout and feature:

```
src/app/products/new/page.tsx
src/app/products/new/layout.tsx
src/features/new/new/New.tsx
src/features/new/new/index.tsx
src/features/new/index.ts
```

#### Service Generator

Creates a new service with optional API routes.

```bash
npm run generate:service
```

**Prompts**:

- **name**: The name of the service (e.g., "auth", "products")
- **withApiRoute**: Whether to create an API route for this service (yes/no)

**Output**:
For a service named "auth" with API routes:

```
src/service/auth/index.ts
src/service/auth/client.ts
src/app/api/auth/route.ts
```

## Customizing the Templates

The templates for all generators are located in the `plop-templates` directory:

```
plop-templates/
├── component/
│   ├── component.hbs
│   └── index.hbs
├── feature/
│   ├── component.hbs
│   ├── index.hbs
│   └── category-index.hbs
├── page/
│   ├── page.hbs
│   └── layout.hbs
└── service/
    ├── index.hbs
    ├── client.hbs
    └── api-route.hbs
```

You can modify these templates to match your project's specific needs and coding standards.

## Adding New Generators

To add a new generator, edit the `plopfile.js` file in the project root and add a new generator using the `plop.setGenerator()` method. For more information, refer to the [Plop.js documentation](https://plopjs.com/documentation/#getting-started).

## Tips and Best Practices

1. Use the generators consistently to maintain a standardized codebase
2. Customize the templates to match your project's coding standards
3. Consider adding more specific generators for common patterns in your project
4. Use the generated files as starting points and modify them as needed
</file>

<file path="README-task-master.md">
# Task Master
### by [@eyaltoledano](https://x.com/eyaltoledano)

A task management system for AI-driven development with Claude, designed to work seamlessly with Cursor AI.

## Requirements

- Node.js 14.0.0 or higher
- Anthropic API key (Claude API)
- Anthropic SDK version 0.39.0 or higher
- OpenAI SDK (for Perplexity API integration, optional)

## Configuration

The script can be configured through environment variables in a `.env` file at the root of the project:

### Required Configuration
- `ANTHROPIC_API_KEY`: Your Anthropic API key for Claude

### Optional Configuration
- `MODEL`: Specify which Claude model to use (default: "claude-3-7-sonnet-20250219")
- `MAX_TOKENS`: Maximum tokens for model responses (default: 4000)
- `TEMPERATURE`: Temperature for model responses (default: 0.7)
- `PERPLEXITY_API_KEY`: Your Perplexity API key for research-backed subtask generation
- `PERPLEXITY_MODEL`: Specify which Perplexity model to use (default: "sonar-medium-online")
- `DEBUG`: Enable debug logging (default: false)
- `LOG_LEVEL`: Log level - debug, info, warn, error (default: info)
- `DEFAULT_SUBTASKS`: Default number of subtasks when expanding (default: 3)
- `DEFAULT_PRIORITY`: Default priority for generated tasks (default: medium)
- `PROJECT_NAME`: Override default project name in tasks.json
- `PROJECT_VERSION`: Override default version in tasks.json

## Installation

```bash
# Install globally
npm install -g task-master-ai

# OR install locally within your project
npm install task-master-ai
```

### Initialize a new project

```bash
# If installed globally
task-master init

# If installed locally
npx task-master-init
```

This will prompt you for project details and set up a new project with the necessary files and structure.

### Important Notes

1. This package uses ES modules. Your package.json should include `"type": "module"`.
2. The Anthropic SDK version should be 0.39.0 or higher.

## Quick Start with Global Commands

After installing the package globally, you can use these CLI commands from any directory:

```bash
# Initialize a new project
task-master init

# Parse a PRD and generate tasks
task-master parse-prd your-prd.txt

# List all tasks
task-master list

# Show the next task to work on
task-master next

# Generate task files
task-master generate
```

## Troubleshooting

### If `task-master init` doesn't respond:

Try running it with Node directly:

```bash
node node_modules/claude-task-master/scripts/init.js
```

Or clone the repository and run:

```bash
git clone https://github.com/eyaltoledano/claude-task-master.git
cd claude-task-master
node scripts/init.js
```

## Task Structure

Tasks in tasks.json have the following structure:

- `id`: Unique identifier for the task (Example: `1`)
- `title`: Brief, descriptive title of the task (Example: `"Initialize Repo"`)
- `description`: Concise description of what the task involves (Example: `"Create a new repository, set up initial structure."`)
- `status`: Current state of the task (Example: `"pending"`, `"done"`, `"deferred"`)
- `dependencies`: IDs of tasks that must be completed before this task (Example: `[1, 2]`)
  - Dependencies are displayed with status indicators (✅ for completed, ⏱️ for pending)
  - This helps quickly identify which prerequisite tasks are blocking work
- `priority`: Importance level of the task (Example: `"high"`, `"medium"`, `"low"`)
- `details`: In-depth implementation instructions (Example: `"Use GitHub client ID/secret, handle callback, set session token."`)
- `testStrategy`: Verification approach (Example: `"Deploy and call endpoint to confirm 'Hello World' response."`)
- `subtasks`: List of smaller, more specific tasks that make up the main task (Example: `[{"id": 1, "title": "Configure OAuth", ...}]`)

## Integrating with Cursor AI

Claude Task Master is designed to work seamlessly with [Cursor AI](https://www.cursor.so/), providing a structured workflow for AI-driven development.

### Setup with Cursor

1. After initializing your project, open it in Cursor
2. The `.cursor/rules/dev_workflow.mdc` file is automatically loaded by Cursor, providing the AI with knowledge about the task management system
3. Place your PRD document in the `scripts/` directory (e.g., `scripts/prd.txt`)
4. Open Cursor's AI chat and switch to Agent mode

### Initial Task Generation

In Cursor's AI chat, instruct the agent to generate tasks from your PRD:

```
Please use the task-master parse-prd command to generate tasks from my PRD. The PRD is located at scripts/prd.txt.
```

The agent will execute:
```bash
task-master parse-prd scripts/prd.txt
```

This will:
- Parse your PRD document
- Generate a structured `tasks.json` file with tasks, dependencies, priorities, and test strategies
- The agent will understand this process due to the Cursor rules

### Generate Individual Task Files

Next, ask the agent to generate individual task files:

```
Please generate individual task files from tasks.json
```

The agent will execute:
```bash
task-master generate
```

This creates individual task files in the `tasks/` directory (e.g., `task_001.txt`, `task_002.txt`), making it easier to reference specific tasks.

## AI-Driven Development Workflow

The Cursor agent is pre-configured (via the rules file) to follow this workflow:

### 1. Task Discovery and Selection

Ask the agent to list available tasks:

```
What tasks are available to work on next?
```

The agent will:
- Run `task-master list` to see all tasks
- Run `task-master next` to determine the next task to work on
- Analyze dependencies to determine which tasks are ready to be worked on
- Prioritize tasks based on priority level and ID order
- Suggest the next task(s) to implement

### 2. Task Implementation

When implementing a task, the agent will:
- Reference the task's details section for implementation specifics
- Consider dependencies on previous tasks
- Follow the project's coding standards
- Create appropriate tests based on the task's testStrategy

You can ask:
```
Let's implement task 3. What does it involve?
```

### 3. Task Verification

Before marking a task as complete, verify it according to:
- The task's specified testStrategy
- Any automated tests in the codebase
- Manual verification if required

### 4. Task Completion

When a task is completed, tell the agent:

```
Task 3 is now complete. Please update its status.
```

The agent will execute:
```bash
task-master set-status --id=3 --status=done
```

### 5. Handling Implementation Drift

If during implementation, you discover that:
- The current approach differs significantly from what was planned
- Future tasks need to be modified due to current implementation choices
- New dependencies or requirements have emerged

Tell the agent:
```
We've changed our approach. We're now using Express instead of Fastify. Please update all future tasks to reflect this change.
```

The agent will execute:
```bash
task-master update --from=4 --prompt="Now we are using Express instead of Fastify."
```

This will rewrite or re-scope subsequent tasks in tasks.json while preserving completed work.

### 6. Breaking Down Complex Tasks

For complex tasks that need more granularity:

```
Task 5 seems complex. Can you break it down into subtasks?
```

The agent will execute:
```bash
task-master expand --id=5 --num=3
```

You can provide additional context:
```
Please break down task 5 with a focus on security considerations.
```

The agent will execute:
```bash
task-master expand --id=5 --prompt="Focus on security aspects"
```

You can also expand all pending tasks:
```
Please break down all pending tasks into subtasks.
```

The agent will execute:
```bash
task-master expand --all
```

For research-backed subtask generation using Perplexity AI:
```
Please break down task 5 using research-backed generation.
```

The agent will execute:
```bash
task-master expand --id=5 --research
```

## Command Reference

Here's a comprehensive reference of all available commands:

### Parse PRD
```bash
# Parse a PRD file and generate tasks
task-master parse-prd <prd-file.txt>

# Limit the number of tasks generated
task-master parse-prd <prd-file.txt> --num-tasks=10
```

### List Tasks
```bash
# List all tasks
task-master list

# List tasks with a specific status
task-master list --status=<status>

# List tasks with subtasks
task-master list --with-subtasks

# List tasks with a specific status and include subtasks
task-master list --status=<status> --with-subtasks
```

### Show Next Task
```bash
# Show the next task to work on based on dependencies and status
task-master next
```

### Show Specific Task
```bash
# Show details of a specific task
task-master show <id>
# or
task-master show --id=<id>

# View a specific subtask (e.g., subtask 2 of task 1)
task-master show 1.2
```

### Update Tasks
```bash
# Update tasks from a specific ID and provide context
task-master update --from=<id> --prompt="<prompt>"
```

### Generate Task Files
```bash
# Generate individual task files from tasks.json
task-master generate
```

### Set Task Status
```bash
# Set status of a single task
task-master set-status --id=<id> --status=<status>

# Set status for multiple tasks
task-master set-status --id=1,2,3 --status=<status>

# Set status for subtasks
task-master set-status --id=1.1,1.2 --status=<status>
```

When marking a task as "done", all of its subtasks will automatically be marked as "done" as well.

### Expand Tasks
```bash
# Expand a specific task with subtasks
task-master expand --id=<id> --num=<number>

# Expand with additional context
task-master expand --id=<id> --prompt="<context>"

# Expand all pending tasks
task-master expand --all

# Force regeneration of subtasks for tasks that already have them
task-master expand --all --force

# Research-backed subtask generation for a specific task
task-master expand --id=<id> --research

# Research-backed generation for all tasks
task-master expand --all --research
```

### Clear Subtasks
```bash
# Clear subtasks from a specific task
task-master clear-subtasks --id=<id>

# Clear subtasks from multiple tasks
task-master clear-subtasks --id=1,2,3

# Clear subtasks from all tasks
task-master clear-subtasks --all
```

### Analyze Task Complexity
```bash
# Analyze complexity of all tasks
task-master analyze-complexity

# Save report to a custom location
task-master analyze-complexity --output=my-report.json

# Use a specific LLM model
task-master analyze-complexity --model=claude-3-opus-20240229

# Set a custom complexity threshold (1-10)
task-master analyze-complexity --threshold=6

# Use an alternative tasks file
task-master analyze-complexity --file=custom-tasks.json

# Use Perplexity AI for research-backed complexity analysis
task-master analyze-complexity --research
```

### View Complexity Report
```bash
# Display the task complexity analysis report
task-master complexity-report

# View a report at a custom location
task-master complexity-report --file=my-report.json
```

### Managing Task Dependencies
```bash
# Add a dependency to a task
task-master add-dependency --id=<id> --depends-on=<id>

# Remove a dependency from a task
task-master remove-dependency --id=<id> --depends-on=<id>

# Validate dependencies without fixing them
task-master validate-dependencies

# Find and fix invalid dependencies automatically
task-master fix-dependencies
```

### Add a New Task
```bash
# Add a new task using AI
task-master add-task --prompt="Description of the new task"

# Add a task with dependencies
task-master add-task --prompt="Description" --dependencies=1,2,3

# Add a task with priority
task-master add-task --prompt="Description" --priority=high
```

## Feature Details

### Analyzing Task Complexity

The `analyze-complexity` command:
- Analyzes each task using AI to assess its complexity on a scale of 1-10
- Recommends optimal number of subtasks based on configured DEFAULT_SUBTASKS
- Generates tailored prompts for expanding each task
- Creates a comprehensive JSON report with ready-to-use commands
- Saves the report to scripts/task-complexity-report.json by default

The generated report contains:
- Complexity analysis for each task (scored 1-10)
- Recommended number of subtasks based on complexity
- AI-generated expansion prompts customized for each task
- Ready-to-run expansion commands directly within each task analysis

### Viewing Complexity Report

The `complexity-report` command:
- Displays a formatted, easy-to-read version of the complexity analysis report
- Shows tasks organized by complexity score (highest to lowest)
- Provides complexity distribution statistics (low, medium, high)
- Highlights tasks recommended for expansion based on threshold score
- Includes ready-to-use expansion commands for each complex task
- If no report exists, offers to generate one on the spot

### Smart Task Expansion

The `expand` command automatically checks for and uses the complexity report:

When a complexity report exists:
- Tasks are automatically expanded using the recommended subtask count and prompts
- When expanding all tasks, they're processed in order of complexity (highest first)
- Research-backed generation is preserved from the complexity analysis
- You can still override recommendations with explicit command-line options

Example workflow:
```bash
# Generate the complexity analysis report with research capabilities
task-master analyze-complexity --research

# Review the report in a readable format
task-master complexity-report

# Expand tasks using the optimized recommendations
task-master expand --id=8
# or expand all tasks
task-master expand --all
```

### Finding the Next Task

The `next` command:
- Identifies tasks that are pending/in-progress and have all dependencies satisfied
- Prioritizes tasks by priority level, dependency count, and task ID
- Displays comprehensive information about the selected task:
  - Basic task details (ID, title, priority, dependencies)
  - Implementation details
  - Subtasks (if they exist)
- Provides contextual suggested actions:
  - Command to mark the task as in-progress
  - Command to mark the task as done
  - Commands for working with subtasks

### Viewing Specific Task Details

The `show` command:
- Displays comprehensive details about a specific task or subtask
- Shows task status, priority, dependencies, and detailed implementation notes
- For parent tasks, displays all subtasks and their status
- For subtasks, shows parent task relationship
- Provides contextual action suggestions based on the task's state
- Works with both regular tasks and subtasks (using the format taskId.subtaskId)

## Best Practices for AI-Driven Development

1. **Start with a detailed PRD**: The more detailed your PRD, the better the generated tasks will be.

2. **Review generated tasks**: After parsing the PRD, review the tasks to ensure they make sense and have appropriate dependencies.

3. **Analyze task complexity**: Use the complexity analysis feature to identify which tasks should be broken down further.

4. **Follow the dependency chain**: Always respect task dependencies - the Cursor agent will help with this.

5. **Update as you go**: If your implementation diverges from the plan, use the update command to keep future tasks aligned with your current approach.

6. **Break down complex tasks**: Use the expand command to break down complex tasks into manageable subtasks.

7. **Regenerate task files**: After any updates to tasks.json, regenerate the task files to keep them in sync.

8. **Communicate context to the agent**: When asking the Cursor agent to help with a task, provide context about what you're trying to achieve.

9. **Validate dependencies**: Periodically run the validate-dependencies command to check for invalid or circular dependencies.

## Example Cursor AI Interactions

### Starting a new project
```
I've just initialized a new project with Claude Task Master. I have a PRD at scripts/prd.txt. 
Can you help me parse it and set up the initial tasks?
```

### Working on tasks
```
What's the next task I should work on? Please consider dependencies and priorities.
```

### Implementing a specific task
```
I'd like to implement task 4. Can you help me understand what needs to be done and how to approach it?
```

### Managing subtasks
```
I need to regenerate the subtasks for task 3 with a different approach. Can you help me clear and regenerate them?
```

### Handling changes
```
We've decided to use MongoDB instead of PostgreSQL. Can you update all future tasks to reflect this change?
```

### Completing work
```
I've finished implementing the authentication system described in task 2. All tests are passing. 
Please mark it as complete and tell me what I should work on next.
```

### Analyzing complexity
```
Can you analyze the complexity of our tasks to help me understand which ones need to be broken down further?
```

### Viewing complexity report
```
Can you show me the complexity report in a more readable format?
```
</file>

<file path="README.md">
# Quickbooks/Intuit + Sage AI Oracle

## Techstack

- Supabase
- Clerk Auth
- NextJS
- Shadcn/UI
- OpenAI + Vercel AI SDK

## Intuit Developer Documentation Links (Most Commonly Used)

### Account

- [Account Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/account#the-account-object)
- [Create an Account](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/account#create-an-account)
- [Query an Account](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/account#query-an-account)
- [Read an Account](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/account#read-an-account)
- [Full Update an Account](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/account#full-update-an-account)

### Bill

- [Bill Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/bill#the-bill-object)
- [Create a Bill](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/bill#create-a-bill)
- [Query a Bill](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/bill#query-a-bill)
- [Read a Bill](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/bill#read-a-bill)
- [Full Update a Bill](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/bill#full-update-a-bill)

### Company Info

- [CompanyInfo Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/companyinfo#the-companyinfo-object)
- [Query CompanyInfo](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/companyinfo#query-companyinfo)
- [Read CompanyInfo](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/companyinfo#read-companyinfo)

### Customer

- [Customer Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/customer#the-customer-object)
- [Create a Customer](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/customer#create-a-customer)
- [Query a Customer](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/customer#query-a-customer)
- [Read a Customer](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/customer#read-a-customer)
- [Full Update a Customer](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/customer#full-update-a-customer)

### Employee

- [Employee Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/employee#the-employee-object)
- [Create an Employee](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/employee#create-an-employee)
- [Query an Employee](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/employee#query-an-employee)
- [Read an Employee](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/employee#read-an-employee)
- [Full Update an Employee](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/employee#full-update-an-employee)

### Estimate

- [Estimate Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/estimate#the-estimate-object)
- [Create an Estimate](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/estimate#create-an-estimate)
- [Query an Estimate](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/estimate#query-an-estimate)
- [Read an Estimate](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/estimate#read-an-estimate)
- [Full Update an Estimate](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/estimate#full-update-an-estimate)

### Invoice

- [Invoice Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/invoice#the-invoice-object)
- [Create an Invoice](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/invoice#create-an-invoice)
- [Query an Invoice](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/invoice#query-an-invoice)
- [Read an Invoice](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/invoice#read-an-invoice)
- [Full Update an Invoice](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/invoice#full-update-an-invoice)

### Item

- [Item Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/item#the-item-object)
- [Create an Item](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/item#create-an-item)
- [Query an Item](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/item#query-an-item)
- [Read an Item](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/item#read-an-item)
- [Full Update an Item](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/item#full-update-an-item)

### Payment

- [Payment Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/payment#the-payment-object)
- [Create a Payment](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/payment#create-a-payment)
- [Query a Payment](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/payment#query-a-payment)
- [Read a Payment](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/payment#read-a-payment)
- [Full Update a Payment](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/payment#full-update-a-payment)

### Preferences

- [Preferences Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/preferences#the-preferences-object)
- [Query Preferences](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/preferences#query-preferences)
- [Read Preferences](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/preferences#read-preferences)
- [Full Update Preferences](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/preferences#full-update-preferences)

### Profit and Loss

- [ProfitAndLoss Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/profitandloss#the-profitandloss-object)
- [Query ProfitAndLoss](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/profitandloss#query-profitandloss)
- [Read ProfitAndLoss](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/profitandloss#read-profitandloss)

### Tax Agency

- [TaxAgency Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/taxagency#the-taxagency-object)
- [Create a TaxAgency](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/taxagency#create-a-taxagency)
- [Query a TaxAgency](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/taxagency#query-a-taxagency)
- [Read a TaxAgency](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/taxagency#read-a-taxagency)

### Vendor

- [Vendor Object](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/vendor#the-vendor-object)
- [Create a Vendor](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/vendor#create-a-vendor)
- [Query a Vendor](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/vendor#query-a-vendor)
- [Read a Vendor](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/vendor#read-a-vendor)
- [Full Update a Vendor](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/vendor#full-update-a-vendor)
</file>

<file path="test-apis.mjs">
// Test script for QuickBooks API endpoints
import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3001/api/quickbooks';

async function testEndpoint(path, params = {}) {
  // Build query string from params
  const queryString = Object.entries(params)
    .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
    .join('&');
  
  const url = `${BASE_URL}/${path}${queryString ? `?${queryString}` : ''}`;
  console.log(`Testing: ${url}`);
  
  try {
    const response = await fetch(url);
    const data = await response.json();
    
    console.log(`Status: ${response.status}`);
    console.log('Response:', JSON.stringify(data, null, 2).substring(0, 500) + '...');
    console.log('-'.repeat(80));
    
    return { success: response.status >= 200 && response.status < 300, data };
  } catch (error) {
    console.error(`Error testing ${path}:`, error.message);
    console.log('-'.repeat(80));
    return { success: false, error: error.message };
  }
}

async function runTests() {
  console.log('=== Testing QuickBooks API Endpoints ===');
  
  // Test company info endpoint
  await testEndpoint('company-info');
  
  // Test vendor endpoints
  await testEndpoint('vendor');
  await testEndpoint('vendor', { limit: 5 });
  
  // Test purchase endpoints
  await testEndpoint('purchase');
  await testEndpoint('purchase', { limit: 5 });
  
  // Test purchase order endpoints
  await testEndpoint('purchase-order');
  await testEndpoint('purchase-order', { limit: 5 });
  
  console.log('=== API Tests Complete ===');
}

runTests().catch(console.error);
</file>

<file path="test-mock-apis.mjs">
// Test script for QuickBooks Mock API endpoints
import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3001/api/quickbooks/mock';

async function testEndpoint(path, params = {}) {
  // Build query string from params
  const queryString = Object.entries(params)
    .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
    .join('&');
  
  const url = `${BASE_URL}/${path}${queryString ? `?${queryString}` : ''}`;
  console.log(`Testing: ${url}`);
  
  try {
    const response = await fetch(url);
    const data = await response.json();
    
    console.log(`Status: ${response.status}`);
    console.log('Response:', JSON.stringify(data, null, 2).substring(0, 500) + '...');
    console.log('-'.repeat(80));
    
    return { success: response.status >= 200 && response.status < 300, data };
  } catch (error) {
    console.error(`Error testing ${path}:`, error.message);
    console.log('-'.repeat(80));
    return { success: false, error: error.message };
  }
}

async function runTests() {
  console.log('=== Testing QuickBooks Mock API Endpoints ===');
  
  // Test company info endpoint
  await testEndpoint('company-info');
  
  // Test vendor endpoints
  await testEndpoint('vendor');
  await testEndpoint('vendor', { limit: 2 });
  await testEndpoint('vendor', { id: '1001' });
  
  // Test purchase endpoints
  await testEndpoint('purchase');
  await testEndpoint('purchase', { limit: 2 });
  await testEndpoint('purchase', { id: '2001' });
  
  // Test purchase order endpoints
  await testEndpoint('purchase-order');
  await testEndpoint('purchase-order', { limit: 2 });
  await testEndpoint('purchase-order', { id: '3001' });
  
  console.log('=== API Tests Complete ===');
}

runTests().catch(console.error);
</file>

<file path="tsconfig.json">
{
	"compilerOptions": {
		"target": "es5",
		"lib": ["dom", "dom.iterable", "esnext"],
		"allowJs": true,
		"skipLibCheck": true,
		"strict": false,
		"noEmit": true,

		"esModuleInterop": true,
		"module": "esnext",
		"moduleResolution": "bundler",
		"resolveJsonModule": true,
		"isolatedModules": true,
		"jsx": "preserve",
		"incremental": true,
		"forceConsistentCasingInFileNames": false,
		"noUncheckedIndexedAccess": false,
		"noImplicitAny": false,
		"strictNullChecks": false,
		"strictBindCallApply": false,
		"strictFunctionTypes": false,
		"strictPropertyInitialization": false,
		"useUnknownInCatchVariables": false,
		"noFallthroughCasesInSwitch": false,
		"checkJs": false,
		"noErrorTruncation": true,
		"allowSyntheticDefaultImports": true,
		"skipDefaultLibCheck": true,

		"plugins": [
			{
				"name": "next"
			}
		],
		"baseUrl": ".",
		"paths": {
			"@/*": ["./src/*"]
		}
	},
	"include": [
		"next-env.d.ts",

		"**/*.ts",
		"**/*.tsx",
		".next/types/**/*.ts",
		"tailwind.config.ts"
	],
	"exclude": ["node_modules"]
}
</file>

</files>
